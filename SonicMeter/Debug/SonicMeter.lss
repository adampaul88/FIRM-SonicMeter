
SonicMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061cc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000061cc  000061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000006a0  20000000  000061d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000250  200006a0  00006878  000206a0  2**3
                  ALLOC
  4 .stack        00002000  200008f0  00006ac8  000206a0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000fbce  00000000  00000000  00020721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c74  00000000  00000000  000302ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001a65  00000000  00000000  00031f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000570  00000000  00000000  000339c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000470  00000000  00000000  00033f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018fbd  00000000  00000000  000343a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000880b  00000000  00000000  0004d365  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008c942  00000000  00000000  00055b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001430  00000000  00000000  000e24b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 28 00 20 25 23 00 00 a9 23 00 00 a9 23 00 00     .(. %#...#...#..
	...
      2c:	a9 23 00 00 00 00 00 00 00 00 00 00 a9 23 00 00     .#...........#..
      3c:	a9 23 00 00 a9 23 00 00 f5 22 00 00 a9 23 00 00     .#...#..."...#..
      4c:	45 0b 00 00 a9 23 00 00 a9 23 00 00 a9 23 00 00     E....#...#...#..
      5c:	a9 23 00 00 a9 23 00 00 f5 0d 00 00 49 0f 00 00     .#...#......I...
      6c:	9d 10 00 00 f1 11 00 00 5d 13 00 00 b1 14 00 00     ........].......
      7c:	a9 23 00 00 45 1a 00 00 a9 23 00 00 a9 23 00 00     .#..E....#...#..
      8c:	a9 23 00 00 a9 23 00 00 a9 23 00 00 a9 23 00 00     .#...#...#...#..
      9c:	a9 23 00 00 a9 23 00 00 a9 23 00 00                 .#...#...#..

000000a8 <__do_global_dtors_aux>:
      a8:	b510      	push	{r4, lr}
      aa:	4c06      	ldr	r4, [pc, #24]	; (c4 <__do_global_dtors_aux+0x1c>)
      ac:	7823      	ldrb	r3, [r4, #0]
      ae:	2b00      	cmp	r3, #0
      b0:	d107      	bne.n	c2 <__do_global_dtors_aux+0x1a>
      b2:	4b05      	ldr	r3, [pc, #20]	; (c8 <__do_global_dtors_aux+0x20>)
      b4:	2b00      	cmp	r3, #0
      b6:	d002      	beq.n	be <__do_global_dtors_aux+0x16>
      b8:	4804      	ldr	r0, [pc, #16]	; (cc <__do_global_dtors_aux+0x24>)
      ba:	e000      	b.n	be <__do_global_dtors_aux+0x16>
      bc:	bf00      	nop
      be:	2301      	movs	r3, #1
      c0:	7023      	strb	r3, [r4, #0]
      c2:	bd10      	pop	{r4, pc}
      c4:	200006a0 	.word	0x200006a0
      c8:	00000000 	.word	0x00000000
      cc:	000061d4 	.word	0x000061d4

000000d0 <frame_dummy>:
      d0:	4b08      	ldr	r3, [pc, #32]	; (f4 <frame_dummy+0x24>)
      d2:	b510      	push	{r4, lr}
      d4:	2b00      	cmp	r3, #0
      d6:	d003      	beq.n	e0 <frame_dummy+0x10>
      d8:	4907      	ldr	r1, [pc, #28]	; (f8 <frame_dummy+0x28>)
      da:	4808      	ldr	r0, [pc, #32]	; (fc <frame_dummy+0x2c>)
      dc:	e000      	b.n	e0 <frame_dummy+0x10>
      de:	bf00      	nop
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x30>)
      e2:	6803      	ldr	r3, [r0, #0]
      e4:	2b00      	cmp	r3, #0
      e6:	d100      	bne.n	ea <frame_dummy+0x1a>
      e8:	bd10      	pop	{r4, pc}
      ea:	4b06      	ldr	r3, [pc, #24]	; (104 <frame_dummy+0x34>)
      ec:	2b00      	cmp	r3, #0
      ee:	d0fb      	beq.n	e8 <frame_dummy+0x18>
      f0:	4798      	blx	r3
      f2:	e7f9      	b.n	e8 <frame_dummy+0x18>
      f4:	00000000 	.word	0x00000000
      f8:	200006a4 	.word	0x200006a4
      fc:	000061d4 	.word	0x000061d4
     100:	000061d4 	.word	0x000061d4
     104:	00000000 	.word	0x00000000

00000108 <MCU_Init>:

//=========================================================================
// Implementations
//=========================================================================
void MCU_Init(void)
{
     108:	b580      	push	{r7, lr}
     10a:	af00      	add	r7, sp, #0
	SystemInit();
     10c:	4b0f      	ldr	r3, [pc, #60]	; (14c <MCU_Init+0x44>)
     10e:	4798      	blx	r3

	//Setup NVM Mast
	//Setup 16M OSC to 16mhz
	OSCCTRL->OSC16MCTRL.reg = OSCCTRL_OSC16MCTRL_ONDEMAND | OSCCTRL_OSC16MCTRL_ENABLE | OSCCTRL_OSC16MCTRL_FSEL_16;
     110:	4b0f      	ldr	r3, [pc, #60]	; (150 <MCU_Init+0x48>)
     112:	228e      	movs	r2, #142	; 0x8e
     114:	751a      	strb	r2, [r3, #20]
	
	//Wait for 16Mhz oscilator to be ready
	while(!OSCCTRL->STATUS.bit.OSC16MRDY);
     116:	46c0      	nop			; (mov r8, r8)
     118:	4b0d      	ldr	r3, [pc, #52]	; (150 <MCU_Init+0x48>)
     11a:	68db      	ldr	r3, [r3, #12]
     11c:	06db      	lsls	r3, r3, #27
     11e:	0fdb      	lsrs	r3, r3, #31
     120:	b2db      	uxtb	r3, r3
     122:	2b00      	cmp	r3, #0
     124:	d0f8      	beq.n	118 <MCU_Init+0x10>
	
	//Setup Main Clock
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV_DIV1;
     126:	4b0b      	ldr	r3, [pc, #44]	; (154 <MCU_Init+0x4c>)
     128:	2201      	movs	r2, #1
     12a:	711a      	strb	r2, [r3, #4]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV_DIV8;
     12c:	4b09      	ldr	r3, [pc, #36]	; (154 <MCU_Init+0x4c>)
     12e:	2208      	movs	r2, #8
     130:	719a      	strb	r2, [r3, #6]

	//Setup Gclk Gen 0 at 16mhz
	GCLK->GENCTRL[0].reg = GCLK_GENCTRL_DIV(0) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_OSC16M_FIXED;
     132:	4b09      	ldr	r3, [pc, #36]	; (158 <MCU_Init+0x50>)
     134:	2206      	movs	r2, #6
     136:	32ff      	adds	r2, #255	; 0xff
     138:	621a      	str	r2, [r3, #32]
	//Setup GCLK Gen 1 at 32khz
	GCLK->GENCTRL[1].reg = GCLK_GENCTRL_DIV(500) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_OSC16M_FIXED;
     13a:	4b07      	ldr	r3, [pc, #28]	; (158 <MCU_Init+0x50>)
     13c:	4a07      	ldr	r2, [pc, #28]	; (15c <MCU_Init+0x54>)
     13e:	625a      	str	r2, [r3, #36]	; 0x24
	//Setup GCLK Gen 4 at 8mHz
	GCLK->GENCTRL[2].reg = GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_OSC16M_FIXED;
     140:	4b05      	ldr	r3, [pc, #20]	; (158 <MCU_Init+0x50>)
     142:	4a07      	ldr	r2, [pc, #28]	; (160 <MCU_Init+0x58>)
     144:	629a      	str	r2, [r3, #40]	; 0x28

	//Enable Brown out detection
	//SUPC->BOD33.reg = SUPC_BOD33_HYST | SUPC_BOD33_LEVEL(39) | SUPC_BOD33_ACTION(1);
	//SUPC->BOD33.reg |= SUPC_BOD33_ENABLE; 
}
     146:	46c0      	nop			; (mov r8, r8)
     148:	46bd      	mov	sp, r7
     14a:	bd80      	pop	{r7, pc}
     14c:	000023b1 	.word	0x000023b1
     150:	40001000 	.word	0x40001000
     154:	40000800 	.word	0x40000800
     158:	40001c00 	.word	0x40001c00
     15c:	01f40105 	.word	0x01f40105
     160:	00020105 	.word	0x00020105

00000164 <MCU_Set32MhzClk>:

void MCU_Set32MhzClk(void)
{
     164:	b580      	push	{r7, lr}
     166:	af00      	add	r7, sp, #0
	//Connect 32Khz GenClk 1 to DPLL
	GCLK->PCHCTRL[1].reg = GCLK_PCHCTRL_GEN_GCLK1 | GCLK_PCHCTRL_CHEN;
     168:	4a15      	ldr	r2, [pc, #84]	; (1c0 <MCU_Set32MhzClk+0x5c>)
     16a:	2384      	movs	r3, #132	; 0x84
     16c:	2141      	movs	r1, #65	; 0x41
     16e:	50d1      	str	r1, [r2, r3]
	
	//Set DPLL Ratio
	OSCCTRL->DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0) | OSCCTRL_DPLLRATIO_LDR(0x3e7);
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <MCU_Set32MhzClk+0x60>)
     172:	4a15      	ldr	r2, [pc, #84]	; (1c8 <MCU_Set32MhzClk+0x64>)
     174:	62da      	str	r2, [r3, #44]	; 0x2c
	
	//Set DPLL Control B Register
	OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(2) | OSCCTRL_DPLLCTRLB_FILTER(2);
     176:	4b13      	ldr	r3, [pc, #76]	; (1c4 <MCU_Set32MhzClk+0x60>)
     178:	2222      	movs	r2, #34	; 0x22
     17a:	631a      	str	r2, [r3, #48]	; 0x30
	
	//Set DPLL Control A Register
	OSCCTRL->DPLLCTRLA.reg =  OSCCTRL_DPLLCTRLA_ENABLE;
     17c:	4a11      	ldr	r2, [pc, #68]	; (1c4 <MCU_Set32MhzClk+0x60>)
     17e:	2328      	movs	r3, #40	; 0x28
     180:	2102      	movs	r1, #2
     182:	54d1      	strb	r1, [r2, r3]
	
	//Wait for DPLL to Lock and clock to be ready
	while(!(OSCCTRL->DPLLSTATUS.bit.LOCK || OSCCTRL->DPLLSTATUS.bit.CLKRDY));
     184:	46c0      	nop			; (mov r8, r8)
     186:	4a0f      	ldr	r2, [pc, #60]	; (1c4 <MCU_Set32MhzClk+0x60>)
     188:	233c      	movs	r3, #60	; 0x3c
     18a:	5cd3      	ldrb	r3, [r2, r3]
     18c:	07db      	lsls	r3, r3, #31
     18e:	0fdb      	lsrs	r3, r3, #31
     190:	b2db      	uxtb	r3, r3
     192:	2b00      	cmp	r3, #0
     194:	d107      	bne.n	1a6 <MCU_Set32MhzClk+0x42>
     196:	4a0b      	ldr	r2, [pc, #44]	; (1c4 <MCU_Set32MhzClk+0x60>)
     198:	233c      	movs	r3, #60	; 0x3c
     19a:	5cd3      	ldrb	r3, [r2, r3]
     19c:	079b      	lsls	r3, r3, #30
     19e:	0fdb      	lsrs	r3, r3, #31
     1a0:	b2db      	uxtb	r3, r3
     1a2:	2b00      	cmp	r3, #0
     1a4:	d0ef      	beq.n	186 <MCU_Set32MhzClk+0x22>
	
	//Adjust the Non volatile wait state
	NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS(1);
     1a6:	4b09      	ldr	r3, [pc, #36]	; (1cc <MCU_Set32MhzClk+0x68>)
     1a8:	4a08      	ldr	r2, [pc, #32]	; (1cc <MCU_Set32MhzClk+0x68>)
     1aa:	6852      	ldr	r2, [r2, #4]
     1ac:	2102      	movs	r1, #2
     1ae:	430a      	orrs	r2, r1
     1b0:	605a      	str	r2, [r3, #4]
	
	//Set Main system clock to New 48Mhz clock
	GCLK->GENCTRL[0].reg = GCLK_GENCTRL_DIV(1) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_DPLL96M_FIXED;
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <MCU_Set32MhzClk+0x5c>)
     1b4:	4a06      	ldr	r2, [pc, #24]	; (1d0 <MCU_Set32MhzClk+0x6c>)
     1b6:	621a      	str	r2, [r3, #32]
}
     1b8:	46c0      	nop			; (mov r8, r8)
     1ba:	46bd      	mov	sp, r7
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	40001c00 	.word	0x40001c00
     1c4:	40001000 	.word	0x40001000
     1c8:	000003e7 	.word	0x000003e7
     1cc:	41004000 	.word	0x41004000
     1d0:	00010107 	.word	0x00010107

000001d4 <MCU_PinSetup>:
	for(uint32_t i = 0; i < 32; i++)
		PORT->Group[port].PINCFG[i].reg = (1 << 1) | ((pullUps & (1 << i)) << 2); //enable NEN and pullup if desired
}

void MCU_PinSetup(MCU_PORTS port, uint8_t pin, uint8_t direction, uint8_t state, uint8_t pullUp, uint8_t pmux)
{
     1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1d6:	b083      	sub	sp, #12
     1d8:	af00      	add	r7, sp, #0
     1da:	0005      	movs	r5, r0
     1dc:	000c      	movs	r4, r1
     1de:	0010      	movs	r0, r2
     1e0:	0019      	movs	r1, r3
     1e2:	1dfb      	adds	r3, r7, #7
     1e4:	1c2a      	adds	r2, r5, #0
     1e6:	701a      	strb	r2, [r3, #0]
     1e8:	1dbb      	adds	r3, r7, #6
     1ea:	1c22      	adds	r2, r4, #0
     1ec:	701a      	strb	r2, [r3, #0]
     1ee:	1d7b      	adds	r3, r7, #5
     1f0:	1c02      	adds	r2, r0, #0
     1f2:	701a      	strb	r2, [r3, #0]
     1f4:	1d3b      	adds	r3, r7, #4
     1f6:	1c0a      	adds	r2, r1, #0
     1f8:	701a      	strb	r2, [r3, #0]
	/*Set Pin Direction*/
	if(direction)
     1fa:	1d7b      	adds	r3, r7, #5
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d00c      	beq.n	21c <MCU_PinSetup+0x48>
		PORT->Group[port].DIRSET.reg = (1 << pin);
     202:	4966      	ldr	r1, [pc, #408]	; (39c <MCU_PinSetup+0x1c8>)
     204:	1dfb      	adds	r3, r7, #7
     206:	781b      	ldrb	r3, [r3, #0]
     208:	1dba      	adds	r2, r7, #6
     20a:	7812      	ldrb	r2, [r2, #0]
     20c:	2001      	movs	r0, #1
     20e:	4090      	lsls	r0, r2
     210:	0002      	movs	r2, r0
     212:	01db      	lsls	r3, r3, #7
     214:	18cb      	adds	r3, r1, r3
     216:	3308      	adds	r3, #8
     218:	601a      	str	r2, [r3, #0]
     21a:	e00b      	b.n	234 <MCU_PinSetup+0x60>
	else
		PORT->Group[port].DIRCLR.reg = (1 << pin);
     21c:	495f      	ldr	r1, [pc, #380]	; (39c <MCU_PinSetup+0x1c8>)
     21e:	1dfb      	adds	r3, r7, #7
     220:	781b      	ldrb	r3, [r3, #0]
     222:	1dba      	adds	r2, r7, #6
     224:	7812      	ldrb	r2, [r2, #0]
     226:	2001      	movs	r0, #1
     228:	4090      	lsls	r0, r2
     22a:	0002      	movs	r2, r0
     22c:	01db      	lsls	r3, r3, #7
     22e:	18cb      	adds	r3, r1, r3
     230:	3304      	adds	r3, #4
     232:	601a      	str	r2, [r3, #0]

	/*Set Pin State*/
	if(state)
     234:	1d3b      	adds	r3, r7, #4
     236:	781b      	ldrb	r3, [r3, #0]
     238:	2b00      	cmp	r3, #0
     23a:	d00c      	beq.n	256 <MCU_PinSetup+0x82>
		PORT->Group[port].OUTSET.reg = (1 << pin);
     23c:	4957      	ldr	r1, [pc, #348]	; (39c <MCU_PinSetup+0x1c8>)
     23e:	1dfb      	adds	r3, r7, #7
     240:	781b      	ldrb	r3, [r3, #0]
     242:	1dba      	adds	r2, r7, #6
     244:	7812      	ldrb	r2, [r2, #0]
     246:	2001      	movs	r0, #1
     248:	4090      	lsls	r0, r2
     24a:	0002      	movs	r2, r0
     24c:	01db      	lsls	r3, r3, #7
     24e:	18cb      	adds	r3, r1, r3
     250:	3318      	adds	r3, #24
     252:	601a      	str	r2, [r3, #0]
     254:	e00b      	b.n	26e <MCU_PinSetup+0x9a>
	else
		PORT->Group[port].OUTCLR.reg = (1 << pin);
     256:	4951      	ldr	r1, [pc, #324]	; (39c <MCU_PinSetup+0x1c8>)
     258:	1dfb      	adds	r3, r7, #7
     25a:	781b      	ldrb	r3, [r3, #0]
     25c:	1dba      	adds	r2, r7, #6
     25e:	7812      	ldrb	r2, [r2, #0]
     260:	2001      	movs	r0, #1
     262:	4090      	lsls	r0, r2
     264:	0002      	movs	r2, r0
     266:	01db      	lsls	r3, r3, #7
     268:	18cb      	adds	r3, r1, r3
     26a:	3314      	adds	r3, #20
     26c:	601a      	str	r2, [r3, #0]

	/*Enable PullUp/PullDown Resistor*/
	if(pullUp)
     26e:	2320      	movs	r3, #32
     270:	18fb      	adds	r3, r7, r3
     272:	781b      	ldrb	r3, [r3, #0]
     274:	2b00      	cmp	r3, #0
     276:	d01b      	beq.n	2b0 <MCU_PinSetup+0xdc>
		PORT->Group[port].PINCFG[pin].reg |= (1 << 2);
     278:	4c48      	ldr	r4, [pc, #288]	; (39c <MCU_PinSetup+0x1c8>)
     27a:	1dfb      	adds	r3, r7, #7
     27c:	781a      	ldrb	r2, [r3, #0]
     27e:	1dbb      	adds	r3, r7, #6
     280:	781b      	ldrb	r3, [r3, #0]
     282:	4e46      	ldr	r6, [pc, #280]	; (39c <MCU_PinSetup+0x1c8>)
     284:	1df9      	adds	r1, r7, #7
     286:	7808      	ldrb	r0, [r1, #0]
     288:	1db9      	adds	r1, r7, #6
     28a:	7809      	ldrb	r1, [r1, #0]
     28c:	2540      	movs	r5, #64	; 0x40
     28e:	01c0      	lsls	r0, r0, #7
     290:	1830      	adds	r0, r6, r0
     292:	1841      	adds	r1, r0, r1
     294:	1949      	adds	r1, r1, r5
     296:	7809      	ldrb	r1, [r1, #0]
     298:	b2c9      	uxtb	r1, r1
     29a:	2004      	movs	r0, #4
     29c:	4301      	orrs	r1, r0
     29e:	b2c8      	uxtb	r0, r1
     2a0:	2140      	movs	r1, #64	; 0x40
     2a2:	01d2      	lsls	r2, r2, #7
     2a4:	18a2      	adds	r2, r4, r2
     2a6:	18d3      	adds	r3, r2, r3
     2a8:	185b      	adds	r3, r3, r1
     2aa:	1c02      	adds	r2, r0, #0
     2ac:	701a      	strb	r2, [r3, #0]
     2ae:	e01a      	b.n	2e6 <MCU_PinSetup+0x112>
	else
		PORT->Group[port].PINCFG[pin].reg &= ~(1 << 2);
     2b0:	4c3a      	ldr	r4, [pc, #232]	; (39c <MCU_PinSetup+0x1c8>)
     2b2:	1dfb      	adds	r3, r7, #7
     2b4:	781a      	ldrb	r2, [r3, #0]
     2b6:	1dbb      	adds	r3, r7, #6
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	4e38      	ldr	r6, [pc, #224]	; (39c <MCU_PinSetup+0x1c8>)
     2bc:	1df9      	adds	r1, r7, #7
     2be:	7808      	ldrb	r0, [r1, #0]
     2c0:	1db9      	adds	r1, r7, #6
     2c2:	7809      	ldrb	r1, [r1, #0]
     2c4:	2540      	movs	r5, #64	; 0x40
     2c6:	01c0      	lsls	r0, r0, #7
     2c8:	1830      	adds	r0, r6, r0
     2ca:	1841      	adds	r1, r0, r1
     2cc:	1949      	adds	r1, r1, r5
     2ce:	7809      	ldrb	r1, [r1, #0]
     2d0:	b2c9      	uxtb	r1, r1
     2d2:	2004      	movs	r0, #4
     2d4:	4381      	bics	r1, r0
     2d6:	b2c8      	uxtb	r0, r1
     2d8:	2140      	movs	r1, #64	; 0x40
     2da:	01d2      	lsls	r2, r2, #7
     2dc:	18a2      	adds	r2, r4, r2
     2de:	18d3      	adds	r3, r2, r3
     2e0:	185b      	adds	r3, r3, r1
     2e2:	1c02      	adds	r2, r0, #0
     2e4:	701a      	strb	r2, [r3, #0]

	/*Enable or Disable pmux*/
	if(pmux)
     2e6:	2324      	movs	r3, #36	; 0x24
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	781b      	ldrb	r3, [r3, #0]
     2ec:	2b00      	cmp	r3, #0
     2ee:	d01b      	beq.n	328 <MCU_PinSetup+0x154>
		PORT->Group[port].PINCFG[pin].reg |= (1 << 0);
     2f0:	4c2a      	ldr	r4, [pc, #168]	; (39c <MCU_PinSetup+0x1c8>)
     2f2:	1dfb      	adds	r3, r7, #7
     2f4:	781a      	ldrb	r2, [r3, #0]
     2f6:	1dbb      	adds	r3, r7, #6
     2f8:	781b      	ldrb	r3, [r3, #0]
     2fa:	4e28      	ldr	r6, [pc, #160]	; (39c <MCU_PinSetup+0x1c8>)
     2fc:	1df9      	adds	r1, r7, #7
     2fe:	7808      	ldrb	r0, [r1, #0]
     300:	1db9      	adds	r1, r7, #6
     302:	7809      	ldrb	r1, [r1, #0]
     304:	2540      	movs	r5, #64	; 0x40
     306:	01c0      	lsls	r0, r0, #7
     308:	1830      	adds	r0, r6, r0
     30a:	1841      	adds	r1, r0, r1
     30c:	1949      	adds	r1, r1, r5
     30e:	7809      	ldrb	r1, [r1, #0]
     310:	b2c9      	uxtb	r1, r1
     312:	2001      	movs	r0, #1
     314:	4301      	orrs	r1, r0
     316:	b2c8      	uxtb	r0, r1
     318:	2140      	movs	r1, #64	; 0x40
     31a:	01d2      	lsls	r2, r2, #7
     31c:	18a2      	adds	r2, r4, r2
     31e:	18d3      	adds	r3, r2, r3
     320:	185b      	adds	r3, r3, r1
     322:	1c02      	adds	r2, r0, #0
     324:	701a      	strb	r2, [r3, #0]
     326:	e01a      	b.n	35e <MCU_PinSetup+0x18a>
	else
		PORT->Group[port].PINCFG[pin].reg &= ~(1 << 0);
     328:	4c1c      	ldr	r4, [pc, #112]	; (39c <MCU_PinSetup+0x1c8>)
     32a:	1dfb      	adds	r3, r7, #7
     32c:	781a      	ldrb	r2, [r3, #0]
     32e:	1dbb      	adds	r3, r7, #6
     330:	781b      	ldrb	r3, [r3, #0]
     332:	4e1a      	ldr	r6, [pc, #104]	; (39c <MCU_PinSetup+0x1c8>)
     334:	1df9      	adds	r1, r7, #7
     336:	7808      	ldrb	r0, [r1, #0]
     338:	1db9      	adds	r1, r7, #6
     33a:	7809      	ldrb	r1, [r1, #0]
     33c:	2540      	movs	r5, #64	; 0x40
     33e:	01c0      	lsls	r0, r0, #7
     340:	1830      	adds	r0, r6, r0
     342:	1841      	adds	r1, r0, r1
     344:	1949      	adds	r1, r1, r5
     346:	7809      	ldrb	r1, [r1, #0]
     348:	b2c9      	uxtb	r1, r1
     34a:	2001      	movs	r0, #1
     34c:	4381      	bics	r1, r0
     34e:	b2c8      	uxtb	r0, r1
     350:	2140      	movs	r1, #64	; 0x40
     352:	01d2      	lsls	r2, r2, #7
     354:	18a2      	adds	r2, r4, r2
     356:	18d3      	adds	r3, r2, r3
     358:	185b      	adds	r3, r3, r1
     35a:	1c02      	adds	r2, r0, #0
     35c:	701a      	strb	r2, [r3, #0]

	/*Enable State Buffer for every pin*/
	PORT->Group[port].PINCFG[pin].reg |= (1 << 1);
     35e:	4c0f      	ldr	r4, [pc, #60]	; (39c <MCU_PinSetup+0x1c8>)
     360:	1dfb      	adds	r3, r7, #7
     362:	781a      	ldrb	r2, [r3, #0]
     364:	1dbb      	adds	r3, r7, #6
     366:	781b      	ldrb	r3, [r3, #0]
     368:	4e0c      	ldr	r6, [pc, #48]	; (39c <MCU_PinSetup+0x1c8>)
     36a:	1df9      	adds	r1, r7, #7
     36c:	7808      	ldrb	r0, [r1, #0]
     36e:	1db9      	adds	r1, r7, #6
     370:	7809      	ldrb	r1, [r1, #0]
     372:	2540      	movs	r5, #64	; 0x40
     374:	01c0      	lsls	r0, r0, #7
     376:	1830      	adds	r0, r6, r0
     378:	1841      	adds	r1, r0, r1
     37a:	1949      	adds	r1, r1, r5
     37c:	7809      	ldrb	r1, [r1, #0]
     37e:	b2c9      	uxtb	r1, r1
     380:	2002      	movs	r0, #2
     382:	4301      	orrs	r1, r0
     384:	b2c8      	uxtb	r0, r1
     386:	2140      	movs	r1, #64	; 0x40
     388:	01d2      	lsls	r2, r2, #7
     38a:	18a2      	adds	r2, r4, r2
     38c:	18d3      	adds	r3, r2, r3
     38e:	185b      	adds	r3, r3, r1
     390:	1c02      	adds	r2, r0, #0
     392:	701a      	strb	r2, [r3, #0]
}
     394:	46c0      	nop			; (mov r8, r8)
     396:	46bd      	mov	sp, r7
     398:	b003      	add	sp, #12
     39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     39c:	41006000 	.word	0x41006000

000003a0 <MCU_SetPinState>:

void MCU_SetPinState(MCU_PORTS port, uint8_t pin, uint8_t state)
{
     3a0:	b590      	push	{r4, r7, lr}
     3a2:	b083      	sub	sp, #12
     3a4:	af00      	add	r7, sp, #0
     3a6:	0004      	movs	r4, r0
     3a8:	0008      	movs	r0, r1
     3aa:	0011      	movs	r1, r2
     3ac:	1dfb      	adds	r3, r7, #7
     3ae:	1c22      	adds	r2, r4, #0
     3b0:	701a      	strb	r2, [r3, #0]
     3b2:	1dbb      	adds	r3, r7, #6
     3b4:	1c02      	adds	r2, r0, #0
     3b6:	701a      	strb	r2, [r3, #0]
     3b8:	1d7b      	adds	r3, r7, #5
     3ba:	1c0a      	adds	r2, r1, #0
     3bc:	701a      	strb	r2, [r3, #0]
	/*Set Pin State*/
	if(state)
     3be:	1d7b      	adds	r3, r7, #5
     3c0:	781b      	ldrb	r3, [r3, #0]
     3c2:	2b00      	cmp	r3, #0
     3c4:	d00c      	beq.n	3e0 <MCU_SetPinState+0x40>
		PORT->Group[port].OUTSET.reg = (1 << pin);
     3c6:	490e      	ldr	r1, [pc, #56]	; (400 <MCU_SetPinState+0x60>)
     3c8:	1dfb      	adds	r3, r7, #7
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	1dba      	adds	r2, r7, #6
     3ce:	7812      	ldrb	r2, [r2, #0]
     3d0:	2001      	movs	r0, #1
     3d2:	4090      	lsls	r0, r2
     3d4:	0002      	movs	r2, r0
     3d6:	01db      	lsls	r3, r3, #7
     3d8:	18cb      	adds	r3, r1, r3
     3da:	3318      	adds	r3, #24
     3dc:	601a      	str	r2, [r3, #0]
	else
		PORT->Group[port].OUTCLR.reg = (1 << pin);
}
     3de:	e00b      	b.n	3f8 <MCU_SetPinState+0x58>
		PORT->Group[port].OUTCLR.reg = (1 << pin);
     3e0:	4907      	ldr	r1, [pc, #28]	; (400 <MCU_SetPinState+0x60>)
     3e2:	1dfb      	adds	r3, r7, #7
     3e4:	781b      	ldrb	r3, [r3, #0]
     3e6:	1dba      	adds	r2, r7, #6
     3e8:	7812      	ldrb	r2, [r2, #0]
     3ea:	2001      	movs	r0, #1
     3ec:	4090      	lsls	r0, r2
     3ee:	0002      	movs	r2, r0
     3f0:	01db      	lsls	r3, r3, #7
     3f2:	18cb      	adds	r3, r1, r3
     3f4:	3314      	adds	r3, #20
     3f6:	601a      	str	r2, [r3, #0]
}
     3f8:	46c0      	nop			; (mov r8, r8)
     3fa:	46bd      	mov	sp, r7
     3fc:	b003      	add	sp, #12
     3fe:	bd90      	pop	{r4, r7, pc}
     400:	41006000 	.word	0x41006000

00000404 <MCU_GetPinState>:
{
	PORT->Group[port].OUTTGL.reg = (1 << pin);
}

uint8_t MCU_GetPinState(MCU_PORTS port, uint8_t pin)
{
     404:	b580      	push	{r7, lr}
     406:	b082      	sub	sp, #8
     408:	af00      	add	r7, sp, #0
     40a:	0002      	movs	r2, r0
     40c:	1dfb      	adds	r3, r7, #7
     40e:	701a      	strb	r2, [r3, #0]
     410:	1dbb      	adds	r3, r7, #6
     412:	1c0a      	adds	r2, r1, #0
     414:	701a      	strb	r2, [r3, #0]
	if(PORT->Group[port].IN.reg & (1 << pin))
     416:	4a0a      	ldr	r2, [pc, #40]	; (440 <MCU_GetPinState+0x3c>)
     418:	1dfb      	adds	r3, r7, #7
     41a:	781b      	ldrb	r3, [r3, #0]
     41c:	01db      	lsls	r3, r3, #7
     41e:	18d3      	adds	r3, r2, r3
     420:	3320      	adds	r3, #32
     422:	681b      	ldr	r3, [r3, #0]
     424:	1dba      	adds	r2, r7, #6
     426:	7812      	ldrb	r2, [r2, #0]
     428:	2101      	movs	r1, #1
     42a:	4091      	lsls	r1, r2
     42c:	000a      	movs	r2, r1
     42e:	4013      	ands	r3, r2
     430:	d001      	beq.n	436 <MCU_GetPinState+0x32>
		return 1;
     432:	2301      	movs	r3, #1
     434:	e000      	b.n	438 <MCU_GetPinState+0x34>
	else
		return 0;
     436:	2300      	movs	r3, #0
}
     438:	0018      	movs	r0, r3
     43a:	46bd      	mov	sp, r7
     43c:	b002      	add	sp, #8
     43e:	bd80      	pop	{r7, pc}
     440:	41006000 	.word	0x41006000

00000444 <MCU_SetPmuxFunction>:

void MCU_SetPmuxFunction(MCU_PORTS port, uint8_t pin, uint8_t pmuxFunc)
{
     444:	b590      	push	{r4, r7, lr}
     446:	b083      	sub	sp, #12
     448:	af00      	add	r7, sp, #0
     44a:	0004      	movs	r4, r0
     44c:	0008      	movs	r0, r1
     44e:	0011      	movs	r1, r2
     450:	1dfb      	adds	r3, r7, #7
     452:	1c22      	adds	r2, r4, #0
     454:	701a      	strb	r2, [r3, #0]
     456:	1dbb      	adds	r3, r7, #6
     458:	1c02      	adds	r2, r0, #0
     45a:	701a      	strb	r2, [r3, #0]
     45c:	1d7b      	adds	r3, r7, #5
     45e:	1c0a      	adds	r2, r1, #0
     460:	701a      	strb	r2, [r3, #0]
	if (pin & 1)	
     462:	1dbb      	adds	r3, r7, #6
     464:	781b      	ldrb	r3, [r3, #0]
     466:	2201      	movs	r2, #1
     468:	4013      	ands	r3, r2
     46a:	d01a      	beq.n	4a2 <MCU_SetPmuxFunction+0x5e>
		PORT->Group[port].PMUX[pin >> 1].bit.PMUXO = pmuxFunc;
     46c:	481c      	ldr	r0, [pc, #112]	; (4e0 <MCU_SetPmuxFunction+0x9c>)
     46e:	1dfb      	adds	r3, r7, #7
     470:	781b      	ldrb	r3, [r3, #0]
     472:	1dba      	adds	r2, r7, #6
     474:	7812      	ldrb	r2, [r2, #0]
     476:	0852      	lsrs	r2, r2, #1
     478:	b2d2      	uxtb	r2, r2
     47a:	0014      	movs	r4, r2
     47c:	1d7a      	adds	r2, r7, #5
     47e:	7812      	ldrb	r2, [r2, #0]
     480:	210f      	movs	r1, #15
     482:	400a      	ands	r2, r1
     484:	b2d1      	uxtb	r1, r2
     486:	2230      	movs	r2, #48	; 0x30
     488:	01db      	lsls	r3, r3, #7
     48a:	18c3      	adds	r3, r0, r3
     48c:	191b      	adds	r3, r3, r4
     48e:	189a      	adds	r2, r3, r2
     490:	7813      	ldrb	r3, [r2, #0]
     492:	0108      	lsls	r0, r1, #4
     494:	210f      	movs	r1, #15
     496:	400b      	ands	r3, r1
     498:	1c19      	adds	r1, r3, #0
     49a:	1c03      	adds	r3, r0, #0
     49c:	430b      	orrs	r3, r1
     49e:	7013      	strb	r3, [r2, #0]
	else
		PORT->Group[port].PMUX[pin >> 1].bit.PMUXE = pmuxFunc;
}
     4a0:	e01a      	b.n	4d8 <MCU_SetPmuxFunction+0x94>
		PORT->Group[port].PMUX[pin >> 1].bit.PMUXE = pmuxFunc;
     4a2:	480f      	ldr	r0, [pc, #60]	; (4e0 <MCU_SetPmuxFunction+0x9c>)
     4a4:	1dfb      	adds	r3, r7, #7
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	1dba      	adds	r2, r7, #6
     4aa:	7812      	ldrb	r2, [r2, #0]
     4ac:	0852      	lsrs	r2, r2, #1
     4ae:	b2d2      	uxtb	r2, r2
     4b0:	0014      	movs	r4, r2
     4b2:	1d7a      	adds	r2, r7, #5
     4b4:	7812      	ldrb	r2, [r2, #0]
     4b6:	210f      	movs	r1, #15
     4b8:	400a      	ands	r2, r1
     4ba:	b2d1      	uxtb	r1, r2
     4bc:	2230      	movs	r2, #48	; 0x30
     4be:	01db      	lsls	r3, r3, #7
     4c0:	18c3      	adds	r3, r0, r3
     4c2:	191b      	adds	r3, r3, r4
     4c4:	189a      	adds	r2, r3, r2
     4c6:	7813      	ldrb	r3, [r2, #0]
     4c8:	200f      	movs	r0, #15
     4ca:	4008      	ands	r0, r1
     4cc:	210f      	movs	r1, #15
     4ce:	438b      	bics	r3, r1
     4d0:	1c19      	adds	r1, r3, #0
     4d2:	1c03      	adds	r3, r0, #0
     4d4:	430b      	orrs	r3, r1
     4d6:	7013      	strb	r3, [r2, #0]
}
     4d8:	46c0      	nop			; (mov r8, r8)
     4da:	46bd      	mov	sp, r7
     4dc:	b003      	add	sp, #12
     4de:	bd90      	pop	{r4, r7, pc}
     4e0:	41006000 	.word	0x41006000

000004e4 <DEBUG_Init>:

//=========================================================================
// Implementations
//=========================================================================
void DEBUG_Init(UartLine_t *uartLine)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	6078      	str	r0, [r7, #4]
	#ifdef DEBUG
		_uartLine = uartLine;
     4ec:	4b04      	ldr	r3, [pc, #16]	; (500 <DEBUG_Init+0x1c>)
     4ee:	687a      	ldr	r2, [r7, #4]
     4f0:	601a      	str	r2, [r3, #0]

		debug_init();
     4f2:	4b04      	ldr	r3, [pc, #16]	; (504 <DEBUG_Init+0x20>)
     4f4:	4798      	blx	r3
	#endif
}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	46bd      	mov	sp, r7
     4fa:	b002      	add	sp, #8
     4fc:	bd80      	pop	{r7, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	200006bc 	.word	0x200006bc
     504:	000007b1 	.word	0x000007b1

00000508 <DEBUG_WriteLine>:

	#endif
}

void DEBUG_WriteLine(char* string)
{
     508:	b580      	push	{r7, lr}
     50a:	b082      	sub	sp, #8
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
	#ifdef DEBUG
		
		if(!_initilized)
     510:	4b09      	ldr	r3, [pc, #36]	; (538 <DEBUG_WriteLine+0x30>)
     512:	781b      	ldrb	r3, [r3, #0]
     514:	2b00      	cmp	r3, #0
     516:	d00b      	beq.n	530 <DEBUG_WriteLine+0x28>
			return;

		debug_writeNewLine();
     518:	4b08      	ldr	r3, [pc, #32]	; (53c <DEBUG_WriteLine+0x34>)
     51a:	4798      	blx	r3
		UART_TxSendString(_uartLine, string);
     51c:	4b08      	ldr	r3, [pc, #32]	; (540 <DEBUG_WriteLine+0x38>)
     51e:	681b      	ldr	r3, [r3, #0]
     520:	687a      	ldr	r2, [r7, #4]
     522:	0011      	movs	r1, r2
     524:	0018      	movs	r0, r3
     526:	4b07      	ldr	r3, [pc, #28]	; (544 <DEBUG_WriteLine+0x3c>)
     528:	4798      	blx	r3
		debug_writeEndLine();
     52a:	4b07      	ldr	r3, [pc, #28]	; (548 <DEBUG_WriteLine+0x40>)
     52c:	4798      	blx	r3
     52e:	e000      	b.n	532 <DEBUG_WriteLine+0x2a>
			return;
     530:	46c0      	nop			; (mov r8, r8)

	#endif
}
     532:	46bd      	mov	sp, r7
     534:	b002      	add	sp, #8
     536:	bd80      	pop	{r7, pc}
     538:	200006c0 	.word	0x200006c0
     53c:	00000829 	.word	0x00000829
     540:	200006bc 	.word	0x200006bc
     544:	00001e75 	.word	0x00001e75
     548:	00000881 	.word	0x00000881

0000054c <DEBUG_WriteHex>:

	#endif
}

void DEBUG_WriteHex(char* string, uint32_t number)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	6078      	str	r0, [r7, #4]
     554:	6039      	str	r1, [r7, #0]
	#ifdef DEBUG

		if(!_initilized)
     556:	4b10      	ldr	r3, [pc, #64]	; (598 <DEBUG_WriteHex+0x4c>)
     558:	781b      	ldrb	r3, [r3, #0]
     55a:	2b00      	cmp	r3, #0
     55c:	d018      	beq.n	590 <DEBUG_WriteHex+0x44>
			return;

		debug_writeNewLine();
     55e:	4b0f      	ldr	r3, [pc, #60]	; (59c <DEBUG_WriteHex+0x50>)
     560:	4798      	blx	r3
		UART_TxSendString(_uartLine, string);
     562:	4b0f      	ldr	r3, [pc, #60]	; (5a0 <DEBUG_WriteHex+0x54>)
     564:	681b      	ldr	r3, [r3, #0]
     566:	687a      	ldr	r2, [r7, #4]
     568:	0011      	movs	r1, r2
     56a:	0018      	movs	r0, r3
     56c:	4b0d      	ldr	r3, [pc, #52]	; (5a4 <DEBUG_WriteHex+0x58>)
     56e:	4798      	blx	r3
		UART_TxSendChar(_uartLine, ' ');
     570:	4b0b      	ldr	r3, [pc, #44]	; (5a0 <DEBUG_WriteHex+0x54>)
     572:	681b      	ldr	r3, [r3, #0]
     574:	2120      	movs	r1, #32
     576:	0018      	movs	r0, r3
     578:	4b0b      	ldr	r3, [pc, #44]	; (5a8 <DEBUG_WriteHex+0x5c>)
     57a:	4798      	blx	r3
		UART_TxSendHex(_uartLine, number);
     57c:	4b08      	ldr	r3, [pc, #32]	; (5a0 <DEBUG_WriteHex+0x54>)
     57e:	681b      	ldr	r3, [r3, #0]
     580:	683a      	ldr	r2, [r7, #0]
     582:	0011      	movs	r1, r2
     584:	0018      	movs	r0, r3
     586:	4b09      	ldr	r3, [pc, #36]	; (5ac <DEBUG_WriteHex+0x60>)
     588:	4798      	blx	r3
		debug_writeEndLine();
     58a:	4b09      	ldr	r3, [pc, #36]	; (5b0 <DEBUG_WriteHex+0x64>)
     58c:	4798      	blx	r3
     58e:	e000      	b.n	592 <DEBUG_WriteHex+0x46>
			return;
     590:	46c0      	nop			; (mov r8, r8)

	#endif
}
     592:	46bd      	mov	sp, r7
     594:	b002      	add	sp, #8
     596:	bd80      	pop	{r7, pc}
     598:	200006c0 	.word	0x200006c0
     59c:	00000829 	.word	0x00000829
     5a0:	200006bc 	.word	0x200006bc
     5a4:	00001e75 	.word	0x00001e75
     5a8:	00001f11 	.word	0x00001f11
     5ac:	00001edd 	.word	0x00001edd
     5b0:	00000881 	.word	0x00000881

000005b4 <DEBUG_WriteDouble>:

void DEBUG_WriteDouble(double val, char* string)
{
     5b4:	b5b0      	push	{r4, r5, r7, lr}
     5b6:	b08a      	sub	sp, #40	; 0x28
     5b8:	af00      	add	r7, sp, #0
     5ba:	60b8      	str	r0, [r7, #8]
     5bc:	60f9      	str	r1, [r7, #12]
     5be:	607a      	str	r2, [r7, #4]
	#ifdef DEBUG

	if(!_initilized)
     5c0:	4b68      	ldr	r3, [pc, #416]	; (764 <DEBUG_WriteDouble+0x1b0>)
     5c2:	781b      	ldrb	r3, [r3, #0]
     5c4:	2b00      	cmp	r3, #0
     5c6:	d100      	bne.n	5ca <DEBUG_WriteDouble+0x16>
     5c8:	e0c7      	b.n	75a <DEBUG_WriteDouble+0x1a6>
		return;

	uint8_t isNegative = (val < 0) ? TRUE : FALSE;
     5ca:	2301      	movs	r3, #1
     5cc:	1c1d      	adds	r5, r3, #0
     5ce:	4c66      	ldr	r4, [pc, #408]	; (768 <DEBUG_WriteDouble+0x1b4>)
     5d0:	2200      	movs	r2, #0
     5d2:	2300      	movs	r3, #0
     5d4:	68b8      	ldr	r0, [r7, #8]
     5d6:	68f9      	ldr	r1, [r7, #12]
     5d8:	47a0      	blx	r4
     5da:	1e03      	subs	r3, r0, #0
     5dc:	d101      	bne.n	5e2 <DEBUG_WriteDouble+0x2e>
     5de:	2300      	movs	r3, #0
     5e0:	1c1d      	adds	r5, r3, #0
     5e2:	b2ea      	uxtb	r2, r5
     5e4:	2327      	movs	r3, #39	; 0x27
     5e6:	18fb      	adds	r3, r7, r3
     5e8:	701a      	strb	r2, [r3, #0]

	if(isNegative)
     5ea:	2327      	movs	r3, #39	; 0x27
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	781b      	ldrb	r3, [r3, #0]
     5f0:	2b00      	cmp	r3, #0
     5f2:	d006      	beq.n	602 <DEBUG_WriteDouble+0x4e>
		val = val * -1;
     5f4:	68bb      	ldr	r3, [r7, #8]
     5f6:	60bb      	str	r3, [r7, #8]
     5f8:	68fb      	ldr	r3, [r7, #12]
     5fa:	2280      	movs	r2, #128	; 0x80
     5fc:	0612      	lsls	r2, r2, #24
     5fe:	4053      	eors	r3, r2
     600:	60fb      	str	r3, [r7, #12]

	uint32_t beforeDec = (uint32_t)val;	
     602:	4b5a      	ldr	r3, [pc, #360]	; (76c <DEBUG_WriteDouble+0x1b8>)
     604:	68b8      	ldr	r0, [r7, #8]
     606:	68f9      	ldr	r1, [r7, #12]
     608:	4798      	blx	r3
     60a:	0003      	movs	r3, r0
     60c:	623b      	str	r3, [r7, #32]
	double tempDec = val - (double)beforeDec;
     60e:	4b58      	ldr	r3, [pc, #352]	; (770 <DEBUG_WriteDouble+0x1bc>)
     610:	6a38      	ldr	r0, [r7, #32]
     612:	4798      	blx	r3
     614:	0002      	movs	r2, r0
     616:	000b      	movs	r3, r1
     618:	4c56      	ldr	r4, [pc, #344]	; (774 <DEBUG_WriteDouble+0x1c0>)
     61a:	68b8      	ldr	r0, [r7, #8]
     61c:	68f9      	ldr	r1, [r7, #12]
     61e:	47a0      	blx	r4
     620:	0003      	movs	r3, r0
     622:	000c      	movs	r4, r1
     624:	61bb      	str	r3, [r7, #24]
     626:	61fc      	str	r4, [r7, #28]
	uint32_t dec = (uint32_t)(val * 10000000);
     628:	4c53      	ldr	r4, [pc, #332]	; (778 <DEBUG_WriteDouble+0x1c4>)
     62a:	2200      	movs	r2, #0
     62c:	4b53      	ldr	r3, [pc, #332]	; (77c <DEBUG_WriteDouble+0x1c8>)
     62e:	68b8      	ldr	r0, [r7, #8]
     630:	68f9      	ldr	r1, [r7, #12]
     632:	47a0      	blx	r4
     634:	0003      	movs	r3, r0
     636:	000c      	movs	r4, r1
     638:	0019      	movs	r1, r3
     63a:	0022      	movs	r2, r4
     63c:	4b4b      	ldr	r3, [pc, #300]	; (76c <DEBUG_WriteDouble+0x1b8>)
     63e:	0008      	movs	r0, r1
     640:	0011      	movs	r1, r2
     642:	4798      	blx	r3
     644:	0003      	movs	r3, r0
     646:	617b      	str	r3, [r7, #20]

	debug_writeNewLine();
     648:	4b4d      	ldr	r3, [pc, #308]	; (780 <DEBUG_WriteDouble+0x1cc>)
     64a:	4798      	blx	r3

	if(isNegative)
     64c:	2327      	movs	r3, #39	; 0x27
     64e:	18fb      	adds	r3, r7, r3
     650:	781b      	ldrb	r3, [r3, #0]
     652:	2b00      	cmp	r3, #0
     654:	d006      	beq.n	664 <DEBUG_WriteDouble+0xb0>
		UART_TxSendString(_uartLine, "-");
     656:	4b4b      	ldr	r3, [pc, #300]	; (784 <DEBUG_WriteDouble+0x1d0>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	4a4b      	ldr	r2, [pc, #300]	; (788 <DEBUG_WriteDouble+0x1d4>)
     65c:	0011      	movs	r1, r2
     65e:	0018      	movs	r0, r3
     660:	4b4a      	ldr	r3, [pc, #296]	; (78c <DEBUG_WriteDouble+0x1d8>)
     662:	4798      	blx	r3

	UART_TxSendNumber(_uartLine, beforeDec);
     664:	4b47      	ldr	r3, [pc, #284]	; (784 <DEBUG_WriteDouble+0x1d0>)
     666:	681b      	ldr	r3, [r3, #0]
     668:	6a3a      	ldr	r2, [r7, #32]
     66a:	0011      	movs	r1, r2
     66c:	0018      	movs	r0, r3
     66e:	4b48      	ldr	r3, [pc, #288]	; (790 <DEBUG_WriteDouble+0x1dc>)
     670:	4798      	blx	r3

	UART_TxSendString(_uartLine, ".");
     672:	4b44      	ldr	r3, [pc, #272]	; (784 <DEBUG_WriteDouble+0x1d0>)
     674:	681b      	ldr	r3, [r3, #0]
     676:	4a47      	ldr	r2, [pc, #284]	; (794 <DEBUG_WriteDouble+0x1e0>)
     678:	0011      	movs	r1, r2
     67a:	0018      	movs	r0, r3
     67c:	4b43      	ldr	r3, [pc, #268]	; (78c <DEBUG_WriteDouble+0x1d8>)
     67e:	4798      	blx	r3

	/*This is a dumb way to do this*/
	if((uint32_t)(tempDec * 10) == 0)
     680:	4c3d      	ldr	r4, [pc, #244]	; (778 <DEBUG_WriteDouble+0x1c4>)
     682:	2200      	movs	r2, #0
     684:	4b44      	ldr	r3, [pc, #272]	; (798 <DEBUG_WriteDouble+0x1e4>)
     686:	69b8      	ldr	r0, [r7, #24]
     688:	69f9      	ldr	r1, [r7, #28]
     68a:	47a0      	blx	r4
     68c:	0003      	movs	r3, r0
     68e:	000c      	movs	r4, r1
     690:	0019      	movs	r1, r3
     692:	0022      	movs	r2, r4
     694:	4b35      	ldr	r3, [pc, #212]	; (76c <DEBUG_WriteDouble+0x1b8>)
     696:	0008      	movs	r0, r1
     698:	0011      	movs	r1, r2
     69a:	4798      	blx	r3
     69c:	1e03      	subs	r3, r0, #0
     69e:	d14b      	bne.n	738 <DEBUG_WriteDouble+0x184>
	{
		UART_TxSendString(_uartLine, "0");
     6a0:	4b38      	ldr	r3, [pc, #224]	; (784 <DEBUG_WriteDouble+0x1d0>)
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	4a3d      	ldr	r2, [pc, #244]	; (79c <DEBUG_WriteDouble+0x1e8>)
     6a6:	0011      	movs	r1, r2
     6a8:	0018      	movs	r0, r3
     6aa:	4b38      	ldr	r3, [pc, #224]	; (78c <DEBUG_WriteDouble+0x1d8>)
     6ac:	4798      	blx	r3
		if((uint32_t)(tempDec * 100) == 0)
     6ae:	4c32      	ldr	r4, [pc, #200]	; (778 <DEBUG_WriteDouble+0x1c4>)
     6b0:	2200      	movs	r2, #0
     6b2:	4b3b      	ldr	r3, [pc, #236]	; (7a0 <DEBUG_WriteDouble+0x1ec>)
     6b4:	69b8      	ldr	r0, [r7, #24]
     6b6:	69f9      	ldr	r1, [r7, #28]
     6b8:	47a0      	blx	r4
     6ba:	0003      	movs	r3, r0
     6bc:	000c      	movs	r4, r1
     6be:	0019      	movs	r1, r3
     6c0:	0022      	movs	r2, r4
     6c2:	4b2a      	ldr	r3, [pc, #168]	; (76c <DEBUG_WriteDouble+0x1b8>)
     6c4:	0008      	movs	r0, r1
     6c6:	0011      	movs	r1, r2
     6c8:	4798      	blx	r3
     6ca:	1e03      	subs	r3, r0, #0
     6cc:	d134      	bne.n	738 <DEBUG_WriteDouble+0x184>
		{
			UART_TxSendString(_uartLine, "0");
     6ce:	4b2d      	ldr	r3, [pc, #180]	; (784 <DEBUG_WriteDouble+0x1d0>)
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	4a32      	ldr	r2, [pc, #200]	; (79c <DEBUG_WriteDouble+0x1e8>)
     6d4:	0011      	movs	r1, r2
     6d6:	0018      	movs	r0, r3
     6d8:	4b2c      	ldr	r3, [pc, #176]	; (78c <DEBUG_WriteDouble+0x1d8>)
     6da:	4798      	blx	r3
			if((uint32_t)(tempDec * 1000) == 0)
     6dc:	4c26      	ldr	r4, [pc, #152]	; (778 <DEBUG_WriteDouble+0x1c4>)
     6de:	2200      	movs	r2, #0
     6e0:	4b30      	ldr	r3, [pc, #192]	; (7a4 <DEBUG_WriteDouble+0x1f0>)
     6e2:	69b8      	ldr	r0, [r7, #24]
     6e4:	69f9      	ldr	r1, [r7, #28]
     6e6:	47a0      	blx	r4
     6e8:	0003      	movs	r3, r0
     6ea:	000c      	movs	r4, r1
     6ec:	0019      	movs	r1, r3
     6ee:	0022      	movs	r2, r4
     6f0:	4b1e      	ldr	r3, [pc, #120]	; (76c <DEBUG_WriteDouble+0x1b8>)
     6f2:	0008      	movs	r0, r1
     6f4:	0011      	movs	r1, r2
     6f6:	4798      	blx	r3
     6f8:	1e03      	subs	r3, r0, #0
     6fa:	d11d      	bne.n	738 <DEBUG_WriteDouble+0x184>
			{
				UART_TxSendString(_uartLine, "0");
     6fc:	4b21      	ldr	r3, [pc, #132]	; (784 <DEBUG_WriteDouble+0x1d0>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	4a26      	ldr	r2, [pc, #152]	; (79c <DEBUG_WriteDouble+0x1e8>)
     702:	0011      	movs	r1, r2
     704:	0018      	movs	r0, r3
     706:	4b21      	ldr	r3, [pc, #132]	; (78c <DEBUG_WriteDouble+0x1d8>)
     708:	4798      	blx	r3
				if((uint32_t)(tempDec * 10000) == 0)
     70a:	4c1b      	ldr	r4, [pc, #108]	; (778 <DEBUG_WriteDouble+0x1c4>)
     70c:	2200      	movs	r2, #0
     70e:	4b26      	ldr	r3, [pc, #152]	; (7a8 <DEBUG_WriteDouble+0x1f4>)
     710:	69b8      	ldr	r0, [r7, #24]
     712:	69f9      	ldr	r1, [r7, #28]
     714:	47a0      	blx	r4
     716:	0003      	movs	r3, r0
     718:	000c      	movs	r4, r1
     71a:	0019      	movs	r1, r3
     71c:	0022      	movs	r2, r4
     71e:	4b13      	ldr	r3, [pc, #76]	; (76c <DEBUG_WriteDouble+0x1b8>)
     720:	0008      	movs	r0, r1
     722:	0011      	movs	r1, r2
     724:	4798      	blx	r3
     726:	1e03      	subs	r3, r0, #0
     728:	d106      	bne.n	738 <DEBUG_WriteDouble+0x184>
				{
					UART_TxSendString(_uartLine, "0");
     72a:	4b16      	ldr	r3, [pc, #88]	; (784 <DEBUG_WriteDouble+0x1d0>)
     72c:	681b      	ldr	r3, [r3, #0]
     72e:	4a1b      	ldr	r2, [pc, #108]	; (79c <DEBUG_WriteDouble+0x1e8>)
     730:	0011      	movs	r1, r2
     732:	0018      	movs	r0, r3
     734:	4b15      	ldr	r3, [pc, #84]	; (78c <DEBUG_WriteDouble+0x1d8>)
     736:	4798      	blx	r3
				}
			};
		}
	}
	
	UART_TxSendNumber(_uartLine, dec);
     738:	4b12      	ldr	r3, [pc, #72]	; (784 <DEBUG_WriteDouble+0x1d0>)
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	697a      	ldr	r2, [r7, #20]
     73e:	0011      	movs	r1, r2
     740:	0018      	movs	r0, r3
     742:	4b13      	ldr	r3, [pc, #76]	; (790 <DEBUG_WriteDouble+0x1dc>)
     744:	4798      	blx	r3
	UART_TxSendString(_uartLine, string);
     746:	4b0f      	ldr	r3, [pc, #60]	; (784 <DEBUG_WriteDouble+0x1d0>)
     748:	681b      	ldr	r3, [r3, #0]
     74a:	687a      	ldr	r2, [r7, #4]
     74c:	0011      	movs	r1, r2
     74e:	0018      	movs	r0, r3
     750:	4b0e      	ldr	r3, [pc, #56]	; (78c <DEBUG_WriteDouble+0x1d8>)
     752:	4798      	blx	r3
	debug_writeEndLine();
     754:	4b15      	ldr	r3, [pc, #84]	; (7ac <DEBUG_WriteDouble+0x1f8>)
     756:	4798      	blx	r3
     758:	e000      	b.n	75c <DEBUG_WriteDouble+0x1a8>
		return;
     75a:	46c0      	nop			; (mov r8, r8)
	
	#endif
}
     75c:	46bd      	mov	sp, r7
     75e:	b00a      	add	sp, #40	; 0x28
     760:	bdb0      	pop	{r4, r5, r7, pc}
     762:	46c0      	nop			; (mov r8, r8)
     764:	200006c0 	.word	0x200006c0
     768:	00003f75 	.word	0x00003f75
     76c:	00004059 	.word	0x00004059
     770:	00005c31 	.word	0x00005c31
     774:	0000559d 	.word	0x0000559d
     778:	0000509d 	.word	0x0000509d
     77c:	416312d0 	.word	0x416312d0
     780:	00000829 	.word	0x00000829
     784:	200006bc 	.word	0x200006bc
     788:	00005e6c 	.word	0x00005e6c
     78c:	00001e75 	.word	0x00001e75
     790:	00001ea9 	.word	0x00001ea9
     794:	00005e70 	.word	0x00005e70
     798:	40240000 	.word	0x40240000
     79c:	00005e74 	.word	0x00005e74
     7a0:	40590000 	.word	0x40590000
     7a4:	408f4000 	.word	0x408f4000
     7a8:	40c38800 	.word	0x40c38800
     7ac:	00000881 	.word	0x00000881

000007b0 <debug_init>:

#ifdef DEBUG

	static void debug_init(void)
	{
     7b0:	b580      	push	{r7, lr}
     7b2:	af00      	add	r7, sp, #0

		UART_TxSendChar(_uartLine, ' ');
     7b4:	4b14      	ldr	r3, [pc, #80]	; (808 <debug_init+0x58>)
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	2120      	movs	r1, #32
     7ba:	0018      	movs	r0, r3
     7bc:	4b13      	ldr	r3, [pc, #76]	; (80c <debug_init+0x5c>)
     7be:	4798      	blx	r3

		UART_TxSendString(_uartLine, " \r\n\r\n\r\n\r\n");
     7c0:	4b11      	ldr	r3, [pc, #68]	; (808 <debug_init+0x58>)
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	4a12      	ldr	r2, [pc, #72]	; (810 <debug_init+0x60>)
     7c6:	0011      	movs	r1, r2
     7c8:	0018      	movs	r0, r3
     7ca:	4b12      	ldr	r3, [pc, #72]	; (814 <debug_init+0x64>)
     7cc:	4798      	blx	r3

		UART_TxSendString(_uartLine, "**** Debugger Output is Initializing *** \r\n");
     7ce:	4b0e      	ldr	r3, [pc, #56]	; (808 <debug_init+0x58>)
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	4a11      	ldr	r2, [pc, #68]	; (818 <debug_init+0x68>)
     7d4:	0011      	movs	r1, r2
     7d6:	0018      	movs	r0, r3
     7d8:	4b0e      	ldr	r3, [pc, #56]	; (814 <debug_init+0x64>)
     7da:	4798      	blx	r3
		UART_TxSendString(_uartLine, " \r\n\r\n\r\n\r\n");
     7dc:	4b0a      	ldr	r3, [pc, #40]	; (808 <debug_init+0x58>)
     7de:	681b      	ldr	r3, [r3, #0]
     7e0:	4a0b      	ldr	r2, [pc, #44]	; (810 <debug_init+0x60>)
     7e2:	0011      	movs	r1, r2
     7e4:	0018      	movs	r0, r3
     7e6:	4b0b      	ldr	r3, [pc, #44]	; (814 <debug_init+0x64>)
     7e8:	4798      	blx	r3
		UART_TxSendString(_uartLine, "**** Debugger Output Has Been Initialized *** \r\n");
     7ea:	4b07      	ldr	r3, [pc, #28]	; (808 <debug_init+0x58>)
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	4a0b      	ldr	r2, [pc, #44]	; (81c <debug_init+0x6c>)
     7f0:	0011      	movs	r1, r2
     7f2:	0018      	movs	r0, r3
     7f4:	4b07      	ldr	r3, [pc, #28]	; (814 <debug_init+0x64>)
     7f6:	4798      	blx	r3
		debug_writeEndLine();
     7f8:	4b09      	ldr	r3, [pc, #36]	; (820 <debug_init+0x70>)
     7fa:	4798      	blx	r3
		_initilized = TRUE;
     7fc:	4b09      	ldr	r3, [pc, #36]	; (824 <debug_init+0x74>)
     7fe:	2201      	movs	r2, #1
     800:	701a      	strb	r2, [r3, #0]
	}
     802:	46c0      	nop			; (mov r8, r8)
     804:	46bd      	mov	sp, r7
     806:	bd80      	pop	{r7, pc}
     808:	200006bc 	.word	0x200006bc
     80c:	00001f11 	.word	0x00001f11
     810:	00005e78 	.word	0x00005e78
     814:	00001e75 	.word	0x00001e75
     818:	00005e84 	.word	0x00005e84
     81c:	00005eb0 	.word	0x00005eb0
     820:	00000881 	.word	0x00000881
     824:	200006c0 	.word	0x200006c0

00000828 <debug_writeNewLine>:

	static void debug_writeNewLine(void)
	{
     828:	b580      	push	{r7, lr}
     82a:	af00      	add	r7, sp, #0
		UART_TxSendString(_uartLine, "[");
     82c:	4b0e      	ldr	r3, [pc, #56]	; (868 <debug_writeNewLine+0x40>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	4a0e      	ldr	r2, [pc, #56]	; (86c <debug_writeNewLine+0x44>)
     832:	0011      	movs	r1, r2
     834:	0018      	movs	r0, r3
     836:	4b0e      	ldr	r3, [pc, #56]	; (870 <debug_writeNewLine+0x48>)
     838:	4798      	blx	r3
		UART_TxSendNumber(_uartLine, ++_debugCount);
     83a:	4b0b      	ldr	r3, [pc, #44]	; (868 <debug_writeNewLine+0x40>)
     83c:	6818      	ldr	r0, [r3, #0]
     83e:	4b0d      	ldr	r3, [pc, #52]	; (874 <debug_writeNewLine+0x4c>)
     840:	681b      	ldr	r3, [r3, #0]
     842:	1c5a      	adds	r2, r3, #1
     844:	4b0b      	ldr	r3, [pc, #44]	; (874 <debug_writeNewLine+0x4c>)
     846:	601a      	str	r2, [r3, #0]
     848:	4b0a      	ldr	r3, [pc, #40]	; (874 <debug_writeNewLine+0x4c>)
     84a:	681b      	ldr	r3, [r3, #0]
     84c:	0019      	movs	r1, r3
     84e:	4b0a      	ldr	r3, [pc, #40]	; (878 <debug_writeNewLine+0x50>)
     850:	4798      	blx	r3
		UART_TxSendString(_uartLine, "]  ");
     852:	4b05      	ldr	r3, [pc, #20]	; (868 <debug_writeNewLine+0x40>)
     854:	681b      	ldr	r3, [r3, #0]
     856:	4a09      	ldr	r2, [pc, #36]	; (87c <debug_writeNewLine+0x54>)
     858:	0011      	movs	r1, r2
     85a:	0018      	movs	r0, r3
     85c:	4b04      	ldr	r3, [pc, #16]	; (870 <debug_writeNewLine+0x48>)
     85e:	4798      	blx	r3
	}
     860:	46c0      	nop			; (mov r8, r8)
     862:	46bd      	mov	sp, r7
     864:	bd80      	pop	{r7, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	200006bc 	.word	0x200006bc
     86c:	00005ee4 	.word	0x00005ee4
     870:	00001e75 	.word	0x00001e75
     874:	200006c4 	.word	0x200006c4
     878:	00001ea9 	.word	0x00001ea9
     87c:	00005ee8 	.word	0x00005ee8

00000880 <debug_writeEndLine>:

	static void debug_writeEndLine(void)
	{
     880:	b580      	push	{r7, lr}
     882:	af00      	add	r7, sp, #0
		UART_TxSendString(_uartLine, "\r\n");
     884:	4b04      	ldr	r3, [pc, #16]	; (898 <debug_writeEndLine+0x18>)
     886:	681b      	ldr	r3, [r3, #0]
     888:	4a04      	ldr	r2, [pc, #16]	; (89c <debug_writeEndLine+0x1c>)
     88a:	0011      	movs	r1, r2
     88c:	0018      	movs	r0, r3
     88e:	4b04      	ldr	r3, [pc, #16]	; (8a0 <debug_writeEndLine+0x20>)
     890:	4798      	blx	r3
	}
     892:	46c0      	nop			; (mov r8, r8)
     894:	46bd      	mov	sp, r7
     896:	bd80      	pop	{r7, pc}
     898:	200006bc 	.word	0x200006bc
     89c:	00005eec 	.word	0x00005eec
     8a0:	00001e75 	.word	0x00001e75

000008a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     8a4:	b580      	push	{r7, lr}
     8a6:	b082      	sub	sp, #8
     8a8:	af00      	add	r7, sp, #0
     8aa:	0002      	movs	r2, r0
     8ac:	1dfb      	adds	r3, r7, #7
     8ae:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <NVIC_EnableIRQ+0x28>)
     8b2:	1dfa      	adds	r2, r7, #7
     8b4:	7812      	ldrb	r2, [r2, #0]
     8b6:	0011      	movs	r1, r2
     8b8:	221f      	movs	r2, #31
     8ba:	400a      	ands	r2, r1
     8bc:	2101      	movs	r1, #1
     8be:	4091      	lsls	r1, r2
     8c0:	000a      	movs	r2, r1
     8c2:	601a      	str	r2, [r3, #0]
}
     8c4:	46c0      	nop			; (mov r8, r8)
     8c6:	46bd      	mov	sp, r7
     8c8:	b002      	add	sp, #8
     8ca:	bd80      	pop	{r7, pc}
     8cc:	e000e100 	.word	0xe000e100

000008d0 <INPUT_Init>:
static volatile uint8_t _interruptFlag = FALSE;
//=========================================================================
// Implementations
//=========================================================================
void INPUT_Init(Input_t *newInput)
{
     8d0:	b590      	push	{r4, r7, lr}
     8d2:	b087      	sub	sp, #28
     8d4:	af02      	add	r7, sp, #8
     8d6:	6078      	str	r0, [r7, #4]
	Input_t *lastInput = _firstInput;
     8d8:	4b23      	ldr	r3, [pc, #140]	; (968 <INPUT_Init+0x98>)
     8da:	681b      	ldr	r3, [r3, #0]
     8dc:	60fb      	str	r3, [r7, #12]

	if(!lastInput)
     8de:	68fb      	ldr	r3, [r7, #12]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d106      	bne.n	8f2 <INPUT_Init+0x22>
		_firstInput = newInput;
     8e4:	4b20      	ldr	r3, [pc, #128]	; (968 <INPUT_Init+0x98>)
     8e6:	687a      	ldr	r2, [r7, #4]
     8e8:	601a      	str	r2, [r3, #0]
     8ea:	e009      	b.n	900 <INPUT_Init+0x30>
	else
	{
		while(lastInput->nextInput)
			lastInput = (Input_t*)lastInput->nextInput;
     8ec:	68fb      	ldr	r3, [r7, #12]
     8ee:	689b      	ldr	r3, [r3, #8]
     8f0:	60fb      	str	r3, [r7, #12]
		while(lastInput->nextInput)
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	689b      	ldr	r3, [r3, #8]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d1f8      	bne.n	8ec <INPUT_Init+0x1c>

		lastInput->nextInput = (uint8_t *)newInput;
     8fa:	68fb      	ldr	r3, [r7, #12]
     8fc:	687a      	ldr	r2, [r7, #4]
     8fe:	609a      	str	r2, [r3, #8]
	}

	newInput->nextInput = 0;
     900:	687b      	ldr	r3, [r7, #4]
     902:	2200      	movs	r2, #0
     904:	609a      	str	r2, [r3, #8]
	newInput->Initilized = TRUE;
     906:	687b      	ldr	r3, [r7, #4]
     908:	2201      	movs	r2, #1
     90a:	701a      	strb	r2, [r3, #0]

	//For unit testing
	if(newInput->Port == PORT_TEST)
     90c:	687b      	ldr	r3, [r7, #4]
     90e:	789b      	ldrb	r3, [r3, #2]
     910:	2bff      	cmp	r3, #255	; 0xff
     912:	d024      	beq.n	95e <INPUT_Init+0x8e>
		return;

	/*Setup Input*/
	MCU_PinSetup(newInput->Port, newInput->Pin, 0, 1, TRUE, 1);
     914:	687b      	ldr	r3, [r7, #4]
     916:	7898      	ldrb	r0, [r3, #2]
     918:	687b      	ldr	r3, [r7, #4]
     91a:	78d9      	ldrb	r1, [r3, #3]
     91c:	2301      	movs	r3, #1
     91e:	9301      	str	r3, [sp, #4]
     920:	2301      	movs	r3, #1
     922:	9300      	str	r3, [sp, #0]
     924:	2301      	movs	r3, #1
     926:	2200      	movs	r2, #0
     928:	4c10      	ldr	r4, [pc, #64]	; (96c <INPUT_Init+0x9c>)
     92a:	47a0      	blx	r4
	MCU_SetPmuxFunction(newInput->Port, newInput->Pin, 0); //PMUX 0 = PMUX function A (Interrupt Functions)
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	7898      	ldrb	r0, [r3, #2]
     930:	687b      	ldr	r3, [r7, #4]
     932:	78db      	ldrb	r3, [r3, #3]
     934:	2200      	movs	r2, #0
     936:	0019      	movs	r1, r3
     938:	4b0d      	ldr	r3, [pc, #52]	; (970 <INPUT_Init+0xa0>)
     93a:	4798      	blx	r3
	newInput->State = MCU_GetPinState(newInput->Port, newInput->Pin);
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	789a      	ldrb	r2, [r3, #2]
     940:	687b      	ldr	r3, [r7, #4]
     942:	78db      	ldrb	r3, [r3, #3]
     944:	0019      	movs	r1, r3
     946:	0010      	movs	r0, r2
     948:	4b0a      	ldr	r3, [pc, #40]	; (974 <INPUT_Init+0xa4>)
     94a:	4798      	blx	r3
     94c:	0003      	movs	r3, r0
     94e:	001a      	movs	r2, r3
     950:	687b      	ldr	r3, [r7, #4]
     952:	705a      	strb	r2, [r3, #1]

	input_initMcu(newInput);
     954:	687b      	ldr	r3, [r7, #4]
     956:	0018      	movs	r0, r3
     958:	4b07      	ldr	r3, [pc, #28]	; (978 <INPUT_Init+0xa8>)
     95a:	4798      	blx	r3
     95c:	e000      	b.n	960 <INPUT_Init+0x90>
		return;
     95e:	46c0      	nop			; (mov r8, r8)
}
     960:	46bd      	mov	sp, r7
     962:	b005      	add	sp, #20
     964:	bd90      	pop	{r4, r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	200006c8 	.word	0x200006c8
     96c:	000001d5 	.word	0x000001d5
     970:	00000445 	.word	0x00000445
     974:	00000405 	.word	0x00000405
     978:	000009a1 	.word	0x000009a1

0000097c <input_callCallback>:
	input->State = 3;
	_interruptFlag = TRUE;
}

void input_callCallback(Input_t *input)
{
     97c:	b580      	push	{r7, lr}
     97e:	b084      	sub	sp, #16
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
	inputFunction func = (inputFunction)input->CallBackFunc;
     984:	687b      	ldr	r3, [r7, #4]
     986:	685b      	ldr	r3, [r3, #4]
     988:	60fb      	str	r3, [r7, #12]
		
	//Call Callback FUnction
	if(func)
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	2b00      	cmp	r3, #0
     98e:	d003      	beq.n	998 <input_callCallback+0x1c>
		func(input);
     990:	687a      	ldr	r2, [r7, #4]
     992:	68fb      	ldr	r3, [r7, #12]
     994:	0010      	movs	r0, r2
     996:	4798      	blx	r3
}
     998:	46c0      	nop			; (mov r8, r8)
     99a:	46bd      	mov	sp, r7
     99c:	b004      	add	sp, #16
     99e:	bd80      	pop	{r7, pc}

000009a0 <input_initMcu>:
	}
	
#elif defined(MCU_SAML22)

	static void input_initMcu(Input_t *input)
	{
     9a0:	b590      	push	{r4, r7, lr}
     9a2:	b085      	sub	sp, #20
     9a4:	af00      	add	r7, sp, #0
     9a6:	6078      	str	r0, [r7, #4]
		//Enable CLK_EIC_APB
		MCLK->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     9a8:	4b39      	ldr	r3, [pc, #228]	; (a90 <input_initMcu+0xf0>)
     9aa:	4a39      	ldr	r2, [pc, #228]	; (a90 <input_initMcu+0xf0>)
     9ac:	6952      	ldr	r2, [r2, #20]
     9ae:	2180      	movs	r1, #128	; 0x80
     9b0:	00c9      	lsls	r1, r1, #3
     9b2:	430a      	orrs	r2, r1
     9b4:	615a      	str	r2, [r3, #20]
		
		//Enable clk to EIC Peripheral
		GCLK->PCHCTRL[EIC_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
     9b6:	4a37      	ldr	r2, [pc, #220]	; (a94 <input_initMcu+0xf4>)
     9b8:	238c      	movs	r3, #140	; 0x8c
     9ba:	2140      	movs	r1, #64	; 0x40
     9bc:	50d1      	str	r1, [r2, r3]

		uint8_t configId;
		uint8_t extInt = input->Pin % 16;
     9be:	687b      	ldr	r3, [r7, #4]
     9c0:	78da      	ldrb	r2, [r3, #3]
     9c2:	230e      	movs	r3, #14
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	210f      	movs	r1, #15
     9c8:	400a      	ands	r2, r1
     9ca:	701a      	strb	r2, [r3, #0]

		if(extInt < 8)
     9cc:	230e      	movs	r3, #14
     9ce:	18fb      	adds	r3, r7, r3
     9d0:	781b      	ldrb	r3, [r3, #0]
     9d2:	2b07      	cmp	r3, #7
     9d4:	d804      	bhi.n	9e0 <input_initMcu+0x40>
			configId = 0;
     9d6:	230f      	movs	r3, #15
     9d8:	18fb      	adds	r3, r7, r3
     9da:	2200      	movs	r2, #0
     9dc:	701a      	strb	r2, [r3, #0]
     9de:	e003      	b.n	9e8 <input_initMcu+0x48>
		else
			configId = 1;
     9e0:	230f      	movs	r3, #15
     9e2:	18fb      	adds	r3, r7, r3
     9e4:	2201      	movs	r2, #1
     9e6:	701a      	strb	r2, [r3, #0]
	
		uint8_t shift = (extInt % 8) * 4;
     9e8:	230e      	movs	r3, #14
     9ea:	18fb      	adds	r3, r7, r3
     9ec:	781b      	ldrb	r3, [r3, #0]
     9ee:	2207      	movs	r2, #7
     9f0:	4013      	ands	r3, r2
     9f2:	b2da      	uxtb	r2, r3
     9f4:	230d      	movs	r3, #13
     9f6:	18fb      	adds	r3, r7, r3
     9f8:	0092      	lsls	r2, r2, #2
     9fa:	701a      	strb	r2, [r3, #0]
		//Enable Filter
		EIC->CONFIG[configId].reg |= (8 << shift);
     9fc:	4826      	ldr	r0, [pc, #152]	; (a98 <input_initMcu+0xf8>)
     9fe:	230f      	movs	r3, #15
     a00:	18fb      	adds	r3, r7, r3
     a02:	7819      	ldrb	r1, [r3, #0]
     a04:	4a24      	ldr	r2, [pc, #144]	; (a98 <input_initMcu+0xf8>)
     a06:	230f      	movs	r3, #15
     a08:	18fb      	adds	r3, r7, r3
     a0a:	781b      	ldrb	r3, [r3, #0]
     a0c:	3306      	adds	r3, #6
     a0e:	009b      	lsls	r3, r3, #2
     a10:	18d3      	adds	r3, r2, r3
     a12:	3304      	adds	r3, #4
     a14:	681b      	ldr	r3, [r3, #0]
     a16:	220d      	movs	r2, #13
     a18:	18ba      	adds	r2, r7, r2
     a1a:	7812      	ldrb	r2, [r2, #0]
     a1c:	2408      	movs	r4, #8
     a1e:	4094      	lsls	r4, r2
     a20:	0022      	movs	r2, r4
     a22:	431a      	orrs	r2, r3
     a24:	1d8b      	adds	r3, r1, #6
     a26:	009b      	lsls	r3, r3, #2
     a28:	18c3      	adds	r3, r0, r3
     a2a:	3304      	adds	r3, #4
     a2c:	601a      	str	r2, [r3, #0]
		//Enable Rise and Fall Detect
		EIC->CONFIG[configId].reg |= (3 << shift);
     a2e:	481a      	ldr	r0, [pc, #104]	; (a98 <input_initMcu+0xf8>)
     a30:	230f      	movs	r3, #15
     a32:	18fb      	adds	r3, r7, r3
     a34:	7819      	ldrb	r1, [r3, #0]
     a36:	4a18      	ldr	r2, [pc, #96]	; (a98 <input_initMcu+0xf8>)
     a38:	230f      	movs	r3, #15
     a3a:	18fb      	adds	r3, r7, r3
     a3c:	781b      	ldrb	r3, [r3, #0]
     a3e:	3306      	adds	r3, #6
     a40:	009b      	lsls	r3, r3, #2
     a42:	18d3      	adds	r3, r2, r3
     a44:	3304      	adds	r3, #4
     a46:	681b      	ldr	r3, [r3, #0]
     a48:	220d      	movs	r2, #13
     a4a:	18ba      	adds	r2, r7, r2
     a4c:	7812      	ldrb	r2, [r2, #0]
     a4e:	2403      	movs	r4, #3
     a50:	4094      	lsls	r4, r2
     a52:	0022      	movs	r2, r4
     a54:	431a      	orrs	r2, r3
     a56:	1d8b      	adds	r3, r1, #6
     a58:	009b      	lsls	r3, r3, #2
     a5a:	18c3      	adds	r3, r0, r3
     a5c:	3304      	adds	r3, #4
     a5e:	601a      	str	r2, [r3, #0]
		//Enable Interrupt Pin
		EIC->INTENSET.reg |= (1 << extInt);
     a60:	4b0d      	ldr	r3, [pc, #52]	; (a98 <input_initMcu+0xf8>)
     a62:	4a0d      	ldr	r2, [pc, #52]	; (a98 <input_initMcu+0xf8>)
     a64:	6912      	ldr	r2, [r2, #16]
     a66:	210e      	movs	r1, #14
     a68:	1879      	adds	r1, r7, r1
     a6a:	7809      	ldrb	r1, [r1, #0]
     a6c:	2001      	movs	r0, #1
     a6e:	4088      	lsls	r0, r1
     a70:	0001      	movs	r1, r0
     a72:	430a      	orrs	r2, r1
     a74:	611a      	str	r2, [r3, #16]
		//Enable Interrupts
		EIC->CTRL_REG.bit.ENABLE = 1;
     a76:	4a08      	ldr	r2, [pc, #32]	; (a98 <input_initMcu+0xf8>)
     a78:	7813      	ldrb	r3, [r2, #0]
     a7a:	2102      	movs	r1, #2
     a7c:	430b      	orrs	r3, r1
     a7e:	7013      	strb	r3, [r2, #0]

		NVIC_EnableIRQ(EIC_IRQn);
     a80:	2003      	movs	r0, #3
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <input_initMcu+0xfc>)
     a84:	4798      	blx	r3
	}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	46bd      	mov	sp, r7
     a8a:	b005      	add	sp, #20
     a8c:	bd90      	pop	{r4, r7, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	40000800 	.word	0x40000800
     a94:	40001c00 	.word	0x40001c00
     a98:	40002800 	.word	0x40002800
     a9c:	000008a5 	.word	0x000008a5

00000aa0 <INPUT_TaskHandler>:

//=========================================================================
// TaskHandler
//=========================================================================
void INPUT_TaskHandler(void)
{
     aa0:	b590      	push	{r4, r7, lr}
     aa2:	b083      	sub	sp, #12
     aa4:	af00      	add	r7, sp, #0
	Input_t *input = _firstInput;
     aa6:	4b22      	ldr	r3, [pc, #136]	; (b30 <INPUT_TaskHandler+0x90>)
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	607b      	str	r3, [r7, #4]

	if(!_interruptFlag)
     aac:	4b21      	ldr	r3, [pc, #132]	; (b34 <INPUT_TaskHandler+0x94>)
     aae:	781b      	ldrb	r3, [r3, #0]
     ab0:	b2db      	uxtb	r3, r3
     ab2:	2b00      	cmp	r3, #0
     ab4:	d038      	beq.n	b28 <INPUT_TaskHandler+0x88>
		return;

	while(input)
     ab6:	e02b      	b.n	b10 <INPUT_TaskHandler+0x70>
	{
		//Port_Test is for unit testing
		if(input->Port == PORT_TEST)
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	789b      	ldrb	r3, [r3, #2]
     abc:	2bff      	cmp	r3, #255	; 0xff
     abe:	d10b      	bne.n	ad8 <INPUT_TaskHandler+0x38>
		{
			if(input->State == 3)
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	785b      	ldrb	r3, [r3, #1]
     ac4:	2b03      	cmp	r3, #3
     ac6:	d120      	bne.n	b0a <INPUT_TaskHandler+0x6a>
			{
				input->State = 0;
     ac8:	687b      	ldr	r3, [r7, #4]
     aca:	2200      	movs	r2, #0
     acc:	705a      	strb	r2, [r3, #1]
				input_callCallback(input);
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	0018      	movs	r0, r3
     ad2:	4b19      	ldr	r3, [pc, #100]	; (b38 <INPUT_TaskHandler+0x98>)
     ad4:	4798      	blx	r3
     ad6:	e018      	b.n	b0a <INPUT_TaskHandler+0x6a>
			}
		}
		else
		{
			uint8_t state = MCU_GetPinState(input->Port, input->Pin);
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	789a      	ldrb	r2, [r3, #2]
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	78db      	ldrb	r3, [r3, #3]
     ae0:	1cfc      	adds	r4, r7, #3
     ae2:	0019      	movs	r1, r3
     ae4:	0010      	movs	r0, r2
     ae6:	4b15      	ldr	r3, [pc, #84]	; (b3c <INPUT_TaskHandler+0x9c>)
     ae8:	4798      	blx	r3
     aea:	0003      	movs	r3, r0
     aec:	7023      	strb	r3, [r4, #0]

			//Input state 3 is for unit testing
			if(state != input->State)
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	785b      	ldrb	r3, [r3, #1]
     af2:	1cfa      	adds	r2, r7, #3
     af4:	7812      	ldrb	r2, [r2, #0]
     af6:	429a      	cmp	r2, r3
     af8:	d007      	beq.n	b0a <INPUT_TaskHandler+0x6a>
			{
				input->State = state;
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	1cfa      	adds	r2, r7, #3
     afe:	7812      	ldrb	r2, [r2, #0]
     b00:	705a      	strb	r2, [r3, #1]
				input_callCallback(input);
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	0018      	movs	r0, r3
     b06:	4b0c      	ldr	r3, [pc, #48]	; (b38 <INPUT_TaskHandler+0x98>)
     b08:	4798      	blx	r3
			}
		}

		input = (Input_t*)input->nextInput;
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	689b      	ldr	r3, [r3, #8]
     b0e:	607b      	str	r3, [r7, #4]
	while(input)
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	2b00      	cmp	r3, #0
     b14:	d1d0      	bne.n	ab8 <INPUT_TaskHandler+0x18>
	}

	_interruptFlag = FALSE;
     b16:	4b07      	ldr	r3, [pc, #28]	; (b34 <INPUT_TaskHandler+0x94>)
     b18:	2200      	movs	r2, #0
     b1a:	701a      	strb	r2, [r3, #0]
	EIC->CTRL_REG.bit.ENABLE = TRUE;
     b1c:	4a08      	ldr	r2, [pc, #32]	; (b40 <INPUT_TaskHandler+0xa0>)
     b1e:	7813      	ldrb	r3, [r2, #0]
     b20:	2102      	movs	r1, #2
     b22:	430b      	orrs	r3, r1
     b24:	7013      	strb	r3, [r2, #0]
     b26:	e000      	b.n	b2a <INPUT_TaskHandler+0x8a>
		return;
     b28:	46c0      	nop			; (mov r8, r8)
}
     b2a:	46bd      	mov	sp, r7
     b2c:	b003      	add	sp, #12
     b2e:	bd90      	pop	{r4, r7, pc}
     b30:	200006c8 	.word	0x200006c8
     b34:	200006cc 	.word	0x200006cc
     b38:	0000097d 	.word	0x0000097d
     b3c:	00000405 	.word	0x00000405
     b40:	40002800 	.word	0x40002800

00000b44 <EIC_Handler>:
// Interrupt
//=========================================================================

/** SAM D Specific **/
void EIC_Handler(void)
{
     b44:	b580      	push	{r7, lr}
     b46:	af00      	add	r7, sp, #0
	//Disable Interrupt
	EIC->CTRL_REG.bit.ENABLE = FALSE;
     b48:	4a06      	ldr	r2, [pc, #24]	; (b64 <EIC_Handler+0x20>)
     b4a:	7813      	ldrb	r3, [r2, #0]
     b4c:	2102      	movs	r1, #2
     b4e:	438b      	bics	r3, r1
     b50:	7013      	strb	r3, [r2, #0]

	//Reset Interrupt Flags
	EIC->INTFLAG.reg = 0xFFFF;
     b52:	4b04      	ldr	r3, [pc, #16]	; (b64 <EIC_Handler+0x20>)
     b54:	4a04      	ldr	r2, [pc, #16]	; (b68 <EIC_Handler+0x24>)
     b56:	615a      	str	r2, [r3, #20]

	_interruptFlag = TRUE;
     b58:	4b04      	ldr	r3, [pc, #16]	; (b6c <EIC_Handler+0x28>)
     b5a:	2201      	movs	r2, #1
     b5c:	701a      	strb	r2, [r3, #0]
}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	46bd      	mov	sp, r7
     b62:	bd80      	pop	{r7, pc}
     b64:	40002800 	.word	0x40002800
     b68:	0000ffff 	.word	0x0000ffff
     b6c:	200006cc 	.word	0x200006cc

00000b70 <NVIC_EnableIRQ>:
{
     b70:	b580      	push	{r7, lr}
     b72:	b082      	sub	sp, #8
     b74:	af00      	add	r7, sp, #0
     b76:	0002      	movs	r2, r0
     b78:	1dfb      	adds	r3, r7, #7
     b7a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <NVIC_EnableIRQ+0x28>)
     b7e:	1dfa      	adds	r2, r7, #7
     b80:	7812      	ldrb	r2, [r2, #0]
     b82:	0011      	movs	r1, r2
     b84:	221f      	movs	r2, #31
     b86:	400a      	ands	r2, r1
     b88:	2101      	movs	r1, #1
     b8a:	4091      	lsls	r1, r2
     b8c:	000a      	movs	r2, r1
     b8e:	601a      	str	r2, [r3, #0]
}
     b90:	46c0      	nop			; (mov r8, r8)
     b92:	46bd      	mov	sp, r7
     b94:	b002      	add	sp, #8
     b96:	bd80      	pop	{r7, pc}
     b98:	e000e100 	.word	0xe000e100

00000b9c <SERCOM_InitUartRxPort>:

//=========================================================================
// Implementations
//=========================================================================
void SERCOM_InitUartRxPort(uint8_t sercomPort, FifoBuffer_t *rxBuffer)
{
     b9c:	b580      	push	{r7, lr}
     b9e:	b082      	sub	sp, #8
     ba0:	af00      	add	r7, sp, #0
     ba2:	0002      	movs	r2, r0
     ba4:	6039      	str	r1, [r7, #0]
     ba6:	1dfb      	adds	r3, r7, #7
     ba8:	701a      	strb	r2, [r3, #0]
	if(sercomPort >= SERCOMS_COUNT)
     baa:	1dfb      	adds	r3, r7, #7
     bac:	781b      	ldrb	r3, [r3, #0]
     bae:	2b05      	cmp	r3, #5
     bb0:	d84e      	bhi.n	c50 <SERCOM_InitUartRxPort+0xb4>
		return;

	if(!_initilized)
     bb2:	4b29      	ldr	r3, [pc, #164]	; (c58 <SERCOM_InitUartRxPort+0xbc>)
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d101      	bne.n	bbe <SERCOM_InitUartRxPort+0x22>
		sercom_initMcu();
     bba:	4b28      	ldr	r3, [pc, #160]	; (c5c <SERCOM_InitUartRxPort+0xc0>)
     bbc:	4798      	blx	r3

	_sercomPorts[sercomPort].SercomType =	SERCOM_UART;
     bbe:	1dfb      	adds	r3, r7, #7
     bc0:	781a      	ldrb	r2, [r3, #0]
     bc2:	4927      	ldr	r1, [pc, #156]	; (c60 <SERCOM_InitUartRxPort+0xc4>)
     bc4:	0013      	movs	r3, r2
     bc6:	00db      	lsls	r3, r3, #3
     bc8:	1a9b      	subs	r3, r3, r2
     bca:	009b      	lsls	r3, r3, #2
     bcc:	2201      	movs	r2, #1
     bce:	545a      	strb	r2, [r3, r1]
	_sercomPorts[sercomPort].RxBuffer =		(uint8_t*)rxBuffer;
     bd0:	1dfb      	adds	r3, r7, #7
     bd2:	781a      	ldrb	r2, [r3, #0]
     bd4:	4922      	ldr	r1, [pc, #136]	; (c60 <SERCOM_InitUartRxPort+0xc4>)
     bd6:	0013      	movs	r3, r2
     bd8:	00db      	lsls	r3, r3, #3
     bda:	1a9b      	subs	r3, r3, r2
     bdc:	009b      	lsls	r3, r3, #2
     bde:	18cb      	adds	r3, r1, r3
     be0:	3310      	adds	r3, #16
     be2:	683a      	ldr	r2, [r7, #0]
     be4:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].RxIndex =		NULL;
     be6:	1dfb      	adds	r3, r7, #7
     be8:	781a      	ldrb	r2, [r3, #0]
     bea:	491d      	ldr	r1, [pc, #116]	; (c60 <SERCOM_InitUartRxPort+0xc4>)
     bec:	0013      	movs	r3, r2
     bee:	00db      	lsls	r3, r3, #3
     bf0:	1a9b      	subs	r3, r3, r2
     bf2:	009b      	lsls	r3, r3, #2
     bf4:	18cb      	adds	r3, r1, r3
     bf6:	3314      	adds	r3, #20
     bf8:	2200      	movs	r2, #0
     bfa:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].TxBuffer =		NULL;
     bfc:	1dfb      	adds	r3, r7, #7
     bfe:	781a      	ldrb	r2, [r3, #0]
     c00:	4917      	ldr	r1, [pc, #92]	; (c60 <SERCOM_InitUartRxPort+0xc4>)
     c02:	0013      	movs	r3, r2
     c04:	00db      	lsls	r3, r3, #3
     c06:	1a9b      	subs	r3, r3, r2
     c08:	009b      	lsls	r3, r3, #2
     c0a:	18cb      	adds	r3, r1, r3
     c0c:	3304      	adds	r3, #4
     c0e:	2200      	movs	r2, #0
     c10:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].TxIndex =		NULL;
     c12:	1dfb      	adds	r3, r7, #7
     c14:	781a      	ldrb	r2, [r3, #0]
     c16:	4912      	ldr	r1, [pc, #72]	; (c60 <SERCOM_InitUartRxPort+0xc4>)
     c18:	0013      	movs	r3, r2
     c1a:	00db      	lsls	r3, r3, #3
     c1c:	1a9b      	subs	r3, r3, r2
     c1e:	009b      	lsls	r3, r3, #2
     c20:	18cb      	adds	r3, r1, r3
     c22:	3308      	adds	r3, #8
     c24:	2200      	movs	r2, #0
     c26:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].TxSize =		NULL;
     c28:	1dfb      	adds	r3, r7, #7
     c2a:	781a      	ldrb	r2, [r3, #0]
     c2c:	490c      	ldr	r1, [pc, #48]	; (c60 <SERCOM_InitUartRxPort+0xc4>)
     c2e:	0013      	movs	r3, r2
     c30:	00db      	lsls	r3, r3, #3
     c32:	1a9b      	subs	r3, r3, r2
     c34:	009b      	lsls	r3, r3, #2
     c36:	18cb      	adds	r3, r1, r3
     c38:	330c      	adds	r3, #12
     c3a:	2200      	movs	r2, #0
     c3c:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(sercomPort + 7);
     c3e:	1dfb      	adds	r3, r7, #7
     c40:	781b      	ldrb	r3, [r3, #0]
     c42:	3307      	adds	r3, #7
     c44:	b2db      	uxtb	r3, r3
     c46:	b25b      	sxtb	r3, r3
     c48:	0018      	movs	r0, r3
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <SERCOM_InitUartRxPort+0xc8>)
     c4c:	4798      	blx	r3
     c4e:	e000      	b.n	c52 <SERCOM_InitUartRxPort+0xb6>
		return;
     c50:	46c0      	nop			; (mov r8, r8)
}
     c52:	46bd      	mov	sp, r7
     c54:	b002      	add	sp, #8
     c56:	bd80      	pop	{r7, pc}
     c58:	200006d0 	.word	0x200006d0
     c5c:	00000dad 	.word	0x00000dad
     c60:	200006d4 	.word	0x200006d4
     c64:	00000b71 	.word	0x00000b71

00000c68 <SERCOM_InitSpiPort>:

void SERCOM_InitSpiPort(uint8_t sercomPort, uint8_t *rxBuffer, uint16_t *rxIndex, uint8_t *txBuffer, uint16_t *txIndex, uint16_t *txSize)
{
     c68:	b580      	push	{r7, lr}
     c6a:	b084      	sub	sp, #16
     c6c:	af00      	add	r7, sp, #0
     c6e:	60b9      	str	r1, [r7, #8]
     c70:	607a      	str	r2, [r7, #4]
     c72:	603b      	str	r3, [r7, #0]
     c74:	230f      	movs	r3, #15
     c76:	18fb      	adds	r3, r7, r3
     c78:	1c02      	adds	r2, r0, #0
     c7a:	701a      	strb	r2, [r3, #0]
	if(sercomPort >= SERCOMS_COUNT)
     c7c:	230f      	movs	r3, #15
     c7e:	18fb      	adds	r3, r7, r3
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	2b05      	cmp	r3, #5
     c84:	d861      	bhi.n	d4a <SERCOM_InitSpiPort+0xe2>
		return;

	if(!_initilized)
     c86:	4b33      	ldr	r3, [pc, #204]	; (d54 <SERCOM_InitSpiPort+0xec>)
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d101      	bne.n	c92 <SERCOM_InitSpiPort+0x2a>
		sercom_initMcu();
     c8e:	4b32      	ldr	r3, [pc, #200]	; (d58 <SERCOM_InitSpiPort+0xf0>)
     c90:	4798      	blx	r3

	_sercomPorts[sercomPort].SercomType =	SERCOM_SPI;
     c92:	230f      	movs	r3, #15
     c94:	18fb      	adds	r3, r7, r3
     c96:	781a      	ldrb	r2, [r3, #0]
     c98:	4930      	ldr	r1, [pc, #192]	; (d5c <SERCOM_InitSpiPort+0xf4>)
     c9a:	0013      	movs	r3, r2
     c9c:	00db      	lsls	r3, r3, #3
     c9e:	1a9b      	subs	r3, r3, r2
     ca0:	009b      	lsls	r3, r3, #2
     ca2:	2202      	movs	r2, #2
     ca4:	545a      	strb	r2, [r3, r1]
	_sercomPorts[sercomPort].RxBuffer =		rxBuffer;
     ca6:	230f      	movs	r3, #15
     ca8:	18fb      	adds	r3, r7, r3
     caa:	781a      	ldrb	r2, [r3, #0]
     cac:	492b      	ldr	r1, [pc, #172]	; (d5c <SERCOM_InitSpiPort+0xf4>)
     cae:	0013      	movs	r3, r2
     cb0:	00db      	lsls	r3, r3, #3
     cb2:	1a9b      	subs	r3, r3, r2
     cb4:	009b      	lsls	r3, r3, #2
     cb6:	18cb      	adds	r3, r1, r3
     cb8:	3310      	adds	r3, #16
     cba:	68ba      	ldr	r2, [r7, #8]
     cbc:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].RxIndex =		rxIndex;
     cbe:	230f      	movs	r3, #15
     cc0:	18fb      	adds	r3, r7, r3
     cc2:	781a      	ldrb	r2, [r3, #0]
     cc4:	4925      	ldr	r1, [pc, #148]	; (d5c <SERCOM_InitSpiPort+0xf4>)
     cc6:	0013      	movs	r3, r2
     cc8:	00db      	lsls	r3, r3, #3
     cca:	1a9b      	subs	r3, r3, r2
     ccc:	009b      	lsls	r3, r3, #2
     cce:	18cb      	adds	r3, r1, r3
     cd0:	3314      	adds	r3, #20
     cd2:	687a      	ldr	r2, [r7, #4]
     cd4:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].TxBuffer =		txBuffer;
     cd6:	230f      	movs	r3, #15
     cd8:	18fb      	adds	r3, r7, r3
     cda:	781a      	ldrb	r2, [r3, #0]
     cdc:	491f      	ldr	r1, [pc, #124]	; (d5c <SERCOM_InitSpiPort+0xf4>)
     cde:	0013      	movs	r3, r2
     ce0:	00db      	lsls	r3, r3, #3
     ce2:	1a9b      	subs	r3, r3, r2
     ce4:	009b      	lsls	r3, r3, #2
     ce6:	18cb      	adds	r3, r1, r3
     ce8:	3304      	adds	r3, #4
     cea:	683a      	ldr	r2, [r7, #0]
     cec:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].TxIndex =		txIndex;
     cee:	230f      	movs	r3, #15
     cf0:	18fb      	adds	r3, r7, r3
     cf2:	781a      	ldrb	r2, [r3, #0]
     cf4:	4919      	ldr	r1, [pc, #100]	; (d5c <SERCOM_InitSpiPort+0xf4>)
     cf6:	0013      	movs	r3, r2
     cf8:	00db      	lsls	r3, r3, #3
     cfa:	1a9b      	subs	r3, r3, r2
     cfc:	009b      	lsls	r3, r3, #2
     cfe:	18cb      	adds	r3, r1, r3
     d00:	3308      	adds	r3, #8
     d02:	69ba      	ldr	r2, [r7, #24]
     d04:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].TxSize =		txSize;
     d06:	230f      	movs	r3, #15
     d08:	18fb      	adds	r3, r7, r3
     d0a:	781a      	ldrb	r2, [r3, #0]
     d0c:	4913      	ldr	r1, [pc, #76]	; (d5c <SERCOM_InitSpiPort+0xf4>)
     d0e:	0013      	movs	r3, r2
     d10:	00db      	lsls	r3, r3, #3
     d12:	1a9b      	subs	r3, r3, r2
     d14:	009b      	lsls	r3, r3, #2
     d16:	18cb      	adds	r3, r1, r3
     d18:	330c      	adds	r3, #12
     d1a:	69fa      	ldr	r2, [r7, #28]
     d1c:	601a      	str	r2, [r3, #0]
	_sercomPorts[sercomPort].lock =			FALSE;
     d1e:	230f      	movs	r3, #15
     d20:	18fb      	adds	r3, r7, r3
     d22:	781a      	ldrb	r2, [r3, #0]
     d24:	490d      	ldr	r1, [pc, #52]	; (d5c <SERCOM_InitSpiPort+0xf4>)
     d26:	0013      	movs	r3, r2
     d28:	00db      	lsls	r3, r3, #3
     d2a:	1a9b      	subs	r3, r3, r2
     d2c:	009b      	lsls	r3, r3, #2
     d2e:	18cb      	adds	r3, r1, r3
     d30:	3319      	adds	r3, #25
     d32:	2200      	movs	r2, #0
     d34:	701a      	strb	r2, [r3, #0]

	#ifdef MCU_SAMD20
		NVIC_EnableIRQ(sercomPort + 7); //+7 for D20 //+9 for SAML22
	#else 
		NVIC_EnableIRQ(sercomPort + 9); //+7 for D20 //+9 for SAML22
     d36:	230f      	movs	r3, #15
     d38:	18fb      	adds	r3, r7, r3
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	3309      	adds	r3, #9
     d3e:	b2db      	uxtb	r3, r3
     d40:	b25b      	sxtb	r3, r3
     d42:	0018      	movs	r0, r3
     d44:	4b06      	ldr	r3, [pc, #24]	; (d60 <SERCOM_InitSpiPort+0xf8>)
     d46:	4798      	blx	r3
     d48:	e000      	b.n	d4c <SERCOM_InitSpiPort+0xe4>
		return;
     d4a:	46c0      	nop			; (mov r8, r8)
	#endif
}
     d4c:	46bd      	mov	sp, r7
     d4e:	b004      	add	sp, #16
     d50:	bd80      	pop	{r7, pc}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	200006d0 	.word	0x200006d0
     d58:	00000dad 	.word	0x00000dad
     d5c:	200006d4 	.word	0x200006d4
     d60:	00000b71 	.word	0x00000b71

00000d64 <SEROM_GetUsartPort>:

	NVIC_EnableIRQ(sercomPort + 7);
}

SercomUsart *SEROM_GetUsartPort(uint8_t sercomPort)
{
     d64:	b580      	push	{r7, lr}
     d66:	b082      	sub	sp, #8
     d68:	af00      	add	r7, sp, #0
     d6a:	0002      	movs	r2, r0
     d6c:	1dfb      	adds	r3, r7, #7
     d6e:	701a      	strb	r2, [r3, #0]
	static Sercom *_serialPorts[SERCOMS_COUNT] = SERCOMS_LIST;

	return &(_serialPorts[sercomPort]->USART);
     d70:	1dfb      	adds	r3, r7, #7
     d72:	781a      	ldrb	r2, [r3, #0]
     d74:	4b03      	ldr	r3, [pc, #12]	; (d84 <SEROM_GetUsartPort+0x20>)
     d76:	0092      	lsls	r2, r2, #2
     d78:	58d3      	ldr	r3, [r2, r3]
}
     d7a:	0018      	movs	r0, r3
     d7c:	46bd      	mov	sp, r7
     d7e:	b002      	add	sp, #8
     d80:	bd80      	pop	{r7, pc}
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	20000000 	.word	0x20000000

00000d88 <SEROM_GetSpiPort>:

SercomSpi *SEROM_GetSpiPort(uint8_t sercomPort)
{
     d88:	b580      	push	{r7, lr}
     d8a:	b082      	sub	sp, #8
     d8c:	af00      	add	r7, sp, #0
     d8e:	0002      	movs	r2, r0
     d90:	1dfb      	adds	r3, r7, #7
     d92:	701a      	strb	r2, [r3, #0]
	static Sercom *_serialPorts[SERCOMS_COUNT] = SERCOMS_LIST;

	return &(_serialPorts[sercomPort]->SPI);
     d94:	1dfb      	adds	r3, r7, #7
     d96:	781a      	ldrb	r2, [r3, #0]
     d98:	4b03      	ldr	r3, [pc, #12]	; (da8 <SEROM_GetSpiPort+0x20>)
     d9a:	0092      	lsls	r2, r2, #2
     d9c:	58d3      	ldr	r3, [r2, r3]
}
     d9e:	0018      	movs	r0, r3
     da0:	46bd      	mov	sp, r7
     da2:	b002      	add	sp, #8
     da4:	bd80      	pop	{r7, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	20000018 	.word	0x20000018

00000dac <sercom_initMcu>:

	return &(_serialPorts[sercomPort]->I2CM);
}

static void sercom_initMcu(void)
{
     dac:	b580      	push	{r7, lr}
     dae:	b082      	sub	sp, #8
     db0:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i < SERCOMS_COUNT; i++)
     db2:	1dbb      	adds	r3, r7, #6
     db4:	2200      	movs	r2, #0
     db6:	801a      	strh	r2, [r3, #0]
     db8:	e00d      	b.n	dd6 <sercom_initMcu+0x2a>
		_sercomPorts[i].SercomType = SERCOM_UNUSED;
     dba:	1dbb      	adds	r3, r7, #6
     dbc:	881a      	ldrh	r2, [r3, #0]
     dbe:	490b      	ldr	r1, [pc, #44]	; (dec <sercom_initMcu+0x40>)
     dc0:	0013      	movs	r3, r2
     dc2:	00db      	lsls	r3, r3, #3
     dc4:	1a9b      	subs	r3, r3, r2
     dc6:	009b      	lsls	r3, r3, #2
     dc8:	2200      	movs	r2, #0
     dca:	545a      	strb	r2, [r3, r1]
	for(uint16_t i = 0; i < SERCOMS_COUNT; i++)
     dcc:	1dbb      	adds	r3, r7, #6
     dce:	881a      	ldrh	r2, [r3, #0]
     dd0:	1dbb      	adds	r3, r7, #6
     dd2:	3201      	adds	r2, #1
     dd4:	801a      	strh	r2, [r3, #0]
     dd6:	1dbb      	adds	r3, r7, #6
     dd8:	881b      	ldrh	r3, [r3, #0]
     dda:	2b05      	cmp	r3, #5
     ddc:	d9ed      	bls.n	dba <sercom_initMcu+0xe>

	_initilized = TRUE;
     dde:	4b04      	ldr	r3, [pc, #16]	; (df0 <sercom_initMcu+0x44>)
     de0:	2201      	movs	r2, #1
     de2:	701a      	strb	r2, [r3, #0]
}
     de4:	46c0      	nop			; (mov r8, r8)
     de6:	46bd      	mov	sp, r7
     de8:	b002      	add	sp, #8
     dea:	bd80      	pop	{r7, pc}
     dec:	200006d4 	.word	0x200006d4
     df0:	200006d0 	.word	0x200006d0

00000df4 <SERCOM0_Handler>:


#if (SERCOMS_COUNT >= 1)
	
	void SERCOM0_Handler()
	{
     df4:	b580      	push	{r7, lr}
     df6:	b086      	sub	sp, #24
     df8:	af00      	add	r7, sp, #0
		uint32_t flags;
		uint8_t byte;
		SercomPort_t *port = &_sercomPorts[0];
     dfa:	4b50      	ldr	r3, [pc, #320]	; (f3c <SERCOM0_Handler+0x148>)
     dfc:	617b      	str	r3, [r7, #20]

		switch(port->SercomType)
     dfe:	697b      	ldr	r3, [r7, #20]
     e00:	781b      	ldrb	r3, [r3, #0]
     e02:	2b01      	cmp	r3, #1
     e04:	d004      	beq.n	e10 <SERCOM0_Handler+0x1c>
     e06:	dc00      	bgt.n	e0a <SERCOM0_Handler+0x16>
     e08:	e08e      	b.n	f28 <SERCOM0_Handler+0x134>
     e0a:	2b02      	cmp	r3, #2
     e0c:	d03b      	beq.n	e86 <SERCOM0_Handler+0x92>
					*port->RxIndex += 1;
				}
			}break;
			
			case SERCOM_I2C :
			break;
     e0e:	e090      	b.n	f32 <SERCOM0_Handler+0x13e>
				flags = SERCOM0->USART.INTFLAG.reg;
     e10:	4b4b      	ldr	r3, [pc, #300]	; (f40 <SERCOM0_Handler+0x14c>)
     e12:	7e1b      	ldrb	r3, [r3, #24]
     e14:	b2db      	uxtb	r3, r3
     e16:	613b      	str	r3, [r7, #16]
				if(flags & SERCOM_USART_INTFLAG_RXC)
     e18:	693b      	ldr	r3, [r7, #16]
     e1a:	2204      	movs	r2, #4
     e1c:	4013      	ands	r3, r2
     e1e:	d100      	bne.n	e22 <SERCOM0_Handler+0x2e>
     e20:	e084      	b.n	f2c <SERCOM0_Handler+0x138>
					byte = SERCOM0->USART.DATA.reg;
     e22:	4b47      	ldr	r3, [pc, #284]	; (f40 <SERCOM0_Handler+0x14c>)
     e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     e26:	b29a      	uxth	r2, r3
     e28:	230f      	movs	r3, #15
     e2a:	18fb      	adds	r3, r7, r3
     e2c:	701a      	strb	r2, [r3, #0]
					FIFO_WriteByte((FifoBuffer_t*)port->RxBuffer, byte);
     e2e:	697b      	ldr	r3, [r7, #20]
     e30:	691b      	ldr	r3, [r3, #16]
     e32:	60bb      	str	r3, [r7, #8]
     e34:	1dfb      	adds	r3, r7, #7
     e36:	220f      	movs	r2, #15
     e38:	18ba      	adds	r2, r7, r2
     e3a:	7812      	ldrb	r2, [r2, #0]
     e3c:	701a      	strb	r2, [r3, #0]

inline __attribute__((always_inline)) void FIFO_WriteByte(FifoBuffer_t *fifo, uint8_t data)
{

	//Check that space is left
	if(fifo->state == BUFFER_FULL)
     e3e:	68bb      	ldr	r3, [r7, #8]
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	2b02      	cmp	r3, #2
     e44:	d100      	bne.n	e48 <SERCOM0_Handler+0x54>
     e46:	e071      	b.n	f2c <SERCOM0_Handler+0x138>
		return;

	fifo->dataPointer[fifo->dataHead++] = data;
     e48:	68bb      	ldr	r3, [r7, #8]
     e4a:	689a      	ldr	r2, [r3, #8]
     e4c:	68bb      	ldr	r3, [r7, #8]
     e4e:	889b      	ldrh	r3, [r3, #4]
     e50:	1c59      	adds	r1, r3, #1
     e52:	b288      	uxth	r0, r1
     e54:	68b9      	ldr	r1, [r7, #8]
     e56:	8088      	strh	r0, [r1, #4]
     e58:	18d3      	adds	r3, r2, r3
     e5a:	1dfa      	adds	r2, r7, #7
     e5c:	7812      	ldrb	r2, [r2, #0]
     e5e:	701a      	strb	r2, [r3, #0]

	if(fifo->dataHead >= fifo->dataSize)
     e60:	68bb      	ldr	r3, [r7, #8]
     e62:	889a      	ldrh	r2, [r3, #4]
     e64:	68bb      	ldr	r3, [r7, #8]
     e66:	885b      	ldrh	r3, [r3, #2]
     e68:	429a      	cmp	r2, r3
     e6a:	d302      	bcc.n	e72 <SERCOM0_Handler+0x7e>
		fifo->dataHead = 0;
     e6c:	68bb      	ldr	r3, [r7, #8]
     e6e:	2200      	movs	r2, #0
     e70:	809a      	strh	r2, [r3, #4]

	if(fifo->dataHead == fifo->dataTail)
     e72:	68bb      	ldr	r3, [r7, #8]
     e74:	889a      	ldrh	r2, [r3, #4]
     e76:	68bb      	ldr	r3, [r7, #8]
     e78:	88db      	ldrh	r3, [r3, #6]
     e7a:	429a      	cmp	r2, r3
     e7c:	d156      	bne.n	f2c <SERCOM0_Handler+0x138>
		fifo->state = BUFFER_FULL;
     e7e:	68bb      	ldr	r3, [r7, #8]
     e80:	2202      	movs	r2, #2
     e82:	701a      	strb	r2, [r3, #0]
			}break;
     e84:	e052      	b.n	f2c <SERCOM0_Handler+0x138>
				flags = SERCOM0->SPI.INTFLAG.reg;
     e86:	4b2e      	ldr	r3, [pc, #184]	; (f40 <SERCOM0_Handler+0x14c>)
     e88:	7e1b      	ldrb	r3, [r3, #24]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	613b      	str	r3, [r7, #16]
					SERCOM_CS_MOD
     e8e:	693b      	ldr	r3, [r7, #16]
     e90:	2202      	movs	r2, #2
     e92:	4013      	ands	r3, r2
     e94:	d00b      	beq.n	eae <SERCOM0_Handler+0xba>
     e96:	697b      	ldr	r3, [r7, #20]
     e98:	689b      	ldr	r3, [r3, #8]
     e9a:	881a      	ldrh	r2, [r3, #0]
     e9c:	697b      	ldr	r3, [r7, #20]
     e9e:	68db      	ldr	r3, [r3, #12]
     ea0:	881b      	ldrh	r3, [r3, #0]
     ea2:	429a      	cmp	r2, r3
     ea4:	d103      	bne.n	eae <SERCOM0_Handler+0xba>
     ea6:	4a27      	ldr	r2, [pc, #156]	; (f44 <SERCOM0_Handler+0x150>)
     ea8:	2398      	movs	r3, #152	; 0x98
     eaa:	2110      	movs	r1, #16
     eac:	50d1      	str	r1, [r2, r3]
				if(flags & SERCOM_SPI_INTFLAG_DRE) //Master Tx Send
     eae:	693b      	ldr	r3, [r7, #16]
     eb0:	2201      	movs	r2, #1
     eb2:	4013      	ands	r3, r2
     eb4:	d01c      	beq.n	ef0 <SERCOM0_Handler+0xfc>
					if(*port->TxIndex < *port->TxSize)
     eb6:	697b      	ldr	r3, [r7, #20]
     eb8:	689b      	ldr	r3, [r3, #8]
     eba:	881a      	ldrh	r2, [r3, #0]
     ebc:	697b      	ldr	r3, [r7, #20]
     ebe:	68db      	ldr	r3, [r3, #12]
     ec0:	881b      	ldrh	r3, [r3, #0]
     ec2:	429a      	cmp	r2, r3
     ec4:	d211      	bcs.n	eea <SERCOM0_Handler+0xf6>
						SERCOM0->SPI.DATA.reg = port->TxBuffer[ *port->TxIndex ];
     ec6:	4a1e      	ldr	r2, [pc, #120]	; (f40 <SERCOM0_Handler+0x14c>)
     ec8:	697b      	ldr	r3, [r7, #20]
     eca:	6859      	ldr	r1, [r3, #4]
     ecc:	697b      	ldr	r3, [r7, #20]
     ece:	689b      	ldr	r3, [r3, #8]
     ed0:	881b      	ldrh	r3, [r3, #0]
     ed2:	18cb      	adds	r3, r1, r3
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	6293      	str	r3, [r2, #40]	; 0x28
						*port->TxIndex += 1;
     ed8:	697b      	ldr	r3, [r7, #20]
     eda:	689a      	ldr	r2, [r3, #8]
     edc:	697b      	ldr	r3, [r7, #20]
     ede:	689b      	ldr	r3, [r3, #8]
     ee0:	881b      	ldrh	r3, [r3, #0]
     ee2:	3301      	adds	r3, #1
     ee4:	b29b      	uxth	r3, r3
     ee6:	8013      	strh	r3, [r2, #0]
     ee8:	e002      	b.n	ef0 <SERCOM0_Handler+0xfc>
					SERCOM0->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
     eea:	4b15      	ldr	r3, [pc, #84]	; (f40 <SERCOM0_Handler+0x14c>)
     eec:	2201      	movs	r2, #1
     eee:	751a      	strb	r2, [r3, #20]
				if(flags & SERCOM_SPI_INTFLAG_RXC)
     ef0:	693b      	ldr	r3, [r7, #16]
     ef2:	2204      	movs	r2, #4
     ef4:	4013      	ands	r3, r2
     ef6:	d01b      	beq.n	f30 <SERCOM0_Handler+0x13c>
					byte = SERCOM0->SPI.DATA.reg;
     ef8:	4b11      	ldr	r3, [pc, #68]	; (f40 <SERCOM0_Handler+0x14c>)
     efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     efc:	230f      	movs	r3, #15
     efe:	18fb      	adds	r3, r7, r3
     f00:	701a      	strb	r2, [r3, #0]
					port->RxBuffer[ *port->RxIndex ] = byte;
     f02:	697b      	ldr	r3, [r7, #20]
     f04:	691a      	ldr	r2, [r3, #16]
     f06:	697b      	ldr	r3, [r7, #20]
     f08:	695b      	ldr	r3, [r3, #20]
     f0a:	881b      	ldrh	r3, [r3, #0]
     f0c:	18d3      	adds	r3, r2, r3
     f0e:	220f      	movs	r2, #15
     f10:	18ba      	adds	r2, r7, r2
     f12:	7812      	ldrb	r2, [r2, #0]
     f14:	701a      	strb	r2, [r3, #0]
					*port->RxIndex += 1;
     f16:	697b      	ldr	r3, [r7, #20]
     f18:	695a      	ldr	r2, [r3, #20]
     f1a:	697b      	ldr	r3, [r7, #20]
     f1c:	695b      	ldr	r3, [r3, #20]
     f1e:	881b      	ldrh	r3, [r3, #0]
     f20:	3301      	adds	r3, #1
     f22:	b29b      	uxth	r3, r3
     f24:	8013      	strh	r3, [r2, #0]
			}break;
     f26:	e003      	b.n	f30 <SERCOM0_Handler+0x13c>
			break;
     f28:	46c0      	nop			; (mov r8, r8)
     f2a:	e002      	b.n	f32 <SERCOM0_Handler+0x13e>
			}break;
     f2c:	46c0      	nop			; (mov r8, r8)
     f2e:	e000      	b.n	f32 <SERCOM0_Handler+0x13e>
			}break;
     f30:	46c0      	nop			; (mov r8, r8)
		}
	}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	46bd      	mov	sp, r7
     f36:	b006      	add	sp, #24
     f38:	bd80      	pop	{r7, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	200006d4 	.word	0x200006d4
     f40:	42000400 	.word	0x42000400
     f44:	41006000 	.word	0x41006000

00000f48 <SERCOM1_Handler>:
#endif

#if (SERCOMS_COUNT >= 2)

	void SERCOM1_Handler()
	{
     f48:	b580      	push	{r7, lr}
     f4a:	b086      	sub	sp, #24
     f4c:	af00      	add	r7, sp, #0
		uint32_t flags;
		uint8_t byte;
		SercomPort_t *port = &_sercomPorts[1];
     f4e:	4b50      	ldr	r3, [pc, #320]	; (1090 <SERCOM1_Handler+0x148>)
     f50:	617b      	str	r3, [r7, #20]

		switch(port->SercomType)
     f52:	697b      	ldr	r3, [r7, #20]
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	2b01      	cmp	r3, #1
     f58:	d004      	beq.n	f64 <SERCOM1_Handler+0x1c>
     f5a:	dc00      	bgt.n	f5e <SERCOM1_Handler+0x16>
     f5c:	e08e      	b.n	107c <SERCOM1_Handler+0x134>
     f5e:	2b02      	cmp	r3, #2
     f60:	d03b      	beq.n	fda <SERCOM1_Handler+0x92>
					*port->RxIndex += 1;
				}
			}break;
			
			case SERCOM_I2C :
			break;
     f62:	e090      	b.n	1086 <SERCOM1_Handler+0x13e>
				flags = SERCOM1->USART.INTFLAG.reg;
     f64:	4b4b      	ldr	r3, [pc, #300]	; (1094 <SERCOM1_Handler+0x14c>)
     f66:	7e1b      	ldrb	r3, [r3, #24]
     f68:	b2db      	uxtb	r3, r3
     f6a:	613b      	str	r3, [r7, #16]
				if(flags & SERCOM_USART_INTFLAG_RXC)
     f6c:	693b      	ldr	r3, [r7, #16]
     f6e:	2204      	movs	r2, #4
     f70:	4013      	ands	r3, r2
     f72:	d100      	bne.n	f76 <SERCOM1_Handler+0x2e>
     f74:	e084      	b.n	1080 <SERCOM1_Handler+0x138>
					byte = SERCOM1->USART.DATA.reg;
     f76:	4b47      	ldr	r3, [pc, #284]	; (1094 <SERCOM1_Handler+0x14c>)
     f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     f7a:	b29a      	uxth	r2, r3
     f7c:	230f      	movs	r3, #15
     f7e:	18fb      	adds	r3, r7, r3
     f80:	701a      	strb	r2, [r3, #0]
					FIFO_WriteByte((FifoBuffer_t*)port->RxBuffer, byte);
     f82:	697b      	ldr	r3, [r7, #20]
     f84:	691b      	ldr	r3, [r3, #16]
     f86:	60bb      	str	r3, [r7, #8]
     f88:	1dfb      	adds	r3, r7, #7
     f8a:	220f      	movs	r2, #15
     f8c:	18ba      	adds	r2, r7, r2
     f8e:	7812      	ldrb	r2, [r2, #0]
     f90:	701a      	strb	r2, [r3, #0]
	if(fifo->state == BUFFER_FULL)
     f92:	68bb      	ldr	r3, [r7, #8]
     f94:	781b      	ldrb	r3, [r3, #0]
     f96:	2b02      	cmp	r3, #2
     f98:	d100      	bne.n	f9c <SERCOM1_Handler+0x54>
     f9a:	e071      	b.n	1080 <SERCOM1_Handler+0x138>
	fifo->dataPointer[fifo->dataHead++] = data;
     f9c:	68bb      	ldr	r3, [r7, #8]
     f9e:	689a      	ldr	r2, [r3, #8]
     fa0:	68bb      	ldr	r3, [r7, #8]
     fa2:	889b      	ldrh	r3, [r3, #4]
     fa4:	1c59      	adds	r1, r3, #1
     fa6:	b288      	uxth	r0, r1
     fa8:	68b9      	ldr	r1, [r7, #8]
     faa:	8088      	strh	r0, [r1, #4]
     fac:	18d3      	adds	r3, r2, r3
     fae:	1dfa      	adds	r2, r7, #7
     fb0:	7812      	ldrb	r2, [r2, #0]
     fb2:	701a      	strb	r2, [r3, #0]
	if(fifo->dataHead >= fifo->dataSize)
     fb4:	68bb      	ldr	r3, [r7, #8]
     fb6:	889a      	ldrh	r2, [r3, #4]
     fb8:	68bb      	ldr	r3, [r7, #8]
     fba:	885b      	ldrh	r3, [r3, #2]
     fbc:	429a      	cmp	r2, r3
     fbe:	d302      	bcc.n	fc6 <SERCOM1_Handler+0x7e>
		fifo->dataHead = 0;
     fc0:	68bb      	ldr	r3, [r7, #8]
     fc2:	2200      	movs	r2, #0
     fc4:	809a      	strh	r2, [r3, #4]
	if(fifo->dataHead == fifo->dataTail)
     fc6:	68bb      	ldr	r3, [r7, #8]
     fc8:	889a      	ldrh	r2, [r3, #4]
     fca:	68bb      	ldr	r3, [r7, #8]
     fcc:	88db      	ldrh	r3, [r3, #6]
     fce:	429a      	cmp	r2, r3
     fd0:	d156      	bne.n	1080 <SERCOM1_Handler+0x138>
		fifo->state = BUFFER_FULL;
     fd2:	68bb      	ldr	r3, [r7, #8]
     fd4:	2202      	movs	r2, #2
     fd6:	701a      	strb	r2, [r3, #0]
			}break;
     fd8:	e052      	b.n	1080 <SERCOM1_Handler+0x138>
				flags = SERCOM1->SPI.INTFLAG.reg;
     fda:	4b2e      	ldr	r3, [pc, #184]	; (1094 <SERCOM1_Handler+0x14c>)
     fdc:	7e1b      	ldrb	r3, [r3, #24]
     fde:	b2db      	uxtb	r3, r3
     fe0:	613b      	str	r3, [r7, #16]
					SERCOM_CS_MOD
     fe2:	693b      	ldr	r3, [r7, #16]
     fe4:	2202      	movs	r2, #2
     fe6:	4013      	ands	r3, r2
     fe8:	d00b      	beq.n	1002 <SERCOM1_Handler+0xba>
     fea:	697b      	ldr	r3, [r7, #20]
     fec:	689b      	ldr	r3, [r3, #8]
     fee:	881a      	ldrh	r2, [r3, #0]
     ff0:	697b      	ldr	r3, [r7, #20]
     ff2:	68db      	ldr	r3, [r3, #12]
     ff4:	881b      	ldrh	r3, [r3, #0]
     ff6:	429a      	cmp	r2, r3
     ff8:	d103      	bne.n	1002 <SERCOM1_Handler+0xba>
     ffa:	4a27      	ldr	r2, [pc, #156]	; (1098 <SERCOM1_Handler+0x150>)
     ffc:	2398      	movs	r3, #152	; 0x98
     ffe:	2110      	movs	r1, #16
    1000:	50d1      	str	r1, [r2, r3]
				if(flags & SERCOM_SPI_INTFLAG_DRE) //Master Tx Send
    1002:	693b      	ldr	r3, [r7, #16]
    1004:	2201      	movs	r2, #1
    1006:	4013      	ands	r3, r2
    1008:	d01c      	beq.n	1044 <SERCOM1_Handler+0xfc>
					if(*port->TxIndex < *port->TxSize)
    100a:	697b      	ldr	r3, [r7, #20]
    100c:	689b      	ldr	r3, [r3, #8]
    100e:	881a      	ldrh	r2, [r3, #0]
    1010:	697b      	ldr	r3, [r7, #20]
    1012:	68db      	ldr	r3, [r3, #12]
    1014:	881b      	ldrh	r3, [r3, #0]
    1016:	429a      	cmp	r2, r3
    1018:	d211      	bcs.n	103e <SERCOM1_Handler+0xf6>
						SERCOM1->SPI.DATA.reg = port->TxBuffer[ *port->TxIndex ];
    101a:	4a1e      	ldr	r2, [pc, #120]	; (1094 <SERCOM1_Handler+0x14c>)
    101c:	697b      	ldr	r3, [r7, #20]
    101e:	6859      	ldr	r1, [r3, #4]
    1020:	697b      	ldr	r3, [r7, #20]
    1022:	689b      	ldr	r3, [r3, #8]
    1024:	881b      	ldrh	r3, [r3, #0]
    1026:	18cb      	adds	r3, r1, r3
    1028:	781b      	ldrb	r3, [r3, #0]
    102a:	6293      	str	r3, [r2, #40]	; 0x28
						*port->TxIndex += 1;
    102c:	697b      	ldr	r3, [r7, #20]
    102e:	689a      	ldr	r2, [r3, #8]
    1030:	697b      	ldr	r3, [r7, #20]
    1032:	689b      	ldr	r3, [r3, #8]
    1034:	881b      	ldrh	r3, [r3, #0]
    1036:	3301      	adds	r3, #1
    1038:	b29b      	uxth	r3, r3
    103a:	8013      	strh	r3, [r2, #0]
    103c:	e002      	b.n	1044 <SERCOM1_Handler+0xfc>
					SERCOM1->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    103e:	4b15      	ldr	r3, [pc, #84]	; (1094 <SERCOM1_Handler+0x14c>)
    1040:	2201      	movs	r2, #1
    1042:	751a      	strb	r2, [r3, #20]
				if(flags & SERCOM_SPI_INTFLAG_RXC)
    1044:	693b      	ldr	r3, [r7, #16]
    1046:	2204      	movs	r2, #4
    1048:	4013      	ands	r3, r2
    104a:	d01b      	beq.n	1084 <SERCOM1_Handler+0x13c>
					byte = SERCOM1->SPI.DATA.reg;
    104c:	4b11      	ldr	r3, [pc, #68]	; (1094 <SERCOM1_Handler+0x14c>)
    104e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1050:	230f      	movs	r3, #15
    1052:	18fb      	adds	r3, r7, r3
    1054:	701a      	strb	r2, [r3, #0]
					port->RxBuffer[ *port->RxIndex ] = byte;
    1056:	697b      	ldr	r3, [r7, #20]
    1058:	691a      	ldr	r2, [r3, #16]
    105a:	697b      	ldr	r3, [r7, #20]
    105c:	695b      	ldr	r3, [r3, #20]
    105e:	881b      	ldrh	r3, [r3, #0]
    1060:	18d3      	adds	r3, r2, r3
    1062:	220f      	movs	r2, #15
    1064:	18ba      	adds	r2, r7, r2
    1066:	7812      	ldrb	r2, [r2, #0]
    1068:	701a      	strb	r2, [r3, #0]
					*port->RxIndex += 1;
    106a:	697b      	ldr	r3, [r7, #20]
    106c:	695a      	ldr	r2, [r3, #20]
    106e:	697b      	ldr	r3, [r7, #20]
    1070:	695b      	ldr	r3, [r3, #20]
    1072:	881b      	ldrh	r3, [r3, #0]
    1074:	3301      	adds	r3, #1
    1076:	b29b      	uxth	r3, r3
    1078:	8013      	strh	r3, [r2, #0]
			}break;
    107a:	e003      	b.n	1084 <SERCOM1_Handler+0x13c>
			break;
    107c:	46c0      	nop			; (mov r8, r8)
    107e:	e002      	b.n	1086 <SERCOM1_Handler+0x13e>
			}break;
    1080:	46c0      	nop			; (mov r8, r8)
    1082:	e000      	b.n	1086 <SERCOM1_Handler+0x13e>
			}break;
    1084:	46c0      	nop			; (mov r8, r8)
		}
	}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	46bd      	mov	sp, r7
    108a:	b006      	add	sp, #24
    108c:	bd80      	pop	{r7, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	200006f0 	.word	0x200006f0
    1094:	42000800 	.word	0x42000800
    1098:	41006000 	.word	0x41006000

0000109c <SERCOM2_Handler>:
#endif

#if (SERCOMS_COUNT >= 3)
	
	void SERCOM2_Handler()
	{
    109c:	b580      	push	{r7, lr}
    109e:	b086      	sub	sp, #24
    10a0:	af00      	add	r7, sp, #0
		uint32_t flags;
		uint8_t byte;
		SercomPort_t *port = &_sercomPorts[2];
    10a2:	4b50      	ldr	r3, [pc, #320]	; (11e4 <SERCOM2_Handler+0x148>)
    10a4:	617b      	str	r3, [r7, #20]

		switch(port->SercomType)
    10a6:	697b      	ldr	r3, [r7, #20]
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b01      	cmp	r3, #1
    10ac:	d004      	beq.n	10b8 <SERCOM2_Handler+0x1c>
    10ae:	dc00      	bgt.n	10b2 <SERCOM2_Handler+0x16>
    10b0:	e08e      	b.n	11d0 <SERCOM2_Handler+0x134>
    10b2:	2b02      	cmp	r3, #2
    10b4:	d03b      	beq.n	112e <SERCOM2_Handler+0x92>
				}
				
			}break;
			
			case SERCOM_I2C :
			break;
    10b6:	e090      	b.n	11da <SERCOM2_Handler+0x13e>
				flags = SERCOM2->USART.INTFLAG.reg;
    10b8:	4b4b      	ldr	r3, [pc, #300]	; (11e8 <SERCOM2_Handler+0x14c>)
    10ba:	7e1b      	ldrb	r3, [r3, #24]
    10bc:	b2db      	uxtb	r3, r3
    10be:	613b      	str	r3, [r7, #16]
				if(flags & SERCOM_USART_INTFLAG_RXC)
    10c0:	693b      	ldr	r3, [r7, #16]
    10c2:	2204      	movs	r2, #4
    10c4:	4013      	ands	r3, r2
    10c6:	d100      	bne.n	10ca <SERCOM2_Handler+0x2e>
    10c8:	e084      	b.n	11d4 <SERCOM2_Handler+0x138>
					byte = SERCOM2->USART.DATA.reg;
    10ca:	4b47      	ldr	r3, [pc, #284]	; (11e8 <SERCOM2_Handler+0x14c>)
    10cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    10ce:	b29a      	uxth	r2, r3
    10d0:	230f      	movs	r3, #15
    10d2:	18fb      	adds	r3, r7, r3
    10d4:	701a      	strb	r2, [r3, #0]
					FIFO_WriteByte((FifoBuffer_t*)port->RxBuffer, byte);
    10d6:	697b      	ldr	r3, [r7, #20]
    10d8:	691b      	ldr	r3, [r3, #16]
    10da:	60bb      	str	r3, [r7, #8]
    10dc:	1dfb      	adds	r3, r7, #7
    10de:	220f      	movs	r2, #15
    10e0:	18ba      	adds	r2, r7, r2
    10e2:	7812      	ldrb	r2, [r2, #0]
    10e4:	701a      	strb	r2, [r3, #0]
	if(fifo->state == BUFFER_FULL)
    10e6:	68bb      	ldr	r3, [r7, #8]
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	2b02      	cmp	r3, #2
    10ec:	d100      	bne.n	10f0 <SERCOM2_Handler+0x54>
    10ee:	e071      	b.n	11d4 <SERCOM2_Handler+0x138>
	fifo->dataPointer[fifo->dataHead++] = data;
    10f0:	68bb      	ldr	r3, [r7, #8]
    10f2:	689a      	ldr	r2, [r3, #8]
    10f4:	68bb      	ldr	r3, [r7, #8]
    10f6:	889b      	ldrh	r3, [r3, #4]
    10f8:	1c59      	adds	r1, r3, #1
    10fa:	b288      	uxth	r0, r1
    10fc:	68b9      	ldr	r1, [r7, #8]
    10fe:	8088      	strh	r0, [r1, #4]
    1100:	18d3      	adds	r3, r2, r3
    1102:	1dfa      	adds	r2, r7, #7
    1104:	7812      	ldrb	r2, [r2, #0]
    1106:	701a      	strb	r2, [r3, #0]
	if(fifo->dataHead >= fifo->dataSize)
    1108:	68bb      	ldr	r3, [r7, #8]
    110a:	889a      	ldrh	r2, [r3, #4]
    110c:	68bb      	ldr	r3, [r7, #8]
    110e:	885b      	ldrh	r3, [r3, #2]
    1110:	429a      	cmp	r2, r3
    1112:	d302      	bcc.n	111a <SERCOM2_Handler+0x7e>
		fifo->dataHead = 0;
    1114:	68bb      	ldr	r3, [r7, #8]
    1116:	2200      	movs	r2, #0
    1118:	809a      	strh	r2, [r3, #4]
	if(fifo->dataHead == fifo->dataTail)
    111a:	68bb      	ldr	r3, [r7, #8]
    111c:	889a      	ldrh	r2, [r3, #4]
    111e:	68bb      	ldr	r3, [r7, #8]
    1120:	88db      	ldrh	r3, [r3, #6]
    1122:	429a      	cmp	r2, r3
    1124:	d156      	bne.n	11d4 <SERCOM2_Handler+0x138>
		fifo->state = BUFFER_FULL;
    1126:	68bb      	ldr	r3, [r7, #8]
    1128:	2202      	movs	r2, #2
    112a:	701a      	strb	r2, [r3, #0]
			}break;
    112c:	e052      	b.n	11d4 <SERCOM2_Handler+0x138>
				flags = SERCOM2->SPI.INTFLAG.reg;
    112e:	4b2e      	ldr	r3, [pc, #184]	; (11e8 <SERCOM2_Handler+0x14c>)
    1130:	7e1b      	ldrb	r3, [r3, #24]
    1132:	b2db      	uxtb	r3, r3
    1134:	613b      	str	r3, [r7, #16]
					SERCOM_CS_MOD
    1136:	693b      	ldr	r3, [r7, #16]
    1138:	2202      	movs	r2, #2
    113a:	4013      	ands	r3, r2
    113c:	d00b      	beq.n	1156 <SERCOM2_Handler+0xba>
    113e:	697b      	ldr	r3, [r7, #20]
    1140:	689b      	ldr	r3, [r3, #8]
    1142:	881a      	ldrh	r2, [r3, #0]
    1144:	697b      	ldr	r3, [r7, #20]
    1146:	68db      	ldr	r3, [r3, #12]
    1148:	881b      	ldrh	r3, [r3, #0]
    114a:	429a      	cmp	r2, r3
    114c:	d103      	bne.n	1156 <SERCOM2_Handler+0xba>
    114e:	4a27      	ldr	r2, [pc, #156]	; (11ec <SERCOM2_Handler+0x150>)
    1150:	2398      	movs	r3, #152	; 0x98
    1152:	2110      	movs	r1, #16
    1154:	50d1      	str	r1, [r2, r3]
				if(flags & SERCOM_SPI_INTFLAG_DRE) //Master Tx Send
    1156:	693b      	ldr	r3, [r7, #16]
    1158:	2201      	movs	r2, #1
    115a:	4013      	ands	r3, r2
    115c:	d01c      	beq.n	1198 <SERCOM2_Handler+0xfc>
					if(*port->TxIndex < *port->TxSize)
    115e:	697b      	ldr	r3, [r7, #20]
    1160:	689b      	ldr	r3, [r3, #8]
    1162:	881a      	ldrh	r2, [r3, #0]
    1164:	697b      	ldr	r3, [r7, #20]
    1166:	68db      	ldr	r3, [r3, #12]
    1168:	881b      	ldrh	r3, [r3, #0]
    116a:	429a      	cmp	r2, r3
    116c:	d211      	bcs.n	1192 <SERCOM2_Handler+0xf6>
						SERCOM2->SPI.DATA.reg = port->TxBuffer[ *port->TxIndex ];
    116e:	4a1e      	ldr	r2, [pc, #120]	; (11e8 <SERCOM2_Handler+0x14c>)
    1170:	697b      	ldr	r3, [r7, #20]
    1172:	6859      	ldr	r1, [r3, #4]
    1174:	697b      	ldr	r3, [r7, #20]
    1176:	689b      	ldr	r3, [r3, #8]
    1178:	881b      	ldrh	r3, [r3, #0]
    117a:	18cb      	adds	r3, r1, r3
    117c:	781b      	ldrb	r3, [r3, #0]
    117e:	6293      	str	r3, [r2, #40]	; 0x28
						*port->TxIndex += 1;
    1180:	697b      	ldr	r3, [r7, #20]
    1182:	689a      	ldr	r2, [r3, #8]
    1184:	697b      	ldr	r3, [r7, #20]
    1186:	689b      	ldr	r3, [r3, #8]
    1188:	881b      	ldrh	r3, [r3, #0]
    118a:	3301      	adds	r3, #1
    118c:	b29b      	uxth	r3, r3
    118e:	8013      	strh	r3, [r2, #0]
    1190:	e002      	b.n	1198 <SERCOM2_Handler+0xfc>
					SERCOM2->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1192:	4b15      	ldr	r3, [pc, #84]	; (11e8 <SERCOM2_Handler+0x14c>)
    1194:	2201      	movs	r2, #1
    1196:	751a      	strb	r2, [r3, #20]
				if(flags & SERCOM_SPI_INTFLAG_RXC)
    1198:	693b      	ldr	r3, [r7, #16]
    119a:	2204      	movs	r2, #4
    119c:	4013      	ands	r3, r2
    119e:	d01b      	beq.n	11d8 <SERCOM2_Handler+0x13c>
					byte = SERCOM2->SPI.DATA.reg;
    11a0:	4b11      	ldr	r3, [pc, #68]	; (11e8 <SERCOM2_Handler+0x14c>)
    11a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11a4:	230f      	movs	r3, #15
    11a6:	18fb      	adds	r3, r7, r3
    11a8:	701a      	strb	r2, [r3, #0]
					port->RxBuffer[ *port->RxIndex ] = byte;
    11aa:	697b      	ldr	r3, [r7, #20]
    11ac:	691a      	ldr	r2, [r3, #16]
    11ae:	697b      	ldr	r3, [r7, #20]
    11b0:	695b      	ldr	r3, [r3, #20]
    11b2:	881b      	ldrh	r3, [r3, #0]
    11b4:	18d3      	adds	r3, r2, r3
    11b6:	220f      	movs	r2, #15
    11b8:	18ba      	adds	r2, r7, r2
    11ba:	7812      	ldrb	r2, [r2, #0]
    11bc:	701a      	strb	r2, [r3, #0]
					*port->RxIndex += 1;
    11be:	697b      	ldr	r3, [r7, #20]
    11c0:	695a      	ldr	r2, [r3, #20]
    11c2:	697b      	ldr	r3, [r7, #20]
    11c4:	695b      	ldr	r3, [r3, #20]
    11c6:	881b      	ldrh	r3, [r3, #0]
    11c8:	3301      	adds	r3, #1
    11ca:	b29b      	uxth	r3, r3
    11cc:	8013      	strh	r3, [r2, #0]
			}break;
    11ce:	e003      	b.n	11d8 <SERCOM2_Handler+0x13c>
			break;
    11d0:	46c0      	nop			; (mov r8, r8)
    11d2:	e002      	b.n	11da <SERCOM2_Handler+0x13e>
			}break;
    11d4:	46c0      	nop			; (mov r8, r8)
    11d6:	e000      	b.n	11da <SERCOM2_Handler+0x13e>
			}break;
    11d8:	46c0      	nop			; (mov r8, r8)
		}
	}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	46bd      	mov	sp, r7
    11de:	b006      	add	sp, #24
    11e0:	bd80      	pop	{r7, pc}
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	2000070c 	.word	0x2000070c
    11e8:	42000c00 	.word	0x42000c00
    11ec:	41006000 	.word	0x41006000

000011f0 <SERCOM3_Handler>:
#endif

#if (SERCOMS_COUNT >= 4)
	
	void SERCOM3_Handler()
	{
    11f0:	b580      	push	{r7, lr}
    11f2:	b086      	sub	sp, #24
    11f4:	af00      	add	r7, sp, #0
		uint32_t flags;
		uint8_t byte;
		SercomPort_t *port = &_sercomPorts[3];
    11f6:	4b56      	ldr	r3, [pc, #344]	; (1350 <SERCOM3_Handler+0x160>)
    11f8:	617b      	str	r3, [r7, #20]

		switch(port->SercomType)
    11fa:	697b      	ldr	r3, [r7, #20]
    11fc:	781b      	ldrb	r3, [r3, #0]
    11fe:	2b01      	cmp	r3, #1
    1200:	d004      	beq.n	120c <SERCOM3_Handler+0x1c>
    1202:	dc00      	bgt.n	1206 <SERCOM3_Handler+0x16>
    1204:	e09a      	b.n	133c <SERCOM3_Handler+0x14c>
    1206:	2b02      	cmp	r3, #2
    1208:	d03b      	beq.n	1282 <SERCOM3_Handler+0x92>
					*port->RxIndex += 1;
				}
			}break;
			
			case SERCOM_I2C :
			break;
    120a:	e09c      	b.n	1346 <SERCOM3_Handler+0x156>
				flags = SERCOM3->USART.INTFLAG.reg;
    120c:	4b51      	ldr	r3, [pc, #324]	; (1354 <SERCOM3_Handler+0x164>)
    120e:	7e1b      	ldrb	r3, [r3, #24]
    1210:	b2db      	uxtb	r3, r3
    1212:	613b      	str	r3, [r7, #16]
				if(flags & SERCOM_USART_INTFLAG_RXC)
    1214:	693b      	ldr	r3, [r7, #16]
    1216:	2204      	movs	r2, #4
    1218:	4013      	ands	r3, r2
    121a:	d100      	bne.n	121e <SERCOM3_Handler+0x2e>
    121c:	e090      	b.n	1340 <SERCOM3_Handler+0x150>
					byte = SERCOM3->USART.DATA.reg;
    121e:	4b4d      	ldr	r3, [pc, #308]	; (1354 <SERCOM3_Handler+0x164>)
    1220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1222:	b29a      	uxth	r2, r3
    1224:	230f      	movs	r3, #15
    1226:	18fb      	adds	r3, r7, r3
    1228:	701a      	strb	r2, [r3, #0]
					FIFO_WriteByte((FifoBuffer_t*)port->RxBuffer, byte);
    122a:	697b      	ldr	r3, [r7, #20]
    122c:	691b      	ldr	r3, [r3, #16]
    122e:	60bb      	str	r3, [r7, #8]
    1230:	1dfb      	adds	r3, r7, #7
    1232:	220f      	movs	r2, #15
    1234:	18ba      	adds	r2, r7, r2
    1236:	7812      	ldrb	r2, [r2, #0]
    1238:	701a      	strb	r2, [r3, #0]
	if(fifo->state == BUFFER_FULL)
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	781b      	ldrb	r3, [r3, #0]
    123e:	2b02      	cmp	r3, #2
    1240:	d100      	bne.n	1244 <SERCOM3_Handler+0x54>
    1242:	e07d      	b.n	1340 <SERCOM3_Handler+0x150>
	fifo->dataPointer[fifo->dataHead++] = data;
    1244:	68bb      	ldr	r3, [r7, #8]
    1246:	689a      	ldr	r2, [r3, #8]
    1248:	68bb      	ldr	r3, [r7, #8]
    124a:	889b      	ldrh	r3, [r3, #4]
    124c:	1c59      	adds	r1, r3, #1
    124e:	b288      	uxth	r0, r1
    1250:	68b9      	ldr	r1, [r7, #8]
    1252:	8088      	strh	r0, [r1, #4]
    1254:	18d3      	adds	r3, r2, r3
    1256:	1dfa      	adds	r2, r7, #7
    1258:	7812      	ldrb	r2, [r2, #0]
    125a:	701a      	strb	r2, [r3, #0]
	if(fifo->dataHead >= fifo->dataSize)
    125c:	68bb      	ldr	r3, [r7, #8]
    125e:	889a      	ldrh	r2, [r3, #4]
    1260:	68bb      	ldr	r3, [r7, #8]
    1262:	885b      	ldrh	r3, [r3, #2]
    1264:	429a      	cmp	r2, r3
    1266:	d302      	bcc.n	126e <SERCOM3_Handler+0x7e>
		fifo->dataHead = 0;
    1268:	68bb      	ldr	r3, [r7, #8]
    126a:	2200      	movs	r2, #0
    126c:	809a      	strh	r2, [r3, #4]
	if(fifo->dataHead == fifo->dataTail)
    126e:	68bb      	ldr	r3, [r7, #8]
    1270:	889a      	ldrh	r2, [r3, #4]
    1272:	68bb      	ldr	r3, [r7, #8]
    1274:	88db      	ldrh	r3, [r3, #6]
    1276:	429a      	cmp	r2, r3
    1278:	d162      	bne.n	1340 <SERCOM3_Handler+0x150>
		fifo->state = BUFFER_FULL;
    127a:	68bb      	ldr	r3, [r7, #8]
    127c:	2202      	movs	r2, #2
    127e:	701a      	strb	r2, [r3, #0]
			}break;
    1280:	e05e      	b.n	1340 <SERCOM3_Handler+0x150>
				flags = SERCOM3->SPI.INTFLAG.reg;
    1282:	4b34      	ldr	r3, [pc, #208]	; (1354 <SERCOM3_Handler+0x164>)
    1284:	7e1b      	ldrb	r3, [r3, #24]
    1286:	b2db      	uxtb	r3, r3
    1288:	613b      	str	r3, [r7, #16]
				if(flags & SERCOM_SPI_INTFLAG_TXC)
    128a:	693b      	ldr	r3, [r7, #16]
    128c:	2202      	movs	r2, #2
    128e:	4013      	ands	r3, r2
    1290:	d017      	beq.n	12c2 <SERCOM3_Handler+0xd2>
						SERCOM_CS_MOD
    1292:	693b      	ldr	r3, [r7, #16]
    1294:	2202      	movs	r2, #2
    1296:	4013      	ands	r3, r2
    1298:	d00b      	beq.n	12b2 <SERCOM3_Handler+0xc2>
    129a:	697b      	ldr	r3, [r7, #20]
    129c:	689b      	ldr	r3, [r3, #8]
    129e:	881a      	ldrh	r2, [r3, #0]
    12a0:	697b      	ldr	r3, [r7, #20]
    12a2:	68db      	ldr	r3, [r3, #12]
    12a4:	881b      	ldrh	r3, [r3, #0]
    12a6:	429a      	cmp	r2, r3
    12a8:	d103      	bne.n	12b2 <SERCOM3_Handler+0xc2>
    12aa:	4a2b      	ldr	r2, [pc, #172]	; (1358 <SERCOM3_Handler+0x168>)
    12ac:	2398      	movs	r3, #152	; 0x98
    12ae:	2110      	movs	r1, #16
    12b0:	50d1      	str	r1, [r2, r3]
					SERCOM3->SPI.INTFLAG.reg |= SERCOM_SPI_INTFLAG_TXC;
    12b2:	4a28      	ldr	r2, [pc, #160]	; (1354 <SERCOM3_Handler+0x164>)
    12b4:	4b27      	ldr	r3, [pc, #156]	; (1354 <SERCOM3_Handler+0x164>)
    12b6:	7e1b      	ldrb	r3, [r3, #24]
    12b8:	b2db      	uxtb	r3, r3
    12ba:	2102      	movs	r1, #2
    12bc:	430b      	orrs	r3, r1
    12be:	b2db      	uxtb	r3, r3
    12c0:	7613      	strb	r3, [r2, #24]
				if(flags & SERCOM_SPI_INTFLAG_DRE) //Master Tx Send
    12c2:	693b      	ldr	r3, [r7, #16]
    12c4:	2201      	movs	r2, #1
    12c6:	4013      	ands	r3, r2
    12c8:	d01c      	beq.n	1304 <SERCOM3_Handler+0x114>
					if(*port->TxIndex < *port->TxSize)
    12ca:	697b      	ldr	r3, [r7, #20]
    12cc:	689b      	ldr	r3, [r3, #8]
    12ce:	881a      	ldrh	r2, [r3, #0]
    12d0:	697b      	ldr	r3, [r7, #20]
    12d2:	68db      	ldr	r3, [r3, #12]
    12d4:	881b      	ldrh	r3, [r3, #0]
    12d6:	429a      	cmp	r2, r3
    12d8:	d211      	bcs.n	12fe <SERCOM3_Handler+0x10e>
						SERCOM3->SPI.DATA.reg = port->TxBuffer[ *port->TxIndex ];
    12da:	4a1e      	ldr	r2, [pc, #120]	; (1354 <SERCOM3_Handler+0x164>)
    12dc:	697b      	ldr	r3, [r7, #20]
    12de:	6859      	ldr	r1, [r3, #4]
    12e0:	697b      	ldr	r3, [r7, #20]
    12e2:	689b      	ldr	r3, [r3, #8]
    12e4:	881b      	ldrh	r3, [r3, #0]
    12e6:	18cb      	adds	r3, r1, r3
    12e8:	781b      	ldrb	r3, [r3, #0]
    12ea:	6293      	str	r3, [r2, #40]	; 0x28
						*port->TxIndex += 1;
    12ec:	697b      	ldr	r3, [r7, #20]
    12ee:	689a      	ldr	r2, [r3, #8]
    12f0:	697b      	ldr	r3, [r7, #20]
    12f2:	689b      	ldr	r3, [r3, #8]
    12f4:	881b      	ldrh	r3, [r3, #0]
    12f6:	3301      	adds	r3, #1
    12f8:	b29b      	uxth	r3, r3
    12fa:	8013      	strh	r3, [r2, #0]
    12fc:	e002      	b.n	1304 <SERCOM3_Handler+0x114>
						SERCOM3->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    12fe:	4b15      	ldr	r3, [pc, #84]	; (1354 <SERCOM3_Handler+0x164>)
    1300:	2201      	movs	r2, #1
    1302:	751a      	strb	r2, [r3, #20]
				if(flags & SERCOM_SPI_INTFLAG_RXC)
    1304:	693b      	ldr	r3, [r7, #16]
    1306:	2204      	movs	r2, #4
    1308:	4013      	ands	r3, r2
    130a:	d01b      	beq.n	1344 <SERCOM3_Handler+0x154>
					byte = SERCOM3->SPI.DATA.reg;
    130c:	4b11      	ldr	r3, [pc, #68]	; (1354 <SERCOM3_Handler+0x164>)
    130e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1310:	230f      	movs	r3, #15
    1312:	18fb      	adds	r3, r7, r3
    1314:	701a      	strb	r2, [r3, #0]
					port->RxBuffer[ *port->RxIndex ] = byte;
    1316:	697b      	ldr	r3, [r7, #20]
    1318:	691a      	ldr	r2, [r3, #16]
    131a:	697b      	ldr	r3, [r7, #20]
    131c:	695b      	ldr	r3, [r3, #20]
    131e:	881b      	ldrh	r3, [r3, #0]
    1320:	18d3      	adds	r3, r2, r3
    1322:	220f      	movs	r2, #15
    1324:	18ba      	adds	r2, r7, r2
    1326:	7812      	ldrb	r2, [r2, #0]
    1328:	701a      	strb	r2, [r3, #0]
					*port->RxIndex += 1;
    132a:	697b      	ldr	r3, [r7, #20]
    132c:	695a      	ldr	r2, [r3, #20]
    132e:	697b      	ldr	r3, [r7, #20]
    1330:	695b      	ldr	r3, [r3, #20]
    1332:	881b      	ldrh	r3, [r3, #0]
    1334:	3301      	adds	r3, #1
    1336:	b29b      	uxth	r3, r3
    1338:	8013      	strh	r3, [r2, #0]
			}break;
    133a:	e003      	b.n	1344 <SERCOM3_Handler+0x154>
			break;
    133c:	46c0      	nop			; (mov r8, r8)
    133e:	e002      	b.n	1346 <SERCOM3_Handler+0x156>
			}break;
    1340:	46c0      	nop			; (mov r8, r8)
    1342:	e000      	b.n	1346 <SERCOM3_Handler+0x156>
			}break;
    1344:	46c0      	nop			; (mov r8, r8)
		}
	}
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	46bd      	mov	sp, r7
    134a:	b006      	add	sp, #24
    134c:	bd80      	pop	{r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	20000728 	.word	0x20000728
    1354:	42001000 	.word	0x42001000
    1358:	41006000 	.word	0x41006000

0000135c <SERCOM4_Handler>:
#endif

#if (SERCOMS_COUNT >= 5)
	
	void SERCOM4_Handler()
	{
    135c:	b580      	push	{r7, lr}
    135e:	b086      	sub	sp, #24
    1360:	af00      	add	r7, sp, #0
		uint32_t flags;
		uint8_t byte;
		SercomPort_t *port = &_sercomPorts[4];
    1362:	4b50      	ldr	r3, [pc, #320]	; (14a4 <SERCOM4_Handler+0x148>)
    1364:	617b      	str	r3, [r7, #20]

		switch(port->SercomType)
    1366:	697b      	ldr	r3, [r7, #20]
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	2b01      	cmp	r3, #1
    136c:	d004      	beq.n	1378 <SERCOM4_Handler+0x1c>
    136e:	dc00      	bgt.n	1372 <SERCOM4_Handler+0x16>
    1370:	e08e      	b.n	1490 <SERCOM4_Handler+0x134>
    1372:	2b02      	cmp	r3, #2
    1374:	d03b      	beq.n	13ee <SERCOM4_Handler+0x92>
					*port->RxIndex += 1;
				}
			}break;
			
			case SERCOM_I2C :
			break;
    1376:	e090      	b.n	149a <SERCOM4_Handler+0x13e>
				flags = SERCOM4->USART.INTFLAG.reg;
    1378:	4b4b      	ldr	r3, [pc, #300]	; (14a8 <SERCOM4_Handler+0x14c>)
    137a:	7e1b      	ldrb	r3, [r3, #24]
    137c:	b2db      	uxtb	r3, r3
    137e:	613b      	str	r3, [r7, #16]
				if(flags & SERCOM_USART_INTFLAG_RXC)
    1380:	693b      	ldr	r3, [r7, #16]
    1382:	2204      	movs	r2, #4
    1384:	4013      	ands	r3, r2
    1386:	d100      	bne.n	138a <SERCOM4_Handler+0x2e>
    1388:	e084      	b.n	1494 <SERCOM4_Handler+0x138>
					byte = SERCOM4->USART.DATA.reg;
    138a:	4b47      	ldr	r3, [pc, #284]	; (14a8 <SERCOM4_Handler+0x14c>)
    138c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    138e:	b29a      	uxth	r2, r3
    1390:	230f      	movs	r3, #15
    1392:	18fb      	adds	r3, r7, r3
    1394:	701a      	strb	r2, [r3, #0]
					FIFO_WriteByte((FifoBuffer_t*)port->RxBuffer, byte);
    1396:	697b      	ldr	r3, [r7, #20]
    1398:	691b      	ldr	r3, [r3, #16]
    139a:	60bb      	str	r3, [r7, #8]
    139c:	1dfb      	adds	r3, r7, #7
    139e:	220f      	movs	r2, #15
    13a0:	18ba      	adds	r2, r7, r2
    13a2:	7812      	ldrb	r2, [r2, #0]
    13a4:	701a      	strb	r2, [r3, #0]
	if(fifo->state == BUFFER_FULL)
    13a6:	68bb      	ldr	r3, [r7, #8]
    13a8:	781b      	ldrb	r3, [r3, #0]
    13aa:	2b02      	cmp	r3, #2
    13ac:	d100      	bne.n	13b0 <SERCOM4_Handler+0x54>
    13ae:	e071      	b.n	1494 <SERCOM4_Handler+0x138>
	fifo->dataPointer[fifo->dataHead++] = data;
    13b0:	68bb      	ldr	r3, [r7, #8]
    13b2:	689a      	ldr	r2, [r3, #8]
    13b4:	68bb      	ldr	r3, [r7, #8]
    13b6:	889b      	ldrh	r3, [r3, #4]
    13b8:	1c59      	adds	r1, r3, #1
    13ba:	b288      	uxth	r0, r1
    13bc:	68b9      	ldr	r1, [r7, #8]
    13be:	8088      	strh	r0, [r1, #4]
    13c0:	18d3      	adds	r3, r2, r3
    13c2:	1dfa      	adds	r2, r7, #7
    13c4:	7812      	ldrb	r2, [r2, #0]
    13c6:	701a      	strb	r2, [r3, #0]
	if(fifo->dataHead >= fifo->dataSize)
    13c8:	68bb      	ldr	r3, [r7, #8]
    13ca:	889a      	ldrh	r2, [r3, #4]
    13cc:	68bb      	ldr	r3, [r7, #8]
    13ce:	885b      	ldrh	r3, [r3, #2]
    13d0:	429a      	cmp	r2, r3
    13d2:	d302      	bcc.n	13da <SERCOM4_Handler+0x7e>
		fifo->dataHead = 0;
    13d4:	68bb      	ldr	r3, [r7, #8]
    13d6:	2200      	movs	r2, #0
    13d8:	809a      	strh	r2, [r3, #4]
	if(fifo->dataHead == fifo->dataTail)
    13da:	68bb      	ldr	r3, [r7, #8]
    13dc:	889a      	ldrh	r2, [r3, #4]
    13de:	68bb      	ldr	r3, [r7, #8]
    13e0:	88db      	ldrh	r3, [r3, #6]
    13e2:	429a      	cmp	r2, r3
    13e4:	d156      	bne.n	1494 <SERCOM4_Handler+0x138>
		fifo->state = BUFFER_FULL;
    13e6:	68bb      	ldr	r3, [r7, #8]
    13e8:	2202      	movs	r2, #2
    13ea:	701a      	strb	r2, [r3, #0]
			}break;
    13ec:	e052      	b.n	1494 <SERCOM4_Handler+0x138>
				flags = SERCOM4->SPI.INTFLAG.reg;
    13ee:	4b2e      	ldr	r3, [pc, #184]	; (14a8 <SERCOM4_Handler+0x14c>)
    13f0:	7e1b      	ldrb	r3, [r3, #24]
    13f2:	b2db      	uxtb	r3, r3
    13f4:	613b      	str	r3, [r7, #16]
					SERCOM_CS_MOD
    13f6:	693b      	ldr	r3, [r7, #16]
    13f8:	2202      	movs	r2, #2
    13fa:	4013      	ands	r3, r2
    13fc:	d00b      	beq.n	1416 <SERCOM4_Handler+0xba>
    13fe:	697b      	ldr	r3, [r7, #20]
    1400:	689b      	ldr	r3, [r3, #8]
    1402:	881a      	ldrh	r2, [r3, #0]
    1404:	697b      	ldr	r3, [r7, #20]
    1406:	68db      	ldr	r3, [r3, #12]
    1408:	881b      	ldrh	r3, [r3, #0]
    140a:	429a      	cmp	r2, r3
    140c:	d103      	bne.n	1416 <SERCOM4_Handler+0xba>
    140e:	4a27      	ldr	r2, [pc, #156]	; (14ac <SERCOM4_Handler+0x150>)
    1410:	2398      	movs	r3, #152	; 0x98
    1412:	2110      	movs	r1, #16
    1414:	50d1      	str	r1, [r2, r3]
				if(flags & SERCOM_SPI_INTFLAG_DRE) //Master Tx Send
    1416:	693b      	ldr	r3, [r7, #16]
    1418:	2201      	movs	r2, #1
    141a:	4013      	ands	r3, r2
    141c:	d01c      	beq.n	1458 <SERCOM4_Handler+0xfc>
					if(*port->TxIndex < *port->TxSize)
    141e:	697b      	ldr	r3, [r7, #20]
    1420:	689b      	ldr	r3, [r3, #8]
    1422:	881a      	ldrh	r2, [r3, #0]
    1424:	697b      	ldr	r3, [r7, #20]
    1426:	68db      	ldr	r3, [r3, #12]
    1428:	881b      	ldrh	r3, [r3, #0]
    142a:	429a      	cmp	r2, r3
    142c:	d211      	bcs.n	1452 <SERCOM4_Handler+0xf6>
						SERCOM4->SPI.DATA.reg = port->TxBuffer[ *port->TxIndex ];
    142e:	4a1e      	ldr	r2, [pc, #120]	; (14a8 <SERCOM4_Handler+0x14c>)
    1430:	697b      	ldr	r3, [r7, #20]
    1432:	6859      	ldr	r1, [r3, #4]
    1434:	697b      	ldr	r3, [r7, #20]
    1436:	689b      	ldr	r3, [r3, #8]
    1438:	881b      	ldrh	r3, [r3, #0]
    143a:	18cb      	adds	r3, r1, r3
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	6293      	str	r3, [r2, #40]	; 0x28
						*port->TxIndex += 1;
    1440:	697b      	ldr	r3, [r7, #20]
    1442:	689a      	ldr	r2, [r3, #8]
    1444:	697b      	ldr	r3, [r7, #20]
    1446:	689b      	ldr	r3, [r3, #8]
    1448:	881b      	ldrh	r3, [r3, #0]
    144a:	3301      	adds	r3, #1
    144c:	b29b      	uxth	r3, r3
    144e:	8013      	strh	r3, [r2, #0]
    1450:	e002      	b.n	1458 <SERCOM4_Handler+0xfc>
					SERCOM4->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1452:	4b15      	ldr	r3, [pc, #84]	; (14a8 <SERCOM4_Handler+0x14c>)
    1454:	2201      	movs	r2, #1
    1456:	751a      	strb	r2, [r3, #20]
				if(flags & SERCOM_SPI_INTFLAG_RXC)
    1458:	693b      	ldr	r3, [r7, #16]
    145a:	2204      	movs	r2, #4
    145c:	4013      	ands	r3, r2
    145e:	d01b      	beq.n	1498 <SERCOM4_Handler+0x13c>
					byte = SERCOM4->SPI.DATA.reg;
    1460:	4b11      	ldr	r3, [pc, #68]	; (14a8 <SERCOM4_Handler+0x14c>)
    1462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1464:	230f      	movs	r3, #15
    1466:	18fb      	adds	r3, r7, r3
    1468:	701a      	strb	r2, [r3, #0]
					port->RxBuffer[ *port->RxIndex ] = byte;
    146a:	697b      	ldr	r3, [r7, #20]
    146c:	691a      	ldr	r2, [r3, #16]
    146e:	697b      	ldr	r3, [r7, #20]
    1470:	695b      	ldr	r3, [r3, #20]
    1472:	881b      	ldrh	r3, [r3, #0]
    1474:	18d3      	adds	r3, r2, r3
    1476:	220f      	movs	r2, #15
    1478:	18ba      	adds	r2, r7, r2
    147a:	7812      	ldrb	r2, [r2, #0]
    147c:	701a      	strb	r2, [r3, #0]
					*port->RxIndex += 1;
    147e:	697b      	ldr	r3, [r7, #20]
    1480:	695a      	ldr	r2, [r3, #20]
    1482:	697b      	ldr	r3, [r7, #20]
    1484:	695b      	ldr	r3, [r3, #20]
    1486:	881b      	ldrh	r3, [r3, #0]
    1488:	3301      	adds	r3, #1
    148a:	b29b      	uxth	r3, r3
    148c:	8013      	strh	r3, [r2, #0]
			}break;
    148e:	e003      	b.n	1498 <SERCOM4_Handler+0x13c>
			break;
    1490:	46c0      	nop			; (mov r8, r8)
    1492:	e002      	b.n	149a <SERCOM4_Handler+0x13e>
			}break;
    1494:	46c0      	nop			; (mov r8, r8)
    1496:	e000      	b.n	149a <SERCOM4_Handler+0x13e>
			}break;
    1498:	46c0      	nop			; (mov r8, r8)
		}
	}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	46bd      	mov	sp, r7
    149e:	b006      	add	sp, #24
    14a0:	bd80      	pop	{r7, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	20000744 	.word	0x20000744
    14a8:	42001400 	.word	0x42001400
    14ac:	41006000 	.word	0x41006000

000014b0 <SERCOM5_Handler>:
#endif

#if (SERCOMS_COUNT >= 6)
	
	void SERCOM5_Handler()
	{
    14b0:	b580      	push	{r7, lr}
    14b2:	b086      	sub	sp, #24
    14b4:	af00      	add	r7, sp, #0
		uint32_t flags;
		uint8_t byte;
		SercomPort_t *port = &_sercomPorts[5];
    14b6:	4b50      	ldr	r3, [pc, #320]	; (15f8 <SERCOM5_Handler+0x148>)
    14b8:	617b      	str	r3, [r7, #20]

		switch(port->SercomType)
    14ba:	697b      	ldr	r3, [r7, #20]
    14bc:	781b      	ldrb	r3, [r3, #0]
    14be:	2b01      	cmp	r3, #1
    14c0:	d004      	beq.n	14cc <SERCOM5_Handler+0x1c>
    14c2:	dc00      	bgt.n	14c6 <SERCOM5_Handler+0x16>
    14c4:	e08e      	b.n	15e4 <SERCOM5_Handler+0x134>
    14c6:	2b02      	cmp	r3, #2
    14c8:	d03b      	beq.n	1542 <SERCOM5_Handler+0x92>
					*port->RxIndex += 1;
				}
			}break;
			
			case SERCOM_I2C :
			break;
    14ca:	e090      	b.n	15ee <SERCOM5_Handler+0x13e>
				flags = SERCOM5->USART.INTFLAG.reg;
    14cc:	4b4b      	ldr	r3, [pc, #300]	; (15fc <SERCOM5_Handler+0x14c>)
    14ce:	7e1b      	ldrb	r3, [r3, #24]
    14d0:	b2db      	uxtb	r3, r3
    14d2:	613b      	str	r3, [r7, #16]
				if(flags & SERCOM_USART_INTFLAG_RXC)
    14d4:	693b      	ldr	r3, [r7, #16]
    14d6:	2204      	movs	r2, #4
    14d8:	4013      	ands	r3, r2
    14da:	d100      	bne.n	14de <SERCOM5_Handler+0x2e>
    14dc:	e084      	b.n	15e8 <SERCOM5_Handler+0x138>
					byte = SERCOM5->USART.DATA.reg;
    14de:	4b47      	ldr	r3, [pc, #284]	; (15fc <SERCOM5_Handler+0x14c>)
    14e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    14e2:	b29a      	uxth	r2, r3
    14e4:	230f      	movs	r3, #15
    14e6:	18fb      	adds	r3, r7, r3
    14e8:	701a      	strb	r2, [r3, #0]
					FIFO_WriteByte((FifoBuffer_t*)port->RxBuffer, byte);
    14ea:	697b      	ldr	r3, [r7, #20]
    14ec:	691b      	ldr	r3, [r3, #16]
    14ee:	60bb      	str	r3, [r7, #8]
    14f0:	1dfb      	adds	r3, r7, #7
    14f2:	220f      	movs	r2, #15
    14f4:	18ba      	adds	r2, r7, r2
    14f6:	7812      	ldrb	r2, [r2, #0]
    14f8:	701a      	strb	r2, [r3, #0]
	if(fifo->state == BUFFER_FULL)
    14fa:	68bb      	ldr	r3, [r7, #8]
    14fc:	781b      	ldrb	r3, [r3, #0]
    14fe:	2b02      	cmp	r3, #2
    1500:	d100      	bne.n	1504 <SERCOM5_Handler+0x54>
    1502:	e071      	b.n	15e8 <SERCOM5_Handler+0x138>
	fifo->dataPointer[fifo->dataHead++] = data;
    1504:	68bb      	ldr	r3, [r7, #8]
    1506:	689a      	ldr	r2, [r3, #8]
    1508:	68bb      	ldr	r3, [r7, #8]
    150a:	889b      	ldrh	r3, [r3, #4]
    150c:	1c59      	adds	r1, r3, #1
    150e:	b288      	uxth	r0, r1
    1510:	68b9      	ldr	r1, [r7, #8]
    1512:	8088      	strh	r0, [r1, #4]
    1514:	18d3      	adds	r3, r2, r3
    1516:	1dfa      	adds	r2, r7, #7
    1518:	7812      	ldrb	r2, [r2, #0]
    151a:	701a      	strb	r2, [r3, #0]
	if(fifo->dataHead >= fifo->dataSize)
    151c:	68bb      	ldr	r3, [r7, #8]
    151e:	889a      	ldrh	r2, [r3, #4]
    1520:	68bb      	ldr	r3, [r7, #8]
    1522:	885b      	ldrh	r3, [r3, #2]
    1524:	429a      	cmp	r2, r3
    1526:	d302      	bcc.n	152e <SERCOM5_Handler+0x7e>
		fifo->dataHead = 0;
    1528:	68bb      	ldr	r3, [r7, #8]
    152a:	2200      	movs	r2, #0
    152c:	809a      	strh	r2, [r3, #4]
	if(fifo->dataHead == fifo->dataTail)
    152e:	68bb      	ldr	r3, [r7, #8]
    1530:	889a      	ldrh	r2, [r3, #4]
    1532:	68bb      	ldr	r3, [r7, #8]
    1534:	88db      	ldrh	r3, [r3, #6]
    1536:	429a      	cmp	r2, r3
    1538:	d156      	bne.n	15e8 <SERCOM5_Handler+0x138>
		fifo->state = BUFFER_FULL;
    153a:	68bb      	ldr	r3, [r7, #8]
    153c:	2202      	movs	r2, #2
    153e:	701a      	strb	r2, [r3, #0]
			}break;
    1540:	e052      	b.n	15e8 <SERCOM5_Handler+0x138>
				flags = SERCOM5->SPI.INTFLAG.reg;
    1542:	4b2e      	ldr	r3, [pc, #184]	; (15fc <SERCOM5_Handler+0x14c>)
    1544:	7e1b      	ldrb	r3, [r3, #24]
    1546:	b2db      	uxtb	r3, r3
    1548:	613b      	str	r3, [r7, #16]
					SERCOM_CS_MOD
    154a:	693b      	ldr	r3, [r7, #16]
    154c:	2202      	movs	r2, #2
    154e:	4013      	ands	r3, r2
    1550:	d00b      	beq.n	156a <SERCOM5_Handler+0xba>
    1552:	697b      	ldr	r3, [r7, #20]
    1554:	689b      	ldr	r3, [r3, #8]
    1556:	881a      	ldrh	r2, [r3, #0]
    1558:	697b      	ldr	r3, [r7, #20]
    155a:	68db      	ldr	r3, [r3, #12]
    155c:	881b      	ldrh	r3, [r3, #0]
    155e:	429a      	cmp	r2, r3
    1560:	d103      	bne.n	156a <SERCOM5_Handler+0xba>
    1562:	4a27      	ldr	r2, [pc, #156]	; (1600 <SERCOM5_Handler+0x150>)
    1564:	2398      	movs	r3, #152	; 0x98
    1566:	2110      	movs	r1, #16
    1568:	50d1      	str	r1, [r2, r3]
				if(flags & SERCOM_SPI_INTFLAG_DRE) //Master Tx Send
    156a:	693b      	ldr	r3, [r7, #16]
    156c:	2201      	movs	r2, #1
    156e:	4013      	ands	r3, r2
    1570:	d01c      	beq.n	15ac <SERCOM5_Handler+0xfc>
					if(*port->TxIndex < *port->TxSize)
    1572:	697b      	ldr	r3, [r7, #20]
    1574:	689b      	ldr	r3, [r3, #8]
    1576:	881a      	ldrh	r2, [r3, #0]
    1578:	697b      	ldr	r3, [r7, #20]
    157a:	68db      	ldr	r3, [r3, #12]
    157c:	881b      	ldrh	r3, [r3, #0]
    157e:	429a      	cmp	r2, r3
    1580:	d211      	bcs.n	15a6 <SERCOM5_Handler+0xf6>
						SERCOM5->SPI.DATA.reg = port->TxBuffer[ *port->TxIndex ];
    1582:	4a1e      	ldr	r2, [pc, #120]	; (15fc <SERCOM5_Handler+0x14c>)
    1584:	697b      	ldr	r3, [r7, #20]
    1586:	6859      	ldr	r1, [r3, #4]
    1588:	697b      	ldr	r3, [r7, #20]
    158a:	689b      	ldr	r3, [r3, #8]
    158c:	881b      	ldrh	r3, [r3, #0]
    158e:	18cb      	adds	r3, r1, r3
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	6293      	str	r3, [r2, #40]	; 0x28
						*port->TxIndex += 1;
    1594:	697b      	ldr	r3, [r7, #20]
    1596:	689a      	ldr	r2, [r3, #8]
    1598:	697b      	ldr	r3, [r7, #20]
    159a:	689b      	ldr	r3, [r3, #8]
    159c:	881b      	ldrh	r3, [r3, #0]
    159e:	3301      	adds	r3, #1
    15a0:	b29b      	uxth	r3, r3
    15a2:	8013      	strh	r3, [r2, #0]
    15a4:	e002      	b.n	15ac <SERCOM5_Handler+0xfc>
					SERCOM5->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    15a6:	4b15      	ldr	r3, [pc, #84]	; (15fc <SERCOM5_Handler+0x14c>)
    15a8:	2201      	movs	r2, #1
    15aa:	751a      	strb	r2, [r3, #20]
				if(flags & SERCOM_SPI_INTFLAG_RXC)
    15ac:	693b      	ldr	r3, [r7, #16]
    15ae:	2204      	movs	r2, #4
    15b0:	4013      	ands	r3, r2
    15b2:	d01b      	beq.n	15ec <SERCOM5_Handler+0x13c>
					byte = SERCOM5->SPI.DATA.reg;
    15b4:	4b11      	ldr	r3, [pc, #68]	; (15fc <SERCOM5_Handler+0x14c>)
    15b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15b8:	230f      	movs	r3, #15
    15ba:	18fb      	adds	r3, r7, r3
    15bc:	701a      	strb	r2, [r3, #0]
					port->RxBuffer[ *port->RxIndex ] = byte;
    15be:	697b      	ldr	r3, [r7, #20]
    15c0:	691a      	ldr	r2, [r3, #16]
    15c2:	697b      	ldr	r3, [r7, #20]
    15c4:	695b      	ldr	r3, [r3, #20]
    15c6:	881b      	ldrh	r3, [r3, #0]
    15c8:	18d3      	adds	r3, r2, r3
    15ca:	220f      	movs	r2, #15
    15cc:	18ba      	adds	r2, r7, r2
    15ce:	7812      	ldrb	r2, [r2, #0]
    15d0:	701a      	strb	r2, [r3, #0]
					*port->RxIndex += 1;
    15d2:	697b      	ldr	r3, [r7, #20]
    15d4:	695a      	ldr	r2, [r3, #20]
    15d6:	697b      	ldr	r3, [r7, #20]
    15d8:	695b      	ldr	r3, [r3, #20]
    15da:	881b      	ldrh	r3, [r3, #0]
    15dc:	3301      	adds	r3, #1
    15de:	b29b      	uxth	r3, r3
    15e0:	8013      	strh	r3, [r2, #0]
			}break;
    15e2:	e003      	b.n	15ec <SERCOM5_Handler+0x13c>
			break;
    15e4:	46c0      	nop			; (mov r8, r8)
    15e6:	e002      	b.n	15ee <SERCOM5_Handler+0x13e>
			}break;
    15e8:	46c0      	nop			; (mov r8, r8)
    15ea:	e000      	b.n	15ee <SERCOM5_Handler+0x13e>
			}break;
    15ec:	46c0      	nop			; (mov r8, r8)
		}
	}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	46bd      	mov	sp, r7
    15f2:	b006      	add	sp, #24
    15f4:	bd80      	pop	{r7, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	20000760 	.word	0x20000760
    15fc:	42001800 	.word	0x42001800
    1600:	41006000 	.word	0x41006000

00001604 <FIFO_GetUsedSize>:
}

/*Returns the amount of bytes used/full in the fifo buffer*/
/*Pass in pointer to fifo obj*/
uint16_t FIFO_GetUsedSize(FifoBuffer_t *fifo)
{
    1604:	b580      	push	{r7, lr}
    1606:	b084      	sub	sp, #16
    1608:	af00      	add	r7, sp, #0
    160a:	6078      	str	r0, [r7, #4]
	/*Initilze if not Initilized*/
	if(!fifo->state)
    160c:	687b      	ldr	r3, [r7, #4]
    160e:	781b      	ldrb	r3, [r3, #0]
    1610:	2b00      	cmp	r3, #0
    1612:	d103      	bne.n	161c <FIFO_GetUsedSize+0x18>
		fifo_init(fifo);
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	0018      	movs	r0, r3
    1618:	4b1c      	ldr	r3, [pc, #112]	; (168c <FIFO_GetUsedSize+0x88>)
    161a:	4798      	blx	r3

	uint16_t usedSize;

	if(fifo->state == BUFFER_FULL)
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	781b      	ldrb	r3, [r3, #0]
    1620:	2b02      	cmp	r3, #2
    1622:	d105      	bne.n	1630 <FIFO_GetUsedSize+0x2c>
		usedSize = fifo->dataSize;
    1624:	230e      	movs	r3, #14
    1626:	18fb      	adds	r3, r7, r3
    1628:	687a      	ldr	r2, [r7, #4]
    162a:	8852      	ldrh	r2, [r2, #2]
    162c:	801a      	strh	r2, [r3, #0]
    162e:	e025      	b.n	167c <FIFO_GetUsedSize+0x78>
	else if(fifo->dataHead > fifo->dataTail)
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	889a      	ldrh	r2, [r3, #4]
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	88db      	ldrh	r3, [r3, #6]
    1638:	429a      	cmp	r2, r3
    163a:	d908      	bls.n	164e <FIFO_GetUsedSize+0x4a>
		usedSize = fifo->dataHead - fifo->dataTail;
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	8899      	ldrh	r1, [r3, #4]
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	88da      	ldrh	r2, [r3, #6]
    1644:	230e      	movs	r3, #14
    1646:	18fb      	adds	r3, r7, r3
    1648:	1a8a      	subs	r2, r1, r2
    164a:	801a      	strh	r2, [r3, #0]
    164c:	e016      	b.n	167c <FIFO_GetUsedSize+0x78>
	else if(fifo->dataHead < fifo->dataTail)
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	889a      	ldrh	r2, [r3, #4]
    1652:	687b      	ldr	r3, [r7, #4]
    1654:	88db      	ldrh	r3, [r3, #6]
    1656:	429a      	cmp	r2, r3
    1658:	d20c      	bcs.n	1674 <FIFO_GetUsedSize+0x70>
		usedSize = (fifo->dataSize - fifo->dataTail) + fifo->dataHead;
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	885a      	ldrh	r2, [r3, #2]
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	88db      	ldrh	r3, [r3, #6]
    1662:	1ad3      	subs	r3, r2, r3
    1664:	b299      	uxth	r1, r3
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	889a      	ldrh	r2, [r3, #4]
    166a:	230e      	movs	r3, #14
    166c:	18fb      	adds	r3, r7, r3
    166e:	188a      	adds	r2, r1, r2
    1670:	801a      	strh	r2, [r3, #0]
    1672:	e003      	b.n	167c <FIFO_GetUsedSize+0x78>
	else
		usedSize = 0;
    1674:	230e      	movs	r3, #14
    1676:	18fb      	adds	r3, r7, r3
    1678:	2200      	movs	r2, #0
    167a:	801a      	strh	r2, [r3, #0]

	return usedSize;
    167c:	230e      	movs	r3, #14
    167e:	18fb      	adds	r3, r7, r3
    1680:	881b      	ldrh	r3, [r3, #0]
}
    1682:	0018      	movs	r0, r3
    1684:	46bd      	mov	sp, r7
    1686:	b004      	add	sp, #16
    1688:	bd80      	pop	{r7, pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	00001729 	.word	0x00001729

00001690 <FIFO_ClearBuffer>:
	return dataSize;
}

//If EraseSize is 0, then it will clear the whole buffer.
void FIFO_ClearBuffer(FifoBuffer_t *fifo, uint16_t eraseSize)
{
    1690:	b580      	push	{r7, lr}
    1692:	b082      	sub	sp, #8
    1694:	af00      	add	r7, sp, #0
    1696:	6078      	str	r0, [r7, #4]
    1698:	000a      	movs	r2, r1
    169a:	1cbb      	adds	r3, r7, #2
    169c:	801a      	strh	r2, [r3, #0]
	/*Initilze if not Initilized*/
	if(!fifo->state)
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	781b      	ldrb	r3, [r3, #0]
    16a2:	2b00      	cmp	r3, #0
    16a4:	d103      	bne.n	16ae <FIFO_ClearBuffer+0x1e>
		fifo_init(fifo);
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	0018      	movs	r0, r3
    16aa:	4b1d      	ldr	r3, [pc, #116]	; (1720 <FIFO_ClearBuffer+0x90>)
    16ac:	4798      	blx	r3

	if(!eraseSize || eraseSize >= FIFO_GetUsedSize(fifo))
    16ae:	1cbb      	adds	r3, r7, #2
    16b0:	881b      	ldrh	r3, [r3, #0]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d009      	beq.n	16ca <FIFO_ClearBuffer+0x3a>
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	0018      	movs	r0, r3
    16ba:	4b1a      	ldr	r3, [pc, #104]	; (1724 <FIFO_ClearBuffer+0x94>)
    16bc:	4798      	blx	r3
    16be:	0003      	movs	r3, r0
    16c0:	001a      	movs	r2, r3
    16c2:	1cbb      	adds	r3, r7, #2
    16c4:	881b      	ldrh	r3, [r3, #0]
    16c6:	4293      	cmp	r3, r2
    16c8:	d304      	bcc.n	16d4 <FIFO_ClearBuffer+0x44>
		fifo->dataTail = fifo->dataHead;
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	889a      	ldrh	r2, [r3, #4]
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	80da      	strh	r2, [r3, #6]
    16d2:	e01e      	b.n	1712 <FIFO_ClearBuffer+0x82>

	else if((fifo->dataTail + eraseSize) < fifo->dataSize)
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	88db      	ldrh	r3, [r3, #6]
    16d8:	001a      	movs	r2, r3
    16da:	1cbb      	adds	r3, r7, #2
    16dc:	881b      	ldrh	r3, [r3, #0]
    16de:	18d3      	adds	r3, r2, r3
    16e0:	687a      	ldr	r2, [r7, #4]
    16e2:	8852      	ldrh	r2, [r2, #2]
    16e4:	4293      	cmp	r3, r2
    16e6:	da08      	bge.n	16fa <FIFO_ClearBuffer+0x6a>
		fifo->dataTail += eraseSize;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	88da      	ldrh	r2, [r3, #6]
    16ec:	1cbb      	adds	r3, r7, #2
    16ee:	881b      	ldrh	r3, [r3, #0]
    16f0:	18d3      	adds	r3, r2, r3
    16f2:	b29a      	uxth	r2, r3
    16f4:	687b      	ldr	r3, [r7, #4]
    16f6:	80da      	strh	r2, [r3, #6]
    16f8:	e00b      	b.n	1712 <FIFO_ClearBuffer+0x82>

	else
		fifo->dataTail = eraseSize - (fifo->dataSize - fifo->dataTail);
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	88da      	ldrh	r2, [r3, #6]
    16fe:	687b      	ldr	r3, [r7, #4]
    1700:	885b      	ldrh	r3, [r3, #2]
    1702:	1ad3      	subs	r3, r2, r3
    1704:	b29a      	uxth	r2, r3
    1706:	1cbb      	adds	r3, r7, #2
    1708:	881b      	ldrh	r3, [r3, #0]
    170a:	18d3      	adds	r3, r2, r3
    170c:	b29a      	uxth	r2, r3
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	80da      	strh	r2, [r3, #6]

	fifo->state = INITILIZED;
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	2201      	movs	r2, #1
    1716:	701a      	strb	r2, [r3, #0]
}
    1718:	46c0      	nop			; (mov r8, r8)
    171a:	46bd      	mov	sp, r7
    171c:	b002      	add	sp, #8
    171e:	bd80      	pop	{r7, pc}
    1720:	00001729 	.word	0x00001729
    1724:	00001605 	.word	0x00001605

00001728 <fifo_init>:
		return &fifo->dataPointer[(fifo->dataTail + offset) - fifo->dataSize];
	}
}

static void fifo_init(FifoBuffer_t *fifo)
{
    1728:	b580      	push	{r7, lr}
    172a:	b082      	sub	sp, #8
    172c:	af00      	add	r7, sp, #0
    172e:	6078      	str	r0, [r7, #4]
	fifo->state = INITILIZED;
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	2201      	movs	r2, #1
    1734:	701a      	strb	r2, [r3, #0]
	fifo->dataHead = 0;
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	2200      	movs	r2, #0
    173a:	809a      	strh	r2, [r3, #4]
	fifo->dataTail = 0;
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	2200      	movs	r2, #0
    1740:	80da      	strh	r2, [r3, #6]
}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	46bd      	mov	sp, r7
    1746:	b002      	add	sp, #8
    1748:	bd80      	pop	{r7, pc}
	...

0000174c <NVIC_EnableIRQ>:
{
    174c:	b580      	push	{r7, lr}
    174e:	b082      	sub	sp, #8
    1750:	af00      	add	r7, sp, #0
    1752:	0002      	movs	r2, r0
    1754:	1dfb      	adds	r3, r7, #7
    1756:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1758:	4b06      	ldr	r3, [pc, #24]	; (1774 <NVIC_EnableIRQ+0x28>)
    175a:	1dfa      	adds	r2, r7, #7
    175c:	7812      	ldrb	r2, [r2, #0]
    175e:	0011      	movs	r1, r2
    1760:	221f      	movs	r2, #31
    1762:	400a      	ands	r2, r1
    1764:	2101      	movs	r1, #1
    1766:	4091      	lsls	r1, r2
    1768:	000a      	movs	r2, r1
    176a:	601a      	str	r2, [r3, #0]
}
    176c:	46c0      	nop			; (mov r8, r8)
    176e:	46bd      	mov	sp, r7
    1770:	b002      	add	sp, #8
    1772:	bd80      	pop	{r7, pc}
    1774:	e000e100 	.word	0xe000e100

00001778 <TIMER_Start>:
//Starts a new timer. If it is the first time starting the timer, it will initialize it
//*timer is a pointer to a timer
//timeout is the desired timeout value (1 = 1ms)
//*callback is a pointer to callback function
void TIMER_Start(Timer_t *timer, uint32_t timeout, uint8_t repeat, uint8_t *callback)
{
    1778:	b580      	push	{r7, lr}
    177a:	b084      	sub	sp, #16
    177c:	af00      	add	r7, sp, #0
    177e:	60f8      	str	r0, [r7, #12]
    1780:	60b9      	str	r1, [r7, #8]
    1782:	603b      	str	r3, [r7, #0]
    1784:	1dfb      	adds	r3, r7, #7
    1786:	701a      	strb	r2, [r3, #0]
	if(!_initlilized)
    1788:	4b13      	ldr	r3, [pc, #76]	; (17d8 <TIMER_Start+0x60>)
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	2b00      	cmp	r3, #0
    178e:	d101      	bne.n	1794 <TIMER_Start+0x1c>
		timer_initMcu();
    1790:	4b12      	ldr	r3, [pc, #72]	; (17dc <TIMER_Start+0x64>)
    1792:	4798      	blx	r3

	timer_addTimer(timer);
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	0018      	movs	r0, r3
    1798:	4b11      	ldr	r3, [pc, #68]	; (17e0 <TIMER_Start+0x68>)
    179a:	4798      	blx	r3

	timer->timeout = timeout;
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	68ba      	ldr	r2, [r7, #8]
    17a0:	605a      	str	r2, [r3, #4]
	timer->callbackFunction = callback;
    17a2:	68fb      	ldr	r3, [r7, #12]
    17a4:	683a      	ldr	r2, [r7, #0]
    17a6:	60da      	str	r2, [r3, #12]
	timer->state = TIMER_RUNNING;
    17a8:	68fb      	ldr	r3, [r7, #12]
    17aa:	2201      	movs	r2, #1
    17ac:	701a      	strb	r2, [r3, #0]

	timer->repeatTimeout = repeat ? timeout : 0;
    17ae:	1dfb      	adds	r3, r7, #7
    17b0:	781b      	ldrb	r3, [r3, #0]
    17b2:	2b00      	cmp	r3, #0
    17b4:	d001      	beq.n	17ba <TIMER_Start+0x42>
    17b6:	68ba      	ldr	r2, [r7, #8]
    17b8:	e000      	b.n	17bc <TIMER_Start+0x44>
    17ba:	2200      	movs	r2, #0
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	609a      	str	r2, [r3, #8]

	if(!_hardwareTimerRunning)
    17c0:	4b08      	ldr	r3, [pc, #32]	; (17e4 <TIMER_Start+0x6c>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d102      	bne.n	17ce <TIMER_Start+0x56>
		timer_hardwareTimerEnable(TRUE);
    17c8:	2001      	movs	r0, #1
    17ca:	4b07      	ldr	r3, [pc, #28]	; (17e8 <TIMER_Start+0x70>)
    17cc:	4798      	blx	r3
}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	46bd      	mov	sp, r7
    17d2:	b004      	add	sp, #16
    17d4:	bd80      	pop	{r7, pc}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	2000077c 	.word	0x2000077c
    17dc:	0000188d 	.word	0x0000188d
    17e0:	000017ed 	.word	0x000017ed
    17e4:	2000077d 	.word	0x2000077d
    17e8:	00001901 	.word	0x00001901

000017ec <timer_addTimer>:
	else
		return FALSE;
}

static void timer_addTimer(Timer_t *timer)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	b084      	sub	sp, #16
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
	if(timer_exists(timer))
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	0018      	movs	r0, r3
    17f8:	4b10      	ldr	r3, [pc, #64]	; (183c <timer_addTimer+0x50>)
    17fa:	4798      	blx	r3
    17fc:	1e03      	subs	r3, r0, #0
    17fe:	d118      	bne.n	1832 <timer_addTimer+0x46>
		return;

	timer->nextTimer = NULL;
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	2200      	movs	r2, #0
    1804:	611a      	str	r2, [r3, #16]

	Timer_t *t = _firstTimer;
    1806:	4b0e      	ldr	r3, [pc, #56]	; (1840 <timer_addTimer+0x54>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	60fb      	str	r3, [r7, #12]

	if(t)
    180c:	68fb      	ldr	r3, [r7, #12]
    180e:	2b00      	cmp	r3, #0
    1810:	d00b      	beq.n	182a <timer_addTimer+0x3e>
	{
		while(t->nextTimer)
    1812:	e002      	b.n	181a <timer_addTimer+0x2e>
			t = (Timer_t*)t->nextTimer;
    1814:	68fb      	ldr	r3, [r7, #12]
    1816:	691b      	ldr	r3, [r3, #16]
    1818:	60fb      	str	r3, [r7, #12]
		while(t->nextTimer)
    181a:	68fb      	ldr	r3, [r7, #12]
    181c:	691b      	ldr	r3, [r3, #16]
    181e:	2b00      	cmp	r3, #0
    1820:	d1f8      	bne.n	1814 <timer_addTimer+0x28>

		t->nextTimer = (uint8_t*)timer;
    1822:	68fb      	ldr	r3, [r7, #12]
    1824:	687a      	ldr	r2, [r7, #4]
    1826:	611a      	str	r2, [r3, #16]
    1828:	e004      	b.n	1834 <timer_addTimer+0x48>
	}
	else 
		_firstTimer = timer;
    182a:	4b05      	ldr	r3, [pc, #20]	; (1840 <timer_addTimer+0x54>)
    182c:	687a      	ldr	r2, [r7, #4]
    182e:	601a      	str	r2, [r3, #0]
    1830:	e000      	b.n	1834 <timer_addTimer+0x48>
		return;
    1832:	46c0      	nop			; (mov r8, r8)
}
    1834:	46bd      	mov	sp, r7
    1836:	b004      	add	sp, #16
    1838:	bd80      	pop	{r7, pc}
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	00001845 	.word	0x00001845
    1840:	20000780 	.word	0x20000780

00001844 <timer_exists>:

static uint8_t timer_exists(Timer_t *timer)
{
    1844:	b580      	push	{r7, lr}
    1846:	b084      	sub	sp, #16
    1848:	af00      	add	r7, sp, #0
    184a:	6078      	str	r0, [r7, #4]
	Timer_t *t = _firstTimer;
    184c:	4b0e      	ldr	r3, [pc, #56]	; (1888 <timer_exists+0x44>)
    184e:	681b      	ldr	r3, [r3, #0]
    1850:	60fb      	str	r3, [r7, #12]

	if(t)
    1852:	68fb      	ldr	r3, [r7, #12]
    1854:	2b00      	cmp	r3, #0
    1856:	d011      	beq.n	187c <timer_exists+0x38>
	{
		if(t == timer)
    1858:	68fa      	ldr	r2, [r7, #12]
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	429a      	cmp	r2, r3
    185e:	d10a      	bne.n	1876 <timer_exists+0x32>
			return TRUE;
    1860:	2301      	movs	r3, #1
    1862:	e00c      	b.n	187e <timer_exists+0x3a>
		for(; t ; t = (Timer_t*)t->nextTimer)
		{
			if(t == timer)
    1864:	68fa      	ldr	r2, [r7, #12]
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	429a      	cmp	r2, r3
    186a:	d101      	bne.n	1870 <timer_exists+0x2c>
				return TRUE;
    186c:	2301      	movs	r3, #1
    186e:	e006      	b.n	187e <timer_exists+0x3a>
		for(; t ; t = (Timer_t*)t->nextTimer)
    1870:	68fb      	ldr	r3, [r7, #12]
    1872:	691b      	ldr	r3, [r3, #16]
    1874:	60fb      	str	r3, [r7, #12]
    1876:	68fb      	ldr	r3, [r7, #12]
    1878:	2b00      	cmp	r3, #0
    187a:	d1f3      	bne.n	1864 <timer_exists+0x20>
		}
	}

	return FALSE;
    187c:	2300      	movs	r3, #0
}
    187e:	0018      	movs	r0, r3
    1880:	46bd      	mov	sp, r7
    1882:	b004      	add	sp, #16
    1884:	bd80      	pop	{r7, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	20000780 	.word	0x20000780

0000188c <timer_initMcu>:
	}

#elif defined(MCU_SAML22)

	static void timer_initMcu(void)
	{
    188c:	b580      	push	{r7, lr}
    188e:	af00      	add	r7, sp, #0
		//Turn CLK on to CPU Sync software Timer module
		MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC0;
    1890:	4b16      	ldr	r3, [pc, #88]	; (18ec <timer_initMcu+0x60>)
    1892:	4a16      	ldr	r2, [pc, #88]	; (18ec <timer_initMcu+0x60>)
    1894:	69d2      	ldr	r2, [r2, #28]
    1896:	2180      	movs	r1, #128	; 0x80
    1898:	0049      	lsls	r1, r1, #1
    189a:	430a      	orrs	r2, r1
    189c:	61da      	str	r2, [r3, #28]
		
		//Supply Clock to Timer Module 0
		GCLK->PCHCTRL[TC0_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    189e:	4a14      	ldr	r2, [pc, #80]	; (18f0 <timer_initMcu+0x64>)
    18a0:	23dc      	movs	r3, #220	; 0xdc
    18a2:	2140      	movs	r1, #64	; 0x40
    18a4:	50d1      	str	r1, [r2, r3]
		
		while(!GCLK->PCHCTRL[TC0_GCLK_ID].bit.CHEN);
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	4a11      	ldr	r2, [pc, #68]	; (18f0 <timer_initMcu+0x64>)
    18aa:	23dc      	movs	r3, #220	; 0xdc
    18ac:	58d3      	ldr	r3, [r2, r3]
    18ae:	065b      	lsls	r3, r3, #25
    18b0:	0fdb      	lsrs	r3, r3, #31
    18b2:	b2db      	uxtb	r3, r3
    18b4:	2b00      	cmp	r3, #0
    18b6:	d0f7      	beq.n	18a8 <timer_initMcu+0x1c>

		//Setup Timer to source from GCLK 0 with 64 prescaler
		TC0->COUNT16.CTRLA.reg = TC_CTRLA_PRESCSYNC_RESYNC | TC_CTRLA_PRESCALER_DIV64 | TC_CTRLA_MODE_COUNT16;
    18b8:	4b0e      	ldr	r3, [pc, #56]	; (18f4 <timer_initMcu+0x68>)
    18ba:	22a4      	movs	r2, #164	; 0xa4
    18bc:	00d2      	lsls	r2, r2, #3
    18be:	601a      	str	r2, [r3, #0]

		//Setup MFRQ
		TC0->COUNT16.WAVE.reg |= TC_WAVE_WAVEGEN_MFRQ;
    18c0:	4a0c      	ldr	r2, [pc, #48]	; (18f4 <timer_initMcu+0x68>)
    18c2:	4b0c      	ldr	r3, [pc, #48]	; (18f4 <timer_initMcu+0x68>)
    18c4:	7b1b      	ldrb	r3, [r3, #12]
    18c6:	b2db      	uxtb	r3, r3
    18c8:	2101      	movs	r1, #1
    18ca:	430b      	orrs	r3, r1
    18cc:	b2db      	uxtb	r3, r3
    18ce:	7313      	strb	r3, [r2, #12]

		//Enable Interrupt
		TC0->COUNT16.INTENSET.bit.MC0 = TRUE;
    18d0:	4a08      	ldr	r2, [pc, #32]	; (18f4 <timer_initMcu+0x68>)
    18d2:	7a53      	ldrb	r3, [r2, #9]
    18d4:	2110      	movs	r1, #16
    18d6:	430b      	orrs	r3, r1
    18d8:	7253      	strb	r3, [r2, #9]
		NVIC_EnableIRQ(TC0_IRQn);
    18da:	2010      	movs	r0, #16
    18dc:	4b06      	ldr	r3, [pc, #24]	; (18f8 <timer_initMcu+0x6c>)
    18de:	4798      	blx	r3

		_initlilized = TRUE;
    18e0:	4b06      	ldr	r3, [pc, #24]	; (18fc <timer_initMcu+0x70>)
    18e2:	2201      	movs	r2, #1
    18e4:	701a      	strb	r2, [r3, #0]
	}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	46bd      	mov	sp, r7
    18ea:	bd80      	pop	{r7, pc}
    18ec:	40000800 	.word	0x40000800
    18f0:	40001c00 	.word	0x40001c00
    18f4:	42002000 	.word	0x42002000
    18f8:	0000174d 	.word	0x0000174d
    18fc:	2000077c 	.word	0x2000077c

00001900 <timer_hardwareTimerEnable>:
#else
	#warning Input Library - No Valid MCU Defined
#endif

static void timer_hardwareTimerEnable(uint8_t enable)
{
    1900:	b580      	push	{r7, lr}
    1902:	b082      	sub	sp, #8
    1904:	af00      	add	r7, sp, #0
    1906:	0002      	movs	r2, r0
    1908:	1dfb      	adds	r3, r7, #7
    190a:	701a      	strb	r2, [r3, #0]
	//Enable Timer
	TC0->COUNT16.CTRLA.bit.ENABLE = FALSE;
    190c:	4a0f      	ldr	r2, [pc, #60]	; (194c <timer_hardwareTimerEnable+0x4c>)
    190e:	6813      	ldr	r3, [r2, #0]
    1910:	2102      	movs	r1, #2
    1912:	438b      	bics	r3, r1
    1914:	6013      	str	r3, [r2, #0]

	//Set Timing

	TC0->COUNT16.CC[0].reg = (CPU_SPEED / 64) / 100; //10ms
    1916:	4b0d      	ldr	r3, [pc, #52]	; (194c <timer_hardwareTimerEnable+0x4c>)
    1918:	4a0d      	ldr	r2, [pc, #52]	; (1950 <timer_hardwareTimerEnable+0x50>)
    191a:	839a      	strh	r2, [r3, #28]
	TC0->COUNT16.COUNT.reg = 0;
    191c:	4b0b      	ldr	r3, [pc, #44]	; (194c <timer_hardwareTimerEnable+0x4c>)
    191e:	2200      	movs	r2, #0
    1920:	829a      	strh	r2, [r3, #20]
	_timerFlags = 0;
    1922:	4b0c      	ldr	r3, [pc, #48]	; (1954 <timer_hardwareTimerEnable+0x54>)
    1924:	2200      	movs	r2, #0
    1926:	701a      	strb	r2, [r3, #0]

	_hardwareTimerRunning = enable;
    1928:	4b0b      	ldr	r3, [pc, #44]	; (1958 <timer_hardwareTimerEnable+0x58>)
    192a:	1dfa      	adds	r2, r7, #7
    192c:	7812      	ldrb	r2, [r2, #0]
    192e:	701a      	strb	r2, [r3, #0]

	if(enable) //Enable Timer
    1930:	1dfb      	adds	r3, r7, #7
    1932:	781b      	ldrb	r3, [r3, #0]
    1934:	2b00      	cmp	r3, #0
    1936:	d004      	beq.n	1942 <timer_hardwareTimerEnable+0x42>
		TC0->COUNT16.CTRLA.bit.ENABLE = TRUE;
    1938:	4a04      	ldr	r2, [pc, #16]	; (194c <timer_hardwareTimerEnable+0x4c>)
    193a:	6813      	ldr	r3, [r2, #0]
    193c:	2102      	movs	r1, #2
    193e:	430b      	orrs	r3, r1
    1940:	6013      	str	r3, [r2, #0]
}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	46bd      	mov	sp, r7
    1946:	b002      	add	sp, #8
    1948:	bd80      	pop	{r7, pc}
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	42002000 	.word	0x42002000
    1950:	00001388 	.word	0x00001388
    1954:	20000784 	.word	0x20000784
    1958:	2000077d 	.word	0x2000077d

0000195c <TIMER_TaskHandler>:

//=========================================================================
// TaskHandler
//=========================================================================
void TIMER_TaskHandler()
{
    195c:	b580      	push	{r7, lr}
    195e:	b084      	sub	sp, #16
    1960:	af00      	add	r7, sp, #0
	if(!_timerFlags)
    1962:	4b35      	ldr	r3, [pc, #212]	; (1a38 <TIMER_TaskHandler+0xdc>)
    1964:	781b      	ldrb	r3, [r3, #0]
    1966:	b2db      	uxtb	r3, r3
    1968:	2b00      	cmp	r3, #0
    196a:	d060      	beq.n	1a2e <TIMER_TaskHandler+0xd2>
		return;

	Timer_t *t = _firstTimer;
    196c:	4b33      	ldr	r3, [pc, #204]	; (1a3c <TIMER_TaskHandler+0xe0>)
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	60fb      	str	r3, [r7, #12]
	uint8_t timerFlags = _timerFlags;
    1972:	230a      	movs	r3, #10
    1974:	18fb      	adds	r3, r7, r3
    1976:	4a30      	ldr	r2, [pc, #192]	; (1a38 <TIMER_TaskHandler+0xdc>)
    1978:	7812      	ldrb	r2, [r2, #0]
    197a:	701a      	strb	r2, [r3, #0]
	_timerFlags -= timerFlags;
    197c:	4b2e      	ldr	r3, [pc, #184]	; (1a38 <TIMER_TaskHandler+0xdc>)
    197e:	781b      	ldrb	r3, [r3, #0]
    1980:	b2da      	uxtb	r2, r3
    1982:	230a      	movs	r3, #10
    1984:	18fb      	adds	r3, r7, r3
    1986:	781b      	ldrb	r3, [r3, #0]
    1988:	1ad3      	subs	r3, r2, r3
    198a:	b2da      	uxtb	r2, r3
    198c:	4b2a      	ldr	r3, [pc, #168]	; (1a38 <TIMER_TaskHandler+0xdc>)
    198e:	701a      	strb	r2, [r3, #0]
	uint8_t timerCount = 0;
    1990:	230b      	movs	r3, #11
    1992:	18fb      	adds	r3, r7, r3
    1994:	2200      	movs	r2, #0
    1996:	701a      	strb	r2, [r3, #0]

	for(; t; )
    1998:	e03d      	b.n	1a16 <TIMER_TaskHandler+0xba>
	{
		if(t->state == TIMER_RUNNING)
    199a:	68fb      	ldr	r3, [r7, #12]
    199c:	781b      	ldrb	r3, [r3, #0]
    199e:	2b01      	cmp	r3, #1
    19a0:	d136      	bne.n	1a10 <TIMER_TaskHandler+0xb4>
		{
			timerCount++;
    19a2:	230b      	movs	r3, #11
    19a4:	18fb      	adds	r3, r7, r3
    19a6:	781a      	ldrb	r2, [r3, #0]
    19a8:	230b      	movs	r3, #11
    19aa:	18fb      	adds	r3, r7, r3
    19ac:	3201      	adds	r2, #1
    19ae:	701a      	strb	r2, [r3, #0]
			if(t->timeout > (timerFlags * TIMER_MULTIPLIER))
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	6859      	ldr	r1, [r3, #4]
    19b4:	230a      	movs	r3, #10
    19b6:	18fb      	adds	r3, r7, r3
    19b8:	781a      	ldrb	r2, [r3, #0]
    19ba:	0013      	movs	r3, r2
    19bc:	009b      	lsls	r3, r3, #2
    19be:	189b      	adds	r3, r3, r2
    19c0:	005b      	lsls	r3, r3, #1
    19c2:	4299      	cmp	r1, r3
    19c4:	d90c      	bls.n	19e0 <TIMER_TaskHandler+0x84>
				t->timeout -= (timerFlags * TIMER_MULTIPLIER);
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	6859      	ldr	r1, [r3, #4]
    19ca:	230a      	movs	r3, #10
    19cc:	18fb      	adds	r3, r7, r3
    19ce:	781a      	ldrb	r2, [r3, #0]
    19d0:	0013      	movs	r3, r2
    19d2:	009b      	lsls	r3, r3, #2
    19d4:	189b      	adds	r3, r3, r2
    19d6:	005b      	lsls	r3, r3, #1
    19d8:	1aca      	subs	r2, r1, r3
    19da:	68fb      	ldr	r3, [r7, #12]
    19dc:	605a      	str	r2, [r3, #4]
    19de:	e017      	b.n	1a10 <TIMER_TaskHandler+0xb4>
			else
			{
				t->state = TIMER_STOPPED;
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	2202      	movs	r2, #2
    19e4:	701a      	strb	r2, [r3, #0]
				
				timerCallbackFunction callback = (timerCallbackFunction)t->callbackFunction;
    19e6:	68fb      	ldr	r3, [r7, #12]
    19e8:	68db      	ldr	r3, [r3, #12]
    19ea:	607b      	str	r3, [r7, #4]
				if(callback)
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d003      	beq.n	19fa <TIMER_TaskHandler+0x9e>
					callback(t);
    19f2:	68fa      	ldr	r2, [r7, #12]
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	0010      	movs	r0, r2
    19f8:	4798      	blx	r3

				if(t->repeatTimeout)
    19fa:	68fb      	ldr	r3, [r7, #12]
    19fc:	689b      	ldr	r3, [r3, #8]
    19fe:	2b00      	cmp	r3, #0
    1a00:	d006      	beq.n	1a10 <TIMER_TaskHandler+0xb4>
				{
					t->timeout = t->repeatTimeout;
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	689a      	ldr	r2, [r3, #8]
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	605a      	str	r2, [r3, #4]
					t->state = TIMER_RUNNING;
    1a0a:	68fb      	ldr	r3, [r7, #12]
    1a0c:	2201      	movs	r2, #1
    1a0e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		t = (Timer_t*)t->nextTimer;
    1a10:	68fb      	ldr	r3, [r7, #12]
    1a12:	691b      	ldr	r3, [r3, #16]
    1a14:	60fb      	str	r3, [r7, #12]
	for(; t; )
    1a16:	68fb      	ldr	r3, [r7, #12]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d1be      	bne.n	199a <TIMER_TaskHandler+0x3e>
	}

	if(!timerCount)
    1a1c:	230b      	movs	r3, #11
    1a1e:	18fb      	adds	r3, r7, r3
    1a20:	781b      	ldrb	r3, [r3, #0]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d104      	bne.n	1a30 <TIMER_TaskHandler+0xd4>
		timer_hardwareTimerEnable(FALSE);
    1a26:	2000      	movs	r0, #0
    1a28:	4b05      	ldr	r3, [pc, #20]	; (1a40 <TIMER_TaskHandler+0xe4>)
    1a2a:	4798      	blx	r3
    1a2c:	e000      	b.n	1a30 <TIMER_TaskHandler+0xd4>
		return;
    1a2e:	46c0      	nop			; (mov r8, r8)
}
    1a30:	46bd      	mov	sp, r7
    1a32:	b004      	add	sp, #16
    1a34:	bd80      	pop	{r7, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	20000784 	.word	0x20000784
    1a3c:	20000780 	.word	0x20000780
    1a40:	00001901 	.word	0x00001901

00001a44 <TC0_Handler>:

//=========================================================================
// Interrupt
//=========================================================================
void TC0_Handler(void)
{
    1a44:	b580      	push	{r7, lr}
    1a46:	af00      	add	r7, sp, #0
	TC0->COUNT16.INTFLAG.reg |= TC_INTFLAG_MC0 | TC_INTFLAG_MC1 | TC_INTFLAG_OVF;
    1a48:	4a08      	ldr	r2, [pc, #32]	; (1a6c <TC0_Handler+0x28>)
    1a4a:	4b08      	ldr	r3, [pc, #32]	; (1a6c <TC0_Handler+0x28>)
    1a4c:	7a9b      	ldrb	r3, [r3, #10]
    1a4e:	b2db      	uxtb	r3, r3
    1a50:	2131      	movs	r1, #49	; 0x31
    1a52:	430b      	orrs	r3, r1
    1a54:	b2db      	uxtb	r3, r3
    1a56:	7293      	strb	r3, [r2, #10]
	_timerFlags++;
    1a58:	4b05      	ldr	r3, [pc, #20]	; (1a70 <TC0_Handler+0x2c>)
    1a5a:	781b      	ldrb	r3, [r3, #0]
    1a5c:	b2db      	uxtb	r3, r3
    1a5e:	3301      	adds	r3, #1
    1a60:	b2da      	uxtb	r2, r3
    1a62:	4b03      	ldr	r3, [pc, #12]	; (1a70 <TC0_Handler+0x2c>)
    1a64:	701a      	strb	r2, [r3, #0]
}
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	46bd      	mov	sp, r7
    1a6a:	bd80      	pop	{r7, pc}
    1a6c:	42002000 	.word	0x42002000
    1a70:	20000784 	.word	0x20000784

00001a74 <SPI_Init>:

//=========================================================================
// Implementations
//=========================================================================
void SPI_Init(SPI_t *spi)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	6078      	str	r0, [r7, #4]
	if(spi->Initilized)
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	2b00      	cmp	r3, #0
    1a82:	d114      	bne.n	1aae <SPI_Init+0x3a>
		return;

	spi_initMcu(spi);
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	0018      	movs	r0, r3
    1a88:	4b0b      	ldr	r3, [pc, #44]	; (1ab8 <SPI_Init+0x44>)
    1a8a:	4798      	blx	r3

	spi->txSize = 0;
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	4a0b      	ldr	r2, [pc, #44]	; (1abc <SPI_Init+0x48>)
    1a90:	2100      	movs	r1, #0
    1a92:	5299      	strh	r1, [r3, r2]
	spi->txIndex = 0;
    1a94:	687a      	ldr	r2, [r7, #4]
    1a96:	2381      	movs	r3, #129	; 0x81
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	2100      	movs	r1, #0
    1a9c:	52d1      	strh	r1, [r2, r3]
	spi->rxIndex = 0;
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	4a07      	ldr	r2, [pc, #28]	; (1ac0 <SPI_Init+0x4c>)
    1aa2:	2100      	movs	r1, #0
    1aa4:	5299      	strh	r1, [r3, r2]

	spi->Initilized = TRUE;
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	2201      	movs	r2, #1
    1aaa:	701a      	strb	r2, [r3, #0]
    1aac:	e000      	b.n	1ab0 <SPI_Init+0x3c>
		return;
    1aae:	46c0      	nop			; (mov r8, r8)
}
    1ab0:	46bd      	mov	sp, r7
    1ab2:	b002      	add	sp, #8
    1ab4:	bd80      	pop	{r7, pc}
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	00001b81 	.word	0x00001b81
    1abc:	00000202 	.word	0x00000202
    1ac0:	00000206 	.word	0x00000206

00001ac4 <SPI_TxSendChar>:
	for(uint16_t i = 0; i < dataSize; i++)
		SPI_TxSendChar(spi, data[i], FALSE);
}

void SPI_TxSendChar(SPI_t *spi, char c, uint8_t clear)
{
    1ac4:	b580      	push	{r7, lr}
    1ac6:	b082      	sub	sp, #8
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	0008      	movs	r0, r1
    1ace:	0011      	movs	r1, r2
    1ad0:	1cfb      	adds	r3, r7, #3
    1ad2:	1c02      	adds	r2, r0, #0
    1ad4:	701a      	strb	r2, [r3, #0]
    1ad6:	1cbb      	adds	r3, r7, #2
    1ad8:	1c0a      	adds	r2, r1, #0
    1ada:	701a      	strb	r2, [r3, #0]
	if(clear)
    1adc:	1cbb      	adds	r3, r7, #2
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d008      	beq.n	1af6 <SPI_TxSendChar+0x32>
	{
		spi->txIndex = 0;
    1ae4:	687a      	ldr	r2, [r7, #4]
    1ae6:	2381      	movs	r3, #129	; 0x81
    1ae8:	009b      	lsls	r3, r3, #2
    1aea:	2100      	movs	r1, #0
    1aec:	52d1      	strh	r1, [r2, r3]
		spi->txSize = 0;
    1aee:	687b      	ldr	r3, [r7, #4]
    1af0:	4a0a      	ldr	r2, [pc, #40]	; (1b1c <SPI_TxSendChar+0x58>)
    1af2:	2100      	movs	r1, #0
    1af4:	5299      	strh	r1, [r3, r2]
	}

	spi->txBuffer[spi->txSize++] = c;
    1af6:	687b      	ldr	r3, [r7, #4]
    1af8:	4a08      	ldr	r2, [pc, #32]	; (1b1c <SPI_TxSendChar+0x58>)
    1afa:	5a9b      	ldrh	r3, [r3, r2]
    1afc:	1c5a      	adds	r2, r3, #1
    1afe:	b290      	uxth	r0, r2
    1b00:	687a      	ldr	r2, [r7, #4]
    1b02:	4906      	ldr	r1, [pc, #24]	; (1b1c <SPI_TxSendChar+0x58>)
    1b04:	5250      	strh	r0, [r2, r1]
    1b06:	001a      	movs	r2, r3
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	189b      	adds	r3, r3, r2
    1b0c:	1cfa      	adds	r2, r7, #3
    1b0e:	7812      	ldrb	r2, [r2, #0]
    1b10:	739a      	strb	r2, [r3, #14]
}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	46bd      	mov	sp, r7
    1b16:	b002      	add	sp, #8
    1b18:	bd80      	pop	{r7, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	00000202 	.word	0x00000202

00001b20 <SPI_TxMasterTransfer>:

void SPI_TxMasterTransfer(SPI_t *spi)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
	//Pointer to Sercom Port
	SercomSpi *port = SEROM_GetSpiPort(spi->SerialComPort);
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	7b5b      	ldrb	r3, [r3, #13]
    1b2c:	0018      	movs	r0, r3
    1b2e:	4b12      	ldr	r3, [pc, #72]	; (1b78 <SPI_TxMasterTransfer+0x58>)
    1b30:	4798      	blx	r3
    1b32:	0003      	movs	r3, r0
    1b34:	60fb      	str	r3, [r7, #12]

	spi->rxIndex = 0;
    1b36:	687b      	ldr	r3, [r7, #4]
    1b38:	4a10      	ldr	r2, [pc, #64]	; (1b7c <SPI_TxMasterTransfer+0x5c>)
    1b3a:	2100      	movs	r1, #0
    1b3c:	5299      	strh	r1, [r3, r2]

	port->DATA.reg = spi->txBuffer[ spi->txIndex++ ];
    1b3e:	687a      	ldr	r2, [r7, #4]
    1b40:	2381      	movs	r3, #129	; 0x81
    1b42:	009b      	lsls	r3, r3, #2
    1b44:	5ad3      	ldrh	r3, [r2, r3]
    1b46:	1c5a      	adds	r2, r3, #1
    1b48:	b290      	uxth	r0, r2
    1b4a:	6879      	ldr	r1, [r7, #4]
    1b4c:	2281      	movs	r2, #129	; 0x81
    1b4e:	0092      	lsls	r2, r2, #2
    1b50:	5288      	strh	r0, [r1, r2]
    1b52:	001a      	movs	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	189b      	adds	r3, r3, r2
    1b58:	7b9b      	ldrb	r3, [r3, #14]
    1b5a:	001a      	movs	r2, r3
    1b5c:	68fb      	ldr	r3, [r7, #12]
    1b5e:	629a      	str	r2, [r3, #40]	; 0x28
	port->INTENSET.reg |= SERCOM_SPI_INTENSET_DRE;
    1b60:	68fb      	ldr	r3, [r7, #12]
    1b62:	7d9b      	ldrb	r3, [r3, #22]
    1b64:	b2db      	uxtb	r3, r3
    1b66:	2201      	movs	r2, #1
    1b68:	4313      	orrs	r3, r2
    1b6a:	b2da      	uxtb	r2, r3
    1b6c:	68fb      	ldr	r3, [r7, #12]
    1b6e:	759a      	strb	r2, [r3, #22]
}
    1b70:	46c0      	nop			; (mov r8, r8)
    1b72:	46bd      	mov	sp, r7
    1b74:	b004      	add	sp, #16
    1b76:	bd80      	pop	{r7, pc}
    1b78:	00000d89 	.word	0x00000d89
    1b7c:	00000206 	.word	0x00000206

00001b80 <spi_initMcu>:
	}

#elif defined(MCU_SAML22)
	
	static void spi_initMcu(SPI_t *spi)
	{
    1b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b82:	b087      	sub	sp, #28
    1b84:	af02      	add	r7, sp, #8
    1b86:	6078      	str	r0, [r7, #4]
		if(spi->SerialComPort == COMM_TEST)
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	7b5b      	ldrb	r3, [r3, #13]
    1b8c:	2bff      	cmp	r3, #255	; 0xff
    1b8e:	d100      	bne.n	1b92 <spi_initMcu+0x12>
    1b90:	e136      	b.n	1e00 <spi_initMcu+0x280>
			return;

		//Setup MISO
		if(spi->spiMode == SPI_MODE_SLAVE)
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	785b      	ldrb	r3, [r3, #1]
    1b96:	2b01      	cmp	r3, #1
    1b98:	d10c      	bne.n	1bb4 <spi_initMcu+0x34>
			MCU_PinSetup(spi->MisoPort, spi->MisoPin, 1, 0, FALSE, 1);
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	7898      	ldrb	r0, [r3, #2]
    1b9e:	687b      	ldr	r3, [r7, #4]
    1ba0:	78d9      	ldrb	r1, [r3, #3]
    1ba2:	2301      	movs	r3, #1
    1ba4:	9301      	str	r3, [sp, #4]
    1ba6:	2300      	movs	r3, #0
    1ba8:	9300      	str	r3, [sp, #0]
    1baa:	2300      	movs	r3, #0
    1bac:	2201      	movs	r2, #1
    1bae:	4c96      	ldr	r4, [pc, #600]	; (1e08 <spi_initMcu+0x288>)
    1bb0:	47a0      	blx	r4
    1bb2:	e00f      	b.n	1bd4 <spi_initMcu+0x54>
		else if(spi->spiMode == SPI_MODE_MASTER)
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	785b      	ldrb	r3, [r3, #1]
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d10b      	bne.n	1bd4 <spi_initMcu+0x54>
			MCU_PinSetup(spi->MisoPort, spi->MisoPin, 0, 0, FALSE, 1);
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	7898      	ldrb	r0, [r3, #2]
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	78d9      	ldrb	r1, [r3, #3]
    1bc4:	2301      	movs	r3, #1
    1bc6:	9301      	str	r3, [sp, #4]
    1bc8:	2300      	movs	r3, #0
    1bca:	9300      	str	r3, [sp, #0]
    1bcc:	2300      	movs	r3, #0
    1bce:	2200      	movs	r2, #0
    1bd0:	4c8d      	ldr	r4, [pc, #564]	; (1e08 <spi_initMcu+0x288>)
    1bd2:	47a0      	blx	r4
		
		MCU_SetPmuxFunction(spi->MisoPort, spi->MisoPin, spi->PmuxFunction);
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	7898      	ldrb	r0, [r3, #2]
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	78d9      	ldrb	r1, [r3, #3]
    1bdc:	687b      	ldr	r3, [r7, #4]
    1bde:	7b1b      	ldrb	r3, [r3, #12]
    1be0:	001a      	movs	r2, r3
    1be2:	4b8a      	ldr	r3, [pc, #552]	; (1e0c <spi_initMcu+0x28c>)
    1be4:	4798      	blx	r3

		//Setup MOSI
		if(spi->spiMode == SPI_MODE_SLAVE)
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	785b      	ldrb	r3, [r3, #1]
    1bea:	2b01      	cmp	r3, #1
    1bec:	d10c      	bne.n	1c08 <spi_initMcu+0x88>
			MCU_PinSetup(spi->MosiPort, spi->MosiPin, 0, 0, FALSE, 1);
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	7918      	ldrb	r0, [r3, #4]
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	7959      	ldrb	r1, [r3, #5]
    1bf6:	2301      	movs	r3, #1
    1bf8:	9301      	str	r3, [sp, #4]
    1bfa:	2300      	movs	r3, #0
    1bfc:	9300      	str	r3, [sp, #0]
    1bfe:	2300      	movs	r3, #0
    1c00:	2200      	movs	r2, #0
    1c02:	4c81      	ldr	r4, [pc, #516]	; (1e08 <spi_initMcu+0x288>)
    1c04:	47a0      	blx	r4
    1c06:	e00b      	b.n	1c20 <spi_initMcu+0xa0>
		else
			MCU_PinSetup(spi->MosiPort, spi->MosiPin, 1, 0, FALSE, 1);
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	7918      	ldrb	r0, [r3, #4]
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	7959      	ldrb	r1, [r3, #5]
    1c10:	2301      	movs	r3, #1
    1c12:	9301      	str	r3, [sp, #4]
    1c14:	2300      	movs	r3, #0
    1c16:	9300      	str	r3, [sp, #0]
    1c18:	2300      	movs	r3, #0
    1c1a:	2201      	movs	r2, #1
    1c1c:	4c7a      	ldr	r4, [pc, #488]	; (1e08 <spi_initMcu+0x288>)
    1c1e:	47a0      	blx	r4

		MCU_SetPmuxFunction(spi->MosiPort, spi->MosiPin, spi->PmuxFunction);
    1c20:	687b      	ldr	r3, [r7, #4]
    1c22:	7918      	ldrb	r0, [r3, #4]
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	7959      	ldrb	r1, [r3, #5]
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	7b1b      	ldrb	r3, [r3, #12]
    1c2c:	001a      	movs	r2, r3
    1c2e:	4b77      	ldr	r3, [pc, #476]	; (1e0c <spi_initMcu+0x28c>)
    1c30:	4798      	blx	r3

		//Setup SCLK
		if(spi->spiMode == SPI_MODE_SLAVE)
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	785b      	ldrb	r3, [r3, #1]
    1c36:	2b01      	cmp	r3, #1
    1c38:	d10c      	bne.n	1c54 <spi_initMcu+0xd4>
			MCU_PinSetup(spi->SclkPort, spi->SclkPin, 0, 0, FALSE, 1);
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	7998      	ldrb	r0, [r3, #6]
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	79d9      	ldrb	r1, [r3, #7]
    1c42:	2301      	movs	r3, #1
    1c44:	9301      	str	r3, [sp, #4]
    1c46:	2300      	movs	r3, #0
    1c48:	9300      	str	r3, [sp, #0]
    1c4a:	2300      	movs	r3, #0
    1c4c:	2200      	movs	r2, #0
    1c4e:	4c6e      	ldr	r4, [pc, #440]	; (1e08 <spi_initMcu+0x288>)
    1c50:	47a0      	blx	r4
    1c52:	e00b      	b.n	1c6c <spi_initMcu+0xec>
		else
			MCU_PinSetup(spi->SclkPort, spi->SclkPin, 1, 0, FALSE, 1);
    1c54:	687b      	ldr	r3, [r7, #4]
    1c56:	7998      	ldrb	r0, [r3, #6]
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	79d9      	ldrb	r1, [r3, #7]
    1c5c:	2301      	movs	r3, #1
    1c5e:	9301      	str	r3, [sp, #4]
    1c60:	2300      	movs	r3, #0
    1c62:	9300      	str	r3, [sp, #0]
    1c64:	2300      	movs	r3, #0
    1c66:	2201      	movs	r2, #1
    1c68:	4c67      	ldr	r4, [pc, #412]	; (1e08 <spi_initMcu+0x288>)
    1c6a:	47a0      	blx	r4

		MCU_SetPmuxFunction(spi->SclkPort, spi->SclkPin, spi->PmuxFunction);
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	7998      	ldrb	r0, [r3, #6]
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	79d9      	ldrb	r1, [r3, #7]
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	7b1b      	ldrb	r3, [r3, #12]
    1c78:	001a      	movs	r2, r3
    1c7a:	4b64      	ldr	r3, [pc, #400]	; (1e0c <spi_initMcu+0x28c>)
    1c7c:	4798      	blx	r3

		//Setup Chip Select
		if(spi->spiMode == SPI_MODE_SLAVE)
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	785b      	ldrb	r3, [r3, #1]
    1c82:	2b01      	cmp	r3, #1
    1c84:	d114      	bne.n	1cb0 <spi_initMcu+0x130>
		{
			MCU_PinSetup(spi->CsPort, spi->CsPin, 0, 1, FALSE, 1);
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	7a18      	ldrb	r0, [r3, #8]
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	7a59      	ldrb	r1, [r3, #9]
    1c8e:	2301      	movs	r3, #1
    1c90:	9301      	str	r3, [sp, #4]
    1c92:	2300      	movs	r3, #0
    1c94:	9300      	str	r3, [sp, #0]
    1c96:	2301      	movs	r3, #1
    1c98:	2200      	movs	r2, #0
    1c9a:	4c5b      	ldr	r4, [pc, #364]	; (1e08 <spi_initMcu+0x288>)
    1c9c:	47a0      	blx	r4
			MCU_SetPmuxFunction(spi->CsPort, spi->CsPin, spi->PmuxFunction);
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	7a18      	ldrb	r0, [r3, #8]
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	7a59      	ldrb	r1, [r3, #9]
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	7b1b      	ldrb	r3, [r3, #12]
    1caa:	001a      	movs	r2, r3
    1cac:	4b57      	ldr	r3, [pc, #348]	; (1e0c <spi_initMcu+0x28c>)
    1cae:	4798      	blx	r3
		}

		//Enable clk to Serial Port Peripheral
		GCLK->PCHCTRL[spi->SerialComPort + 16].reg = GCLK_PCHCTRL_GEN_GCLK2 | GCLK_PCHCTRL_CHEN;
    1cb0:	4a57      	ldr	r2, [pc, #348]	; (1e10 <spi_initMcu+0x290>)
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	7b5b      	ldrb	r3, [r3, #13]
    1cb6:	3310      	adds	r3, #16
    1cb8:	3320      	adds	r3, #32
    1cba:	009b      	lsls	r3, r3, #2
    1cbc:	2142      	movs	r1, #66	; 0x42
    1cbe:	5099      	str	r1, [r3, r2]
		//Slow SPI clock from GENclk 1 (32Khz)
		GCLK->PCHCTRL[15].reg = GCLK_PCHCTRL_GEN_GCLK1 | GCLK_PCHCTRL_CHEN;
    1cc0:	4a53      	ldr	r2, [pc, #332]	; (1e10 <spi_initMcu+0x290>)
    1cc2:	23bc      	movs	r3, #188	; 0xbc
    1cc4:	2141      	movs	r1, #65	; 0x41
    1cc6:	50d1      	str	r1, [r2, r3]
		//Enable APBCMASK Bit
		MCLK->APBCMASK.bit.SERCOM3_ = 1;
    1cc8:	4a52      	ldr	r2, [pc, #328]	; (1e14 <spi_initMcu+0x294>)
    1cca:	69d3      	ldr	r3, [r2, #28]
    1ccc:	2110      	movs	r1, #16
    1cce:	430b      	orrs	r3, r1
    1cd0:	61d3      	str	r3, [r2, #28]
				
		//Pointer to Sercom Port
		SercomSpi *port = SEROM_GetSpiPort(spi->SerialComPort);
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	7b5b      	ldrb	r3, [r3, #13]
    1cd6:	0018      	movs	r0, r3
    1cd8:	4b4f      	ldr	r3, [pc, #316]	; (1e18 <spi_initMcu+0x298>)
    1cda:	4798      	blx	r3
    1cdc:	0003      	movs	r3, r0
    1cde:	60fb      	str	r3, [r7, #12]

		//Do software reset on Uart port and wait for sync
		while(port->SYNCBUSY.bit.SWRST);
    1ce0:	46c0      	nop			; (mov r8, r8)
    1ce2:	68fb      	ldr	r3, [r7, #12]
    1ce4:	69db      	ldr	r3, [r3, #28]
    1ce6:	07db      	lsls	r3, r3, #31
    1ce8:	0fdb      	lsrs	r3, r3, #31
    1cea:	b2db      	uxtb	r3, r3
    1cec:	2b00      	cmp	r3, #0
    1cee:	d1f8      	bne.n	1ce2 <spi_initMcu+0x162>
		port->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1cf0:	68fb      	ldr	r3, [r7, #12]
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	2201      	movs	r2, #1
    1cf6:	431a      	orrs	r2, r3
    1cf8:	68fb      	ldr	r3, [r7, #12]
    1cfa:	601a      	str	r2, [r3, #0]
		while(port->SYNCBUSY.bit.SWRST);
    1cfc:	46c0      	nop			; (mov r8, r8)
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	69db      	ldr	r3, [r3, #28]
    1d02:	07db      	lsls	r3, r3, #31
    1d04:	0fdb      	lsrs	r3, r3, #31
    1d06:	b2db      	uxtb	r3, r3
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d1f8      	bne.n	1cfe <spi_initMcu+0x17e>

		//Set Slave/Master MOde
		if(spi->spiMode == SPI_MODE_SLAVE)
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	785b      	ldrb	r3, [r3, #1]
    1d10:	2b01      	cmp	r3, #1
    1d12:	d103      	bne.n	1d1c <spi_initMcu+0x19c>
			port->CTRLA.reg = SERCOM_SPI_CTRLA_MODE(2);
    1d14:	68fb      	ldr	r3, [r7, #12]
    1d16:	2208      	movs	r2, #8
    1d18:	601a      	str	r2, [r3, #0]
    1d1a:	e002      	b.n	1d22 <spi_initMcu+0x1a2>
		else
			port->CTRLA.reg = SERCOM_SPI_CTRLA_MODE(3);
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	220c      	movs	r2, #12
    1d20:	601a      	str	r2, [r3, #0]

		//Set Pads
		port->CTRLA.reg |= SERCOM_SPI_CTRLA_DOPO(spi->DopiPad) | SERCOM_SPI_CTRLA_DIPO(spi->DipoPad) | SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA ;
    1d22:	68fb      	ldr	r3, [r7, #12]
    1d24:	681a      	ldr	r2, [r3, #0]
    1d26:	687b      	ldr	r3, [r7, #4]
    1d28:	7adb      	ldrb	r3, [r3, #11]
    1d2a:	041b      	lsls	r3, r3, #16
    1d2c:	0019      	movs	r1, r3
    1d2e:	23c0      	movs	r3, #192	; 0xc0
    1d30:	029b      	lsls	r3, r3, #10
    1d32:	4019      	ands	r1, r3
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	7a9b      	ldrb	r3, [r3, #10]
    1d38:	051b      	lsls	r3, r3, #20
    1d3a:	0018      	movs	r0, r3
    1d3c:	23c0      	movs	r3, #192	; 0xc0
    1d3e:	039b      	lsls	r3, r3, #14
    1d40:	4003      	ands	r3, r0
    1d42:	430b      	orrs	r3, r1
    1d44:	4313      	orrs	r3, r2
    1d46:	22c0      	movs	r2, #192	; 0xc0
    1d48:	0592      	lsls	r2, r2, #22
    1d4a:	431a      	orrs	r2, r3
    1d4c:	68fb      	ldr	r3, [r7, #12]
    1d4e:	601a      	str	r2, [r3, #0]

		//Enable Rx, and 8bit rx
		if(spi->spiMode == SPI_MODE_MASTER_TX_ONLY)
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	785b      	ldrb	r3, [r3, #1]
    1d54:	2b02      	cmp	r3, #2
    1d56:	d106      	bne.n	1d66 <spi_initMcu+0x1e6>
			port->CTRLB.reg |=  SERCOM_SPI_CTRLB_PLOADEN;
    1d58:	68fb      	ldr	r3, [r7, #12]
    1d5a:	685b      	ldr	r3, [r3, #4]
    1d5c:	2240      	movs	r2, #64	; 0x40
    1d5e:	431a      	orrs	r2, r3
    1d60:	68fb      	ldr	r3, [r7, #12]
    1d62:	605a      	str	r2, [r3, #4]
    1d64:	e005      	b.n	1d72 <spi_initMcu+0x1f2>
		else
			port->CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN;
    1d66:	68fb      	ldr	r3, [r7, #12]
    1d68:	685b      	ldr	r3, [r3, #4]
    1d6a:	4a2c      	ldr	r2, [pc, #176]	; (1e1c <spi_initMcu+0x29c>)
    1d6c:	431a      	orrs	r2, r3
    1d6e:	68fb      	ldr	r3, [r7, #12]
    1d70:	605a      	str	r2, [r3, #4]

		port->DBGCTRL.reg = 0;
    1d72:	68fb      	ldr	r3, [r7, #12]
    1d74:	2230      	movs	r2, #48	; 0x30
    1d76:	2100      	movs	r1, #0
    1d78:	5499      	strb	r1, [r3, r2]

		//Enable SPI Interrupts
		if(spi->spiMode == SPI_MODE_SLAVE)
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	785b      	ldrb	r3, [r3, #1]
    1d7e:	2b01      	cmp	r3, #1
    1d80:	d103      	bne.n	1d8a <spi_initMcu+0x20a>
			port->INTENSET.reg = SERCOM_SPI_INTENSET_RXC | SERCOM_SPI_INTENSET_TXC;
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	2206      	movs	r2, #6
    1d86:	759a      	strb	r2, [r3, #22]
    1d88:	e002      	b.n	1d90 <spi_initMcu+0x210>
		else //Master
			port->INTENSET.reg	= SERCOM_SPI_INTENSET_RXC | SERCOM_SPI_INTENSET_TXC;
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	2206      	movs	r2, #6
    1d8e:	759a      	strb	r2, [r3, #22]

		//Enable the RxSercomLibrary
		SERCOM_InitSpiPort(spi->SerialComPort, &spi->rxBuffer[0], &spi->rxIndex, &spi->txBuffer[0], &spi->txIndex, &spi->txSize);
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	7b58      	ldrb	r0, [r3, #13]
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	3309      	adds	r3, #9
    1d98:	33ff      	adds	r3, #255	; 0xff
    1d9a:	0019      	movs	r1, r3
    1d9c:	687b      	ldr	r3, [r7, #4]
    1d9e:	4a20      	ldr	r2, [pc, #128]	; (1e20 <spi_initMcu+0x2a0>)
    1da0:	189c      	adds	r4, r3, r2
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	330e      	adds	r3, #14
    1da6:	001d      	movs	r5, r3
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	2281      	movs	r2, #129	; 0x81
    1dac:	0092      	lsls	r2, r2, #2
    1dae:	4694      	mov	ip, r2
    1db0:	4463      	add	r3, ip
    1db2:	687a      	ldr	r2, [r7, #4]
    1db4:	4e1b      	ldr	r6, [pc, #108]	; (1e24 <spi_initMcu+0x2a4>)
    1db6:	46b4      	mov	ip, r6
    1db8:	4462      	add	r2, ip
    1dba:	9201      	str	r2, [sp, #4]
    1dbc:	9300      	str	r3, [sp, #0]
    1dbe:	002b      	movs	r3, r5
    1dc0:	0022      	movs	r2, r4
    1dc2:	4c19      	ldr	r4, [pc, #100]	; (1e28 <spi_initMcu+0x2a8>)
    1dc4:	47a0      	blx	r4

		if(spi->spiMode != SPI_MODE_SLAVE)
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	785b      	ldrb	r3, [r3, #1]
    1dca:	2b01      	cmp	r3, #1
    1dcc:	d002      	beq.n	1dd4 <spi_initMcu+0x254>
			port->BAUD.reg = 0x04;
    1dce:	68fb      	ldr	r3, [r7, #12]
    1dd0:	2204      	movs	r2, #4
    1dd2:	731a      	strb	r2, [r3, #12]

		//Wait for Sync and Enable Uart
		while(port->SYNCBUSY.bit.SWRST || port->SYNCBUSY.bit.ENABLE);
    1dd4:	46c0      	nop			; (mov r8, r8)
    1dd6:	68fb      	ldr	r3, [r7, #12]
    1dd8:	69db      	ldr	r3, [r3, #28]
    1dda:	07db      	lsls	r3, r3, #31
    1ddc:	0fdb      	lsrs	r3, r3, #31
    1dde:	b2db      	uxtb	r3, r3
    1de0:	2b00      	cmp	r3, #0
    1de2:	d1f8      	bne.n	1dd6 <spi_initMcu+0x256>
    1de4:	68fb      	ldr	r3, [r7, #12]
    1de6:	69db      	ldr	r3, [r3, #28]
    1de8:	079b      	lsls	r3, r3, #30
    1dea:	0fdb      	lsrs	r3, r3, #31
    1dec:	b2db      	uxtb	r3, r3
    1dee:	2b00      	cmp	r3, #0
    1df0:	d1f1      	bne.n	1dd6 <spi_initMcu+0x256>
		
		//Enable SPI Line
		port->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1df2:	68fb      	ldr	r3, [r7, #12]
    1df4:	681b      	ldr	r3, [r3, #0]
    1df6:	2202      	movs	r2, #2
    1df8:	431a      	orrs	r2, r3
    1dfa:	68fb      	ldr	r3, [r7, #12]
    1dfc:	601a      	str	r2, [r3, #0]
    1dfe:	e000      	b.n	1e02 <spi_initMcu+0x282>
			return;
    1e00:	46c0      	nop			; (mov r8, r8)
	}
    1e02:	46bd      	mov	sp, r7
    1e04:	b005      	add	sp, #20
    1e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e08:	000001d5 	.word	0x000001d5
    1e0c:	00000445 	.word	0x00000445
    1e10:	40001c00 	.word	0x40001c00
    1e14:	40000800 	.word	0x40000800
    1e18:	00000d89 	.word	0x00000d89
    1e1c:	00020040 	.word	0x00020040
    1e20:	00000206 	.word	0x00000206
    1e24:	00000202 	.word	0x00000202
    1e28:	00000c69 	.word	0x00000c69

00001e2c <UART_Init>:

//=========================================================================
// Implementations or Functions
//=========================================================================
void UART_Init(UartLine_t *uartLine)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
    1e32:	6078      	str	r0, [r7, #4]
	uart_txInitMcu(uartLine);
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	0018      	movs	r0, r3
    1e38:	4b0b      	ldr	r3, [pc, #44]	; (1e68 <UART_Init+0x3c>)
    1e3a:	4798      	blx	r3

	if(uartLine->RxEnable)
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	785b      	ldrb	r3, [r3, #1]
    1e40:	2b00      	cmp	r3, #0
    1e42:	d009      	beq.n	1e58 <UART_Init+0x2c>
	{
		FIFO_ClearBuffer(uartLine->rxDataBuffer, 0);
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	691b      	ldr	r3, [r3, #16]
    1e48:	2100      	movs	r1, #0
    1e4a:	0018      	movs	r0, r3
    1e4c:	4b07      	ldr	r3, [pc, #28]	; (1e6c <UART_Init+0x40>)
    1e4e:	4798      	blx	r3

		uart_rxInitMcu(uartLine);
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	0018      	movs	r0, r3
    1e54:	4b06      	ldr	r3, [pc, #24]	; (1e70 <UART_Init+0x44>)
    1e56:	4798      	blx	r3
	}

	uartLine->Initilized = TRUE;
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	2201      	movs	r2, #1
    1e5c:	701a      	strb	r2, [r3, #0]
}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	46bd      	mov	sp, r7
    1e62:	b002      	add	sp, #8
    1e64:	bd80      	pop	{r7, pc}
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	00001f71 	.word	0x00001f71
    1e6c:	00001691 	.word	0x00001691
    1e70:	000020a9 	.word	0x000020a9

00001e74 <UART_TxSendString>:

void UART_TxSendString(UartLine_t *uartLine, char *string)
{
    1e74:	b580      	push	{r7, lr}
    1e76:	b082      	sub	sp, #8
    1e78:	af00      	add	r7, sp, #0
    1e7a:	6078      	str	r0, [r7, #4]
    1e7c:	6039      	str	r1, [r7, #0]
	while(*string)
    1e7e:	e008      	b.n	1e92 <UART_TxSendString+0x1e>
		UART_TxSendChar(uartLine, (char)*string++);
    1e80:	683b      	ldr	r3, [r7, #0]
    1e82:	1c5a      	adds	r2, r3, #1
    1e84:	603a      	str	r2, [r7, #0]
    1e86:	781a      	ldrb	r2, [r3, #0]
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	0011      	movs	r1, r2
    1e8c:	0018      	movs	r0, r3
    1e8e:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <UART_TxSendString+0x30>)
    1e90:	4798      	blx	r3
	while(*string)
    1e92:	683b      	ldr	r3, [r7, #0]
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d1f2      	bne.n	1e80 <UART_TxSendString+0xc>
}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	46bd      	mov	sp, r7
    1e9e:	b002      	add	sp, #8
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	00001f11 	.word	0x00001f11

00001ea8 <UART_TxSendNumber>:
	for(uint16_t i = 0;i < dataSize;i++)
		UART_TxSendChar(uartLine, (char)data[i]);
}

void UART_TxSendNumber(UartLine_t *uartLine, uint32_t val)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	b084      	sub	sp, #16
    1eac:	af00      	add	r7, sp, #0
    1eae:	6078      	str	r0, [r7, #4]
    1eb0:	6039      	str	r1, [r7, #0]
	char *string = UTILS_IntToString(val);
    1eb2:	683b      	ldr	r3, [r7, #0]
    1eb4:	0018      	movs	r0, r3
    1eb6:	4b07      	ldr	r3, [pc, #28]	; (1ed4 <UART_TxSendNumber+0x2c>)
    1eb8:	4798      	blx	r3
    1eba:	0003      	movs	r3, r0
    1ebc:	60fb      	str	r3, [r7, #12]

	UART_TxSendString(uartLine, string);
    1ebe:	68fa      	ldr	r2, [r7, #12]
    1ec0:	687b      	ldr	r3, [r7, #4]
    1ec2:	0011      	movs	r1, r2
    1ec4:	0018      	movs	r0, r3
    1ec6:	4b04      	ldr	r3, [pc, #16]	; (1ed8 <UART_TxSendNumber+0x30>)
    1ec8:	4798      	blx	r3
}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	46bd      	mov	sp, r7
    1ece:	b004      	add	sp, #16
    1ed0:	bd80      	pop	{r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	00002191 	.word	0x00002191
    1ed8:	00001e75 	.word	0x00001e75

00001edc <UART_TxSendHex>:

void UART_TxSendHex(UartLine_t *uartLine, uint32_t val)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b084      	sub	sp, #16
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	6039      	str	r1, [r7, #0]
	char *string = UTILS_HexToString(val);
    1ee6:	683b      	ldr	r3, [r7, #0]
    1ee8:	0018      	movs	r0, r3
    1eea:	4b07      	ldr	r3, [pc, #28]	; (1f08 <UART_TxSendHex+0x2c>)
    1eec:	4798      	blx	r3
    1eee:	0003      	movs	r3, r0
    1ef0:	60fb      	str	r3, [r7, #12]

	UART_TxSendString(uartLine, string);
    1ef2:	68fa      	ldr	r2, [r7, #12]
    1ef4:	687b      	ldr	r3, [r7, #4]
    1ef6:	0011      	movs	r1, r2
    1ef8:	0018      	movs	r0, r3
    1efa:	4b04      	ldr	r3, [pc, #16]	; (1f0c <UART_TxSendHex+0x30>)
    1efc:	4798      	blx	r3
}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	46bd      	mov	sp, r7
    1f02:	b004      	add	sp, #16
    1f04:	bd80      	pop	{r7, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	00002239 	.word	0x00002239
    1f0c:	00001e75 	.word	0x00001e75

00001f10 <UART_TxSendChar>:

void UART_TxSendChar(UartLine_t *uartLine, char c)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	b082      	sub	sp, #8
    1f14:	af00      	add	r7, sp, #0
    1f16:	6078      	str	r0, [r7, #4]
    1f18:	000a      	movs	r2, r1
    1f1a:	1cfb      	adds	r3, r7, #3
    1f1c:	701a      	strb	r2, [r3, #0]
	if(uartLine->SerialComPort == COMM_TEST) //Used for Unit Tests
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	7b5b      	ldrb	r3, [r3, #13]
    1f22:	2bff      	cmp	r3, #255	; 0xff
    1f24:	d10a      	bne.n	1f3c <UART_TxSendChar+0x2c>
	{
		if(_testUartFunc)
    1f26:	4b0f      	ldr	r3, [pc, #60]	; (1f64 <UART_TxSendChar+0x54>)
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d016      	beq.n	1f5c <UART_TxSendChar+0x4c>
			_testUartFunc(c);
    1f2e:	4b0d      	ldr	r3, [pc, #52]	; (1f64 <UART_TxSendChar+0x54>)
    1f30:	681b      	ldr	r3, [r3, #0]
    1f32:	1cfa      	adds	r2, r7, #3
    1f34:	7812      	ldrb	r2, [r2, #0]
    1f36:	0010      	movs	r0, r2
    1f38:	4798      	blx	r3

		return;
    1f3a:	e00f      	b.n	1f5c <UART_TxSendChar+0x4c>
	}


	if(!uartLine->Initilized)
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d103      	bne.n	1f4c <UART_TxSendChar+0x3c>
		UART_Init(uartLine);
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	0018      	movs	r0, r3
    1f48:	4b07      	ldr	r3, [pc, #28]	; (1f68 <UART_TxSendChar+0x58>)
    1f4a:	4798      	blx	r3


	uart_txSendCharMcu(uartLine, c);
    1f4c:	1cfb      	adds	r3, r7, #3
    1f4e:	781a      	ldrb	r2, [r3, #0]
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	0011      	movs	r1, r2
    1f54:	0018      	movs	r0, r3
    1f56:	4b05      	ldr	r3, [pc, #20]	; (1f6c <UART_TxSendChar+0x5c>)
    1f58:	4798      	blx	r3
    1f5a:	e000      	b.n	1f5e <UART_TxSendChar+0x4e>
		return;
    1f5c:	46c0      	nop			; (mov r8, r8)
}
    1f5e:	46bd      	mov	sp, r7
    1f60:	b002      	add	sp, #8
    1f62:	bd80      	pop	{r7, pc}
    1f64:	20000788 	.word	0x20000788
    1f68:	00001e2d 	.word	0x00001e2d
    1f6c:	00002131 	.word	0x00002131

00001f70 <uart_txInitMcu>:
	}
	
#elif defined(MCU_SAML22)

	static void uart_txInitMcu(UartLine_t *uartLine)
	{
    1f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f72:	b089      	sub	sp, #36	; 0x24
    1f74:	af02      	add	r7, sp, #8
    1f76:	6078      	str	r0, [r7, #4]
		uint64_t baud = (uint64_t)65536 * (uint64_t)((uint64_t)8000000 - 16 * uartLine->Baud) /(uint64_t)8000000;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	689b      	ldr	r3, [r3, #8]
    1f7c:	011b      	lsls	r3, r3, #4
    1f7e:	001d      	movs	r5, r3
    1f80:	2300      	movs	r3, #0
    1f82:	001e      	movs	r6, r3
    1f84:	4c3e      	ldr	r4, [pc, #248]	; (2080 <STACK_SIZE+0x80>)
    1f86:	4a3f      	ldr	r2, [pc, #252]	; (2084 <STACK_SIZE+0x84>)
    1f88:	2301      	movs	r3, #1
    1f8a:	425b      	negs	r3, r3
    1f8c:	0028      	movs	r0, r5
    1f8e:	0031      	movs	r1, r6
    1f90:	47a0      	blx	r4
    1f92:	0003      	movs	r3, r0
    1f94:	000c      	movs	r4, r1
    1f96:	0019      	movs	r1, r3
    1f98:	0022      	movs	r2, r4
    1f9a:	2390      	movs	r3, #144	; 0x90
    1f9c:	055b      	lsls	r3, r3, #21
    1f9e:	247a      	movs	r4, #122	; 0x7a
    1fa0:	18c9      	adds	r1, r1, r3
    1fa2:	4162      	adcs	r2, r4
    1fa4:	0008      	movs	r0, r1
    1fa6:	0011      	movs	r1, r2
    1fa8:	4c37      	ldr	r4, [pc, #220]	; (2088 <STACK_SIZE+0x88>)
    1faa:	4a38      	ldr	r2, [pc, #224]	; (208c <STACK_SIZE+0x8c>)
    1fac:	2300      	movs	r3, #0
    1fae:	47a0      	blx	r4
    1fb0:	0003      	movs	r3, r0
    1fb2:	000c      	movs	r4, r1
    1fb4:	613b      	str	r3, [r7, #16]
    1fb6:	617c      	str	r4, [r7, #20]

		//Setup Tx IO Line
		MCU_PinSetup(uartLine->TxPort, uartLine->TxPin, 1, 0, 0, 1);
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	7898      	ldrb	r0, [r3, #2]
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	78d9      	ldrb	r1, [r3, #3]
    1fc0:	2301      	movs	r3, #1
    1fc2:	9301      	str	r3, [sp, #4]
    1fc4:	2300      	movs	r3, #0
    1fc6:	9300      	str	r3, [sp, #0]
    1fc8:	2300      	movs	r3, #0
    1fca:	2201      	movs	r2, #1
    1fcc:	4c30      	ldr	r4, [pc, #192]	; (2090 <STACK_SIZE+0x90>)
    1fce:	47a0      	blx	r4
		MCU_SetPmuxFunction(uartLine->TxPort, uartLine->TxPin, uartLine->PmuxFunction);
    1fd0:	687b      	ldr	r3, [r7, #4]
    1fd2:	7898      	ldrb	r0, [r3, #2]
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	78d9      	ldrb	r1, [r3, #3]
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	7b9b      	ldrb	r3, [r3, #14]
    1fdc:	001a      	movs	r2, r3
    1fde:	4b2d      	ldr	r3, [pc, #180]	; (2094 <STACK_SIZE+0x94>)
    1fe0:	4798      	blx	r3
		
		//Core uart Clock from GenClk 2 (8mHz)
		GCLK->PCHCTRL[uartLine->SerialComPort + 16].reg = GCLK_PCHCTRL_GEN_GCLK2 | GCLK_PCHCTRL_CHEN;
    1fe2:	4a2d      	ldr	r2, [pc, #180]	; (2098 <STACK_SIZE+0x98>)
    1fe4:	687b      	ldr	r3, [r7, #4]
    1fe6:	7b5b      	ldrb	r3, [r3, #13]
    1fe8:	3310      	adds	r3, #16
    1fea:	3320      	adds	r3, #32
    1fec:	009b      	lsls	r3, r3, #2
    1fee:	2142      	movs	r1, #66	; 0x42
    1ff0:	5099      	str	r1, [r3, r2]
		//Slow uart clock from Genckl 1 (32Khz)
		GCLK->PCHCTRL[15].reg = GCLK_PCHCTRL_GEN_GCLK1 | GCLK_PCHCTRL_CHEN;
    1ff2:	4a29      	ldr	r2, [pc, #164]	; (2098 <STACK_SIZE+0x98>)
    1ff4:	23bc      	movs	r3, #188	; 0xbc
    1ff6:	2141      	movs	r1, #65	; 0x41
    1ff8:	50d1      	str	r1, [r2, r3]
		
		//Set Mclk bit for Sercom 4
		MCLK->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
    1ffa:	4b28      	ldr	r3, [pc, #160]	; (209c <STACK_SIZE+0x9c>)
    1ffc:	4a27      	ldr	r2, [pc, #156]	; (209c <STACK_SIZE+0x9c>)
    1ffe:	69d2      	ldr	r2, [r2, #28]
    2000:	2120      	movs	r1, #32
    2002:	430a      	orrs	r2, r1
    2004:	61da      	str	r2, [r3, #28]

		//Pointer to Sercom Port
		SercomUsart *port = SEROM_GetUsartPort(uartLine->SerialComPort);
    2006:	687b      	ldr	r3, [r7, #4]
    2008:	7b5b      	ldrb	r3, [r3, #13]
    200a:	0018      	movs	r0, r3
    200c:	4b24      	ldr	r3, [pc, #144]	; (20a0 <STACK_SIZE+0xa0>)
    200e:	4798      	blx	r3
    2010:	0003      	movs	r3, r0
    2012:	60fb      	str	r3, [r7, #12]

		//Do software reset on Uart port and wait for sync
		port->CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    2014:	68fb      	ldr	r3, [r7, #12]
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	2201      	movs	r2, #1
    201a:	431a      	orrs	r2, r3
    201c:	68fb      	ldr	r3, [r7, #12]
    201e:	601a      	str	r2, [r3, #0]
		while(port->SYNCBUSY.bit.SWRST);
    2020:	46c0      	nop			; (mov r8, r8)
    2022:	68fb      	ldr	r3, [r7, #12]
    2024:	69db      	ldr	r3, [r3, #28]
    2026:	07db      	lsls	r3, r3, #31
    2028:	0fdb      	lsrs	r3, r3, #31
    202a:	b2db      	uxtb	r3, r3
    202c:	2b00      	cmp	r3, #0
    202e:	d1f8      	bne.n	2022 <STACK_SIZE+0x22>

		//Setup Control A Register
		port->CTRLA.reg = SERCOM_USART_CTRLA_MODE(1) | SERCOM_USART_CTRLA_TXPO(1) | SERCOM_USART_CTRLA_RXPO(3) | SERCOM_USART_CTRLA_DORD;
    2030:	68fb      	ldr	r3, [r7, #12]
    2032:	4a1c      	ldr	r2, [pc, #112]	; (20a4 <STACK_SIZE+0xa4>)
    2034:	601a      	str	r2, [r3, #0]

		//Setup Control B Registor
		port->CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    2036:	68fb      	ldr	r3, [r7, #12]
    2038:	22c0      	movs	r2, #192	; 0xc0
    203a:	0292      	lsls	r2, r2, #10
    203c:	605a      	str	r2, [r3, #4]

		//Set Baud Rate
		port->BAUD.reg = (uint16_t)baud;
    203e:	693b      	ldr	r3, [r7, #16]
    2040:	697c      	ldr	r4, [r7, #20]
    2042:	b29a      	uxth	r2, r3
    2044:	68fb      	ldr	r3, [r7, #12]
    2046:	819a      	strh	r2, [r3, #12]

		//Wait for Sync and Enable Uart
		while(port->SYNCBUSY.bit.SWRST || port->SYNCBUSY.bit.ENABLE);
    2048:	46c0      	nop			; (mov r8, r8)
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	69db      	ldr	r3, [r3, #28]
    204e:	07db      	lsls	r3, r3, #31
    2050:	0fdb      	lsrs	r3, r3, #31
    2052:	b2db      	uxtb	r3, r3
    2054:	2b00      	cmp	r3, #0
    2056:	d1f8      	bne.n	204a <STACK_SIZE+0x4a>
    2058:	68fb      	ldr	r3, [r7, #12]
    205a:	69db      	ldr	r3, [r3, #28]
    205c:	079b      	lsls	r3, r3, #30
    205e:	0fdb      	lsrs	r3, r3, #31
    2060:	b2db      	uxtb	r3, r3
    2062:	2b00      	cmp	r3, #0
    2064:	d1f1      	bne.n	204a <STACK_SIZE+0x4a>
		port->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2066:	68fb      	ldr	r3, [r7, #12]
    2068:	681b      	ldr	r3, [r3, #0]
    206a:	2202      	movs	r2, #2
    206c:	431a      	orrs	r2, r3
    206e:	68fb      	ldr	r3, [r7, #12]
    2070:	601a      	str	r2, [r3, #0]
		 
		uartLine->Initilized = TRUE;
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	2201      	movs	r2, #1
    2076:	701a      	strb	r2, [r3, #0]
	}
    2078:	46c0      	nop			; (mov r8, r8)
    207a:	46bd      	mov	sp, r7
    207c:	b007      	add	sp, #28
    207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2080:	00004005 	.word	0x00004005
    2084:	ffff0000 	.word	0xffff0000
    2088:	00003fc5 	.word	0x00003fc5
    208c:	007a1200 	.word	0x007a1200
    2090:	000001d5 	.word	0x000001d5
    2094:	00000445 	.word	0x00000445
    2098:	40001c00 	.word	0x40001c00
    209c:	40000800 	.word	0x40000800
    20a0:	00000d65 	.word	0x00000d65
    20a4:	40310004 	.word	0x40310004

000020a8 <uart_rxInitMcu>:
#else
	#warning Uart Library - No Valid MCU Defined
#endif

static void uart_rxInitMcu(UartLine_t *uartLine)
{
    20a8:	b590      	push	{r4, r7, lr}
    20aa:	b087      	sub	sp, #28
    20ac:	af02      	add	r7, sp, #8
    20ae:	6078      	str	r0, [r7, #4]
	//Init Sercom Port
	SERCOM_InitUartRxPort(uartLine->SerialComPort, uartLine->rxDataBuffer);
    20b0:	687b      	ldr	r3, [r7, #4]
    20b2:	7b5a      	ldrb	r2, [r3, #13]
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	691b      	ldr	r3, [r3, #16]
    20b8:	0019      	movs	r1, r3
    20ba:	0010      	movs	r0, r2
    20bc:	4b18      	ldr	r3, [pc, #96]	; (2120 <uart_rxInitMcu+0x78>)
    20be:	4798      	blx	r3

	//Setup Rx IO Line
	MCU_PinSetup(uartLine->RxPort, uartLine->RxPin, 0, 0, 0, 1);
    20c0:	687b      	ldr	r3, [r7, #4]
    20c2:	7918      	ldrb	r0, [r3, #4]
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	7959      	ldrb	r1, [r3, #5]
    20c8:	2301      	movs	r3, #1
    20ca:	9301      	str	r3, [sp, #4]
    20cc:	2300      	movs	r3, #0
    20ce:	9300      	str	r3, [sp, #0]
    20d0:	2300      	movs	r3, #0
    20d2:	2200      	movs	r2, #0
    20d4:	4c13      	ldr	r4, [pc, #76]	; (2124 <uart_rxInitMcu+0x7c>)
    20d6:	47a0      	blx	r4
	MCU_SetPmuxFunction(uartLine->RxPort, uartLine->RxPin, uartLine->PmuxFunction);
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	7918      	ldrb	r0, [r3, #4]
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	7959      	ldrb	r1, [r3, #5]
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	7b9b      	ldrb	r3, [r3, #14]
    20e4:	001a      	movs	r2, r3
    20e6:	4b10      	ldr	r3, [pc, #64]	; (2128 <uart_rxInitMcu+0x80>)
    20e8:	4798      	blx	r3

	SercomUsart *port = SEROM_GetUsartPort(uartLine->SerialComPort);
    20ea:	687b      	ldr	r3, [r7, #4]
    20ec:	7b5b      	ldrb	r3, [r3, #13]
    20ee:	0018      	movs	r0, r3
    20f0:	4b0e      	ldr	r3, [pc, #56]	; (212c <uart_rxInitMcu+0x84>)
    20f2:	4798      	blx	r3
    20f4:	0003      	movs	r3, r0
    20f6:	60fb      	str	r3, [r7, #12]

	//Enable Rx
	port->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    20f8:	68fb      	ldr	r3, [r7, #12]
    20fa:	685b      	ldr	r3, [r3, #4]
    20fc:	2280      	movs	r2, #128	; 0x80
    20fe:	0292      	lsls	r2, r2, #10
    2100:	431a      	orrs	r2, r3
    2102:	68fb      	ldr	r3, [r7, #12]
    2104:	605a      	str	r2, [r3, #4]

	//Enable Rx Interrupts
	port->INTENSET.reg |= SERCOM_USART_INTENSET_RXC;
    2106:	68fb      	ldr	r3, [r7, #12]
    2108:	7d9b      	ldrb	r3, [r3, #22]
    210a:	b2db      	uxtb	r3, r3
    210c:	2204      	movs	r2, #4
    210e:	4313      	orrs	r3, r2
    2110:	b2da      	uxtb	r2, r3
    2112:	68fb      	ldr	r3, [r7, #12]
    2114:	759a      	strb	r2, [r3, #22]
}
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	46bd      	mov	sp, r7
    211a:	b005      	add	sp, #20
    211c:	bd90      	pop	{r4, r7, pc}
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	00000b9d 	.word	0x00000b9d
    2124:	000001d5 	.word	0x000001d5
    2128:	00000445 	.word	0x00000445
    212c:	00000d65 	.word	0x00000d65

00002130 <uart_txSendCharMcu>:

static void uart_txSendCharMcu(UartLine_t *uartLine, char c)
{
    2130:	b580      	push	{r7, lr}
    2132:	b084      	sub	sp, #16
    2134:	af00      	add	r7, sp, #0
    2136:	6078      	str	r0, [r7, #4]
    2138:	000a      	movs	r2, r1
    213a:	1cfb      	adds	r3, r7, #3
    213c:	701a      	strb	r2, [r3, #0]
	SercomUsart *port = SEROM_GetUsartPort(uartLine->SerialComPort);
    213e:	687b      	ldr	r3, [r7, #4]
    2140:	7b5b      	ldrb	r3, [r3, #13]
    2142:	0018      	movs	r0, r3
    2144:	4b11      	ldr	r3, [pc, #68]	; (218c <uart_txSendCharMcu+0x5c>)
    2146:	4798      	blx	r3
    2148:	0003      	movs	r3, r0
    214a:	60fb      	str	r3, [r7, #12]

	//Wait for Uart Tx to be ready
	while (!port->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE);
    214c:	46c0      	nop			; (mov r8, r8)
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	7e1b      	ldrb	r3, [r3, #24]
    2152:	b2db      	uxtb	r3, r3
    2154:	2b00      	cmp	r3, #0
    2156:	d101      	bne.n	215c <uart_txSendCharMcu+0x2c>
    2158:	2301      	movs	r3, #1
    215a:	e000      	b.n	215e <uart_txSendCharMcu+0x2e>
    215c:	2300      	movs	r3, #0
    215e:	2b00      	cmp	r3, #0
    2160:	d1f5      	bne.n	214e <uart_txSendCharMcu+0x1e>

	//Send Char over Uart
	port->DATA.reg = c;
    2162:	1cfb      	adds	r3, r7, #3
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	b29a      	uxth	r2, r3
    2168:	68fb      	ldr	r3, [r7, #12]
    216a:	851a      	strh	r2, [r3, #40]	; 0x28

	//Wait for Uart Tx to be ready
	while (!port->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE);
    216c:	46c0      	nop			; (mov r8, r8)
    216e:	68fb      	ldr	r3, [r7, #12]
    2170:	7e1b      	ldrb	r3, [r3, #24]
    2172:	b2db      	uxtb	r3, r3
    2174:	2b00      	cmp	r3, #0
    2176:	d101      	bne.n	217c <uart_txSendCharMcu+0x4c>
    2178:	2301      	movs	r3, #1
    217a:	e000      	b.n	217e <uart_txSendCharMcu+0x4e>
    217c:	2300      	movs	r3, #0
    217e:	2b00      	cmp	r3, #0
    2180:	d1f5      	bne.n	216e <uart_txSendCharMcu+0x3e>
}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	46bd      	mov	sp, r7
    2186:	b004      	add	sp, #16
    2188:	bd80      	pop	{r7, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	00000d65 	.word	0x00000d65

00002190 <UTILS_IntToString>:

//=========================================================================
// Implementations
//=========================================================================
char *UTILS_IntToString(uint32_t val)
{
    2190:	b590      	push	{r4, r7, lr}
    2192:	b085      	sub	sp, #20
    2194:	af00      	add	r7, sp, #0
    2196:	6078      	str	r0, [r7, #4]
	uint8_t digits = 0;
    2198:	230f      	movs	r3, #15
    219a:	18fb      	adds	r3, r7, r3
    219c:	2200      	movs	r2, #0
    219e:	701a      	strb	r2, [r3, #0]

	for(uint32_t tempVal = val; tempVal; digits++)
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	60bb      	str	r3, [r7, #8]
    21a4:	e00d      	b.n	21c2 <UTILS_IntToString+0x32>
		tempVal /= 10;
    21a6:	68ba      	ldr	r2, [r7, #8]
    21a8:	4b20      	ldr	r3, [pc, #128]	; (222c <UTILS_IntToString+0x9c>)
    21aa:	210a      	movs	r1, #10
    21ac:	0010      	movs	r0, r2
    21ae:	4798      	blx	r3
    21b0:	0003      	movs	r3, r0
    21b2:	60bb      	str	r3, [r7, #8]
	for(uint32_t tempVal = val; tempVal; digits++)
    21b4:	230f      	movs	r3, #15
    21b6:	18fb      	adds	r3, r7, r3
    21b8:	781a      	ldrb	r2, [r3, #0]
    21ba:	230f      	movs	r3, #15
    21bc:	18fb      	adds	r3, r7, r3
    21be:	3201      	adds	r2, #1
    21c0:	701a      	strb	r2, [r3, #0]
    21c2:	68bb      	ldr	r3, [r7, #8]
    21c4:	2b00      	cmp	r3, #0
    21c6:	d1ee      	bne.n	21a6 <UTILS_IntToString+0x16>

	if(!val)
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	2b00      	cmp	r3, #0
    21cc:	d103      	bne.n	21d6 <UTILS_IntToString+0x46>
		digits = 1;
    21ce:	230f      	movs	r3, #15
    21d0:	18fb      	adds	r3, r7, r3
    21d2:	2201      	movs	r2, #1
    21d4:	701a      	strb	r2, [r3, #0]

	_stringBuffer[digits] = (char)'\0';
    21d6:	230f      	movs	r3, #15
    21d8:	18fb      	adds	r3, r7, r3
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	4a14      	ldr	r2, [pc, #80]	; (2230 <UTILS_IntToString+0xa0>)
    21de:	2100      	movs	r1, #0
    21e0:	54d1      	strb	r1, [r2, r3]

	do{
		_stringBuffer[--digits] = (char)(val % 10) + '0'; //Add each digit to buffer
    21e2:	230f      	movs	r3, #15
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	220f      	movs	r2, #15
    21e8:	18ba      	adds	r2, r7, r2
    21ea:	7812      	ldrb	r2, [r2, #0]
    21ec:	3a01      	subs	r2, #1
    21ee:	701a      	strb	r2, [r3, #0]
    21f0:	230f      	movs	r3, #15
    21f2:	18fb      	adds	r3, r7, r3
    21f4:	781c      	ldrb	r4, [r3, #0]
    21f6:	687a      	ldr	r2, [r7, #4]
    21f8:	4b0e      	ldr	r3, [pc, #56]	; (2234 <UTILS_IntToString+0xa4>)
    21fa:	210a      	movs	r1, #10
    21fc:	0010      	movs	r0, r2
    21fe:	4798      	blx	r3
    2200:	000b      	movs	r3, r1
    2202:	b2db      	uxtb	r3, r3
    2204:	3330      	adds	r3, #48	; 0x30
    2206:	b2da      	uxtb	r2, r3
    2208:	4b09      	ldr	r3, [pc, #36]	; (2230 <UTILS_IntToString+0xa0>)
    220a:	551a      	strb	r2, [r3, r4]
	}while (val /= 10);
    220c:	687a      	ldr	r2, [r7, #4]
    220e:	4b07      	ldr	r3, [pc, #28]	; (222c <UTILS_IntToString+0x9c>)
    2210:	210a      	movs	r1, #10
    2212:	0010      	movs	r0, r2
    2214:	4798      	blx	r3
    2216:	0003      	movs	r3, r0
    2218:	607b      	str	r3, [r7, #4]
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	2b00      	cmp	r3, #0
    221e:	d1e0      	bne.n	21e2 <UTILS_IntToString+0x52>

	return &_stringBuffer[0];
    2220:	4b03      	ldr	r3, [pc, #12]	; (2230 <UTILS_IntToString+0xa0>)
}
    2222:	0018      	movs	r0, r3
    2224:	46bd      	mov	sp, r7
    2226:	b005      	add	sp, #20
    2228:	bd90      	pop	{r4, r7, pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	00003e31 	.word	0x00003e31
    2230:	2000078c 	.word	0x2000078c
    2234:	00003f3d 	.word	0x00003f3d

00002238 <UTILS_HexToString>:

char *UTILS_HexToString(uint32_t val)
{
    2238:	b580      	push	{r7, lr}
    223a:	b086      	sub	sp, #24
    223c:	af00      	add	r7, sp, #0
    223e:	6078      	str	r0, [r7, #4]
	uint8_t digits = 0;
    2240:	2317      	movs	r3, #23
    2242:	18fb      	adds	r3, r7, r3
    2244:	2200      	movs	r2, #0
    2246:	701a      	strb	r2, [r3, #0]

	for(uint32_t tempVal = val; tempVal; digits++)
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	613b      	str	r3, [r7, #16]
    224c:	e009      	b.n	2262 <UTILS_HexToString+0x2a>
		tempVal /= 16;
    224e:	693b      	ldr	r3, [r7, #16]
    2250:	091b      	lsrs	r3, r3, #4
    2252:	613b      	str	r3, [r7, #16]
	for(uint32_t tempVal = val; tempVal; digits++)
    2254:	2317      	movs	r3, #23
    2256:	18fb      	adds	r3, r7, r3
    2258:	781a      	ldrb	r2, [r3, #0]
    225a:	2317      	movs	r3, #23
    225c:	18fb      	adds	r3, r7, r3
    225e:	3201      	adds	r2, #1
    2260:	701a      	strb	r2, [r3, #0]
    2262:	693b      	ldr	r3, [r7, #16]
    2264:	2b00      	cmp	r3, #0
    2266:	d1f2      	bne.n	224e <UTILS_HexToString+0x16>

	if(!val)
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	2b00      	cmp	r3, #0
    226c:	d103      	bne.n	2276 <UTILS_HexToString+0x3e>
		digits = 1;
    226e:	2317      	movs	r3, #23
    2270:	18fb      	adds	r3, r7, r3
    2272:	2201      	movs	r2, #1
    2274:	701a      	strb	r2, [r3, #0]

	_stringBuffer[0] = '0';
    2276:	4b1e      	ldr	r3, [pc, #120]	; (22f0 <UTILS_HexToString+0xb8>)
    2278:	2230      	movs	r2, #48	; 0x30
    227a:	701a      	strb	r2, [r3, #0]
	_stringBuffer[1] = 'x';
    227c:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <UTILS_HexToString+0xb8>)
    227e:	2278      	movs	r2, #120	; 0x78
    2280:	705a      	strb	r2, [r3, #1]
	_stringBuffer[digits + 2] = (char)'\0';
    2282:	2317      	movs	r3, #23
    2284:	18fb      	adds	r3, r7, r3
    2286:	781b      	ldrb	r3, [r3, #0]
    2288:	3302      	adds	r3, #2
    228a:	4a19      	ldr	r2, [pc, #100]	; (22f0 <UTILS_HexToString+0xb8>)
    228c:	2100      	movs	r1, #0
    228e:	54d1      	strb	r1, [r2, r3]

	do{

		char c = (char)(val % 16) + '0';
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	b2db      	uxtb	r3, r3
    2294:	220f      	movs	r2, #15
    2296:	4013      	ands	r3, r2
    2298:	b2da      	uxtb	r2, r3
    229a:	230f      	movs	r3, #15
    229c:	18fb      	adds	r3, r7, r3
    229e:	3230      	adds	r2, #48	; 0x30
    22a0:	701a      	strb	r2, [r3, #0]

		if(c > '9') 
    22a2:	230f      	movs	r3, #15
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	781b      	ldrb	r3, [r3, #0]
    22a8:	2b39      	cmp	r3, #57	; 0x39
    22aa:	d906      	bls.n	22ba <UTILS_HexToString+0x82>
			c += 7; //Handles vals 'A - F'
    22ac:	230f      	movs	r3, #15
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	220f      	movs	r2, #15
    22b2:	18ba      	adds	r2, r7, r2
    22b4:	7812      	ldrb	r2, [r2, #0]
    22b6:	3207      	adds	r2, #7
    22b8:	701a      	strb	r2, [r3, #0]
		
		_stringBuffer[--digits + 2] = c; //Add each digit to buffer
    22ba:	2317      	movs	r3, #23
    22bc:	18fb      	adds	r3, r7, r3
    22be:	2217      	movs	r2, #23
    22c0:	18ba      	adds	r2, r7, r2
    22c2:	7812      	ldrb	r2, [r2, #0]
    22c4:	3a01      	subs	r2, #1
    22c6:	701a      	strb	r2, [r3, #0]
    22c8:	2317      	movs	r3, #23
    22ca:	18fb      	adds	r3, r7, r3
    22cc:	781b      	ldrb	r3, [r3, #0]
    22ce:	3302      	adds	r3, #2
    22d0:	4a07      	ldr	r2, [pc, #28]	; (22f0 <UTILS_HexToString+0xb8>)
    22d2:	210f      	movs	r1, #15
    22d4:	1879      	adds	r1, r7, r1
    22d6:	7809      	ldrb	r1, [r1, #0]
    22d8:	54d1      	strb	r1, [r2, r3]
		
	}while (val /= 16);
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	091b      	lsrs	r3, r3, #4
    22de:	607b      	str	r3, [r7, #4]
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	2b00      	cmp	r3, #0
    22e4:	d1d4      	bne.n	2290 <UTILS_HexToString+0x58>

	return &_stringBuffer[0];
    22e6:	4b02      	ldr	r3, [pc, #8]	; (22f0 <UTILS_HexToString+0xb8>)
}
    22e8:	0018      	movs	r0, r3
    22ea:	46bd      	mov	sp, r7
    22ec:	b006      	add	sp, #24
    22ee:	bd80      	pop	{r7, pc}
    22f0:	2000078c 	.word	0x2000078c

000022f4 <WDT_Handler>:
//=========================================================================
// Interrupt
//=========================================================================

void WDT_Handler(void)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	b082      	sub	sp, #8
    22f8:	af00      	add	r7, sp, #0
	if(_callbackFunction)
    22fa:	4b08      	ldr	r3, [pc, #32]	; (231c <WDT_Handler+0x28>)
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	2b00      	cmp	r3, #0
    2300:	d004      	beq.n	230c <WDT_Handler+0x18>
	{
		wdtFunction callback = (wdtFunction)_callbackFunction;
    2302:	4b06      	ldr	r3, [pc, #24]	; (231c <WDT_Handler+0x28>)
    2304:	681b      	ldr	r3, [r3, #0]
    2306:	607b      	str	r3, [r7, #4]
		callback();
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	4798      	blx	r3
	}

	WDT->INTFLAG.reg = 0x01;
    230c:	4b04      	ldr	r3, [pc, #16]	; (2320 <WDT_Handler+0x2c>)
    230e:	2201      	movs	r2, #1
    2310:	719a      	strb	r2, [r3, #6]
}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	46bd      	mov	sp, r7
    2316:	b002      	add	sp, #8
    2318:	bd80      	pop	{r7, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	20000798 	.word	0x20000798
    2320:	40002000 	.word	0x40002000

00002324 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2324:	b580      	push	{r7, lr}
    2326:	b082      	sub	sp, #8
    2328:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    232a:	4b16      	ldr	r3, [pc, #88]	; (2384 <Reset_Handler+0x60>)
    232c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    232e:	4b16      	ldr	r3, [pc, #88]	; (2388 <Reset_Handler+0x64>)
    2330:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2332:	687a      	ldr	r2, [r7, #4]
    2334:	683b      	ldr	r3, [r7, #0]
    2336:	429a      	cmp	r2, r3
    2338:	d00c      	beq.n	2354 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    233a:	e007      	b.n	234c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    233c:	683b      	ldr	r3, [r7, #0]
    233e:	1d1a      	adds	r2, r3, #4
    2340:	603a      	str	r2, [r7, #0]
    2342:	687a      	ldr	r2, [r7, #4]
    2344:	1d11      	adds	r1, r2, #4
    2346:	6079      	str	r1, [r7, #4]
    2348:	6812      	ldr	r2, [r2, #0]
    234a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    234c:	683a      	ldr	r2, [r7, #0]
    234e:	4b0f      	ldr	r3, [pc, #60]	; (238c <Reset_Handler+0x68>)
    2350:	429a      	cmp	r2, r3
    2352:	d3f3      	bcc.n	233c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2354:	4b0e      	ldr	r3, [pc, #56]	; (2390 <Reset_Handler+0x6c>)
    2356:	603b      	str	r3, [r7, #0]
    2358:	e004      	b.n	2364 <Reset_Handler+0x40>
                *pDest++ = 0;
    235a:	683b      	ldr	r3, [r7, #0]
    235c:	1d1a      	adds	r2, r3, #4
    235e:	603a      	str	r2, [r7, #0]
    2360:	2200      	movs	r2, #0
    2362:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    2364:	683a      	ldr	r2, [r7, #0]
    2366:	4b0b      	ldr	r3, [pc, #44]	; (2394 <Reset_Handler+0x70>)
    2368:	429a      	cmp	r2, r3
    236a:	d3f6      	bcc.n	235a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    236c:	4b0a      	ldr	r3, [pc, #40]	; (2398 <Reset_Handler+0x74>)
    236e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2370:	4b0a      	ldr	r3, [pc, #40]	; (239c <Reset_Handler+0x78>)
    2372:	687a      	ldr	r2, [r7, #4]
    2374:	21ff      	movs	r1, #255	; 0xff
    2376:	438a      	bics	r2, r1
    2378:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    237a:	4b09      	ldr	r3, [pc, #36]	; (23a0 <Reset_Handler+0x7c>)
    237c:	4798      	blx	r3

        /* Branch to main function */
        main();
    237e:	4b09      	ldr	r3, [pc, #36]	; (23a4 <Reset_Handler+0x80>)
    2380:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2382:	e7fe      	b.n	2382 <Reset_Handler+0x5e>
    2384:	000061d4 	.word	0x000061d4
    2388:	20000000 	.word	0x20000000
    238c:	200006a0 	.word	0x200006a0
    2390:	200006a0 	.word	0x200006a0
    2394:	200008f0 	.word	0x200008f0
    2398:	00000000 	.word	0x00000000
    239c:	e000ed00 	.word	0xe000ed00
    23a0:	00005cf5 	.word	0x00005cf5
    23a4:	00003df1 	.word	0x00003df1

000023a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    23a8:	b580      	push	{r7, lr}
    23aa:	af00      	add	r7, sp, #0
        while (1) {
    23ac:	e7fe      	b.n	23ac <Dummy_Handler+0x4>
	...

000023b0 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	af00      	add	r7, sp, #0
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    23b4:	4b02      	ldr	r3, [pc, #8]	; (23c0 <SystemInit+0x10>)
    23b6:	4a03      	ldr	r2, [pc, #12]	; (23c4 <SystemInit+0x14>)
    23b8:	601a      	str	r2, [r3, #0]
	return;
    23ba:	46c0      	nop			; (mov r8, r8)
}
    23bc:	46bd      	mov	sp, r7
    23be:	bd80      	pop	{r7, pc}
    23c0:	20000048 	.word	0x20000048
    23c4:	000f4240 	.word	0x000f4240

000023c8 <AFE_Init>:

//=========================================================================
// Implementations
//=========================================================================
void AFE_Init(SPI_t *spi)
{
    23c8:	b590      	push	{r4, r7, lr}
    23ca:	b085      	sub	sp, #20
    23cc:	af02      	add	r7, sp, #8
    23ce:	6078      	str	r0, [r7, #4]
	DEBUG_WriteLine("Initializing AFE Library.");
    23d0:	4b27      	ldr	r3, [pc, #156]	; (2470 <AFE_Init+0xa8>)
    23d2:	0018      	movs	r0, r3
    23d4:	4b27      	ldr	r3, [pc, #156]	; (2474 <AFE_Init+0xac>)
    23d6:	4798      	blx	r3

	//Init SPI
	_spiLine = spi;
    23d8:	4b27      	ldr	r3, [pc, #156]	; (2478 <AFE_Init+0xb0>)
    23da:	687a      	ldr	r2, [r7, #4]
    23dc:	601a      	str	r2, [r3, #0]
	SPI_Init(_spiLine);
    23de:	4b26      	ldr	r3, [pc, #152]	; (2478 <AFE_Init+0xb0>)
    23e0:	681b      	ldr	r3, [r3, #0]
    23e2:	0018      	movs	r0, r3
    23e4:	4b25      	ldr	r3, [pc, #148]	; (247c <AFE_Init+0xb4>)
    23e6:	4798      	blx	r3

	//Setup Chip Select Pin
	MCU_PinSetup(SPI_AFE_CS_PORT, SPI_AFE_CS_PIN, 1, 1, FALSE, FALSE);
    23e8:	2300      	movs	r3, #0
    23ea:	9301      	str	r3, [sp, #4]
    23ec:	2300      	movs	r3, #0
    23ee:	9300      	str	r3, [sp, #0]
    23f0:	2301      	movs	r3, #1
    23f2:	2201      	movs	r2, #1
    23f4:	2104      	movs	r1, #4
    23f6:	2000      	movs	r0, #0
    23f8:	4c21      	ldr	r4, [pc, #132]	; (2480 <AFE_Init+0xb8>)
    23fa:	47a0      	blx	r4
	//Setup the Enable Pin
	MCU_PinSetup(SPI_AFE_EN_PORT, SPI_AFE_EN_PIN, 1, SPI_AFE_EN_CHIP_ON, FALSE, FALSE);
    23fc:	2300      	movs	r3, #0
    23fe:	9301      	str	r3, [sp, #4]
    2400:	2300      	movs	r3, #0
    2402:	9300      	str	r3, [sp, #0]
    2404:	2301      	movs	r3, #1
    2406:	2201      	movs	r2, #1
    2408:	211e      	movs	r1, #30
    240a:	2001      	movs	r0, #1
    240c:	4c1c      	ldr	r4, [pc, #112]	; (2480 <AFE_Init+0xb8>)
    240e:	47a0      	blx	r4
	//Setup the Rst Pin
	MCU_PinSetup(SPI_AFE_RST_PORT, SPI_AFE_RST_PIN, 1, SPI_AFE_RST_CHIP_ON, FALSE, FALSE);
    2410:	2300      	movs	r3, #0
    2412:	9301      	str	r3, [sp, #4]
    2414:	2300      	movs	r3, #0
    2416:	9300      	str	r3, [sp, #0]
    2418:	2300      	movs	r3, #0
    241a:	2201      	movs	r2, #1
    241c:	2102      	movs	r1, #2
    241e:	2002      	movs	r0, #2
    2420:	4c17      	ldr	r4, [pc, #92]	; (2480 <AFE_Init+0xb8>)
    2422:	47a0      	blx	r4

	/*Setup Defaults*/
	_afe.Config0 = AFE_CONFIG0_TX_FREQ_DIV_8 | AFE_CONFIG0_NUM_TX(5);
    2424:	4b17      	ldr	r3, [pc, #92]	; (2484 <AFE_Init+0xbc>)
    2426:	2245      	movs	r2, #69	; 0x45
    2428:	705a      	strb	r2, [r3, #1]
	_afe.Config1 = AFE_CONFIG1_NUM_RX_5 | AFE_CONFIG1_NUM_AVG_1_CYCLES;
    242a:	4b16      	ldr	r3, [pc, #88]	; (2484 <AFE_Init+0xbc>)
    242c:	2205      	movs	r2, #5
    242e:	709a      	strb	r2, [r3, #2]
	_afe.Config2 = AFE_CONFIG2_TOF_MEAS_MODE_2 |  AFE_CONFIG2_EXT_CHSEL_ENABLE;
    2430:	4b14      	ldr	r3, [pc, #80]	; (2484 <AFE_Init+0xbc>)
    2432:	220a      	movs	r2, #10
    2434:	70da      	strb	r2, [r3, #3]
	_afe.Config3 = AFE_CONFIG3_ECHO_QUAL_THLD_125 | AFE_CONFIG3_BLANKING_ENABLE;
    2436:	4b13      	ldr	r3, [pc, #76]	; (2484 <AFE_Init+0xbc>)
    2438:	220b      	movs	r2, #11
    243a:	711a      	strb	r2, [r3, #4]
	_afe.Config4 = AFE_CONFIG4_TX_PH_SHIFT_POS(31);
    243c:	4b11      	ldr	r3, [pc, #68]	; (2484 <AFE_Init+0xbc>)
    243e:	221f      	movs	r2, #31
    2440:	715a      	strb	r2, [r3, #5]
	_afe.TOF_1 = AFE_TOF1_PGA_GAIN_3db;// AFE_TOF1_LNA_CTRL_BYPASS;
    2442:	4b10      	ldr	r3, [pc, #64]	; (2484 <AFE_Init+0xbc>)
    2444:	2220      	movs	r2, #32
    2446:	719a      	strb	r2, [r3, #6]
	_afe.TOF_0 = AFE_TOF0_TIMING_REG(38);
    2448:	4b0e      	ldr	r3, [pc, #56]	; (2484 <AFE_Init+0xbc>)
    244a:	2226      	movs	r2, #38	; 0x26
    244c:	71da      	strb	r2, [r3, #7]
	_afe.ErrorFlags = 7;
    244e:	4b0d      	ldr	r3, [pc, #52]	; (2484 <AFE_Init+0xbc>)
    2450:	2207      	movs	r2, #7
    2452:	721a      	strb	r2, [r3, #8]
	_afe.Timeout = AFE_TIMEOUT_BLANK_SHORT_PERIOD_128 | AFE_TIMEOUT_TOF_CTRL_512;
    2454:	4b0b      	ldr	r3, [pc, #44]	; (2484 <AFE_Init+0xbc>)
    2456:	2222      	movs	r2, #34	; 0x22
    2458:	725a      	strb	r2, [r3, #9]
	_afe.ClockRate = AFE_CLOCK_RATE_CLK_IN_DIV_1 | AFE_CLOCK_RATE_ATUO_ZERO_64;
    245a:	4b0a      	ldr	r3, [pc, #40]	; (2484 <AFE_Init+0xbc>)
    245c:	2200      	movs	r2, #0
    245e:	729a      	strb	r2, [r3, #10]
	
	//Write default values to AFE Chip
	afe_writeAllValues();
    2460:	4b09      	ldr	r3, [pc, #36]	; (2488 <AFE_Init+0xc0>)
    2462:	4798      	blx	r3
	
	AFE_PrintValues();
    2464:	4b09      	ldr	r3, [pc, #36]	; (248c <AFE_Init+0xc4>)
    2466:	4798      	blx	r3
}
    2468:	46c0      	nop			; (mov r8, r8)
    246a:	46bd      	mov	sp, r7
    246c:	b003      	add	sp, #12
    246e:	bd90      	pop	{r4, r7, pc}
    2470:	00005ef0 	.word	0x00005ef0
    2474:	00000509 	.word	0x00000509
    2478:	2000079c 	.word	0x2000079c
    247c:	00001a75 	.word	0x00001a75
    2480:	000001d5 	.word	0x000001d5
    2484:	200007a4 	.word	0x200007a4
    2488:	000025e5 	.word	0x000025e5
    248c:	00002491 	.word	0x00002491

00002490 <AFE_PrintValues>:

void AFE_PrintValues(void)
{
    2490:	b580      	push	{r7, lr}
    2492:	af00      	add	r7, sp, #0
	afe_loadAllValues();
    2494:	4b2e      	ldr	r3, [pc, #184]	; (2550 <AFE_PrintValues+0xc0>)
    2496:	4798      	blx	r3

	DEBUG_WriteLine("---AFE Values---");
    2498:	4b2e      	ldr	r3, [pc, #184]	; (2554 <AFE_PrintValues+0xc4>)
    249a:	0018      	movs	r0, r3
    249c:	4b2e      	ldr	r3, [pc, #184]	; (2558 <AFE_PrintValues+0xc8>)
    249e:	4798      	blx	r3

	DEBUG_WriteHex("Config0: ", _afe.Config0);
    24a0:	4b2e      	ldr	r3, [pc, #184]	; (255c <AFE_PrintValues+0xcc>)
    24a2:	785b      	ldrb	r3, [r3, #1]
    24a4:	001a      	movs	r2, r3
    24a6:	4b2e      	ldr	r3, [pc, #184]	; (2560 <AFE_PrintValues+0xd0>)
    24a8:	0011      	movs	r1, r2
    24aa:	0018      	movs	r0, r3
    24ac:	4b2d      	ldr	r3, [pc, #180]	; (2564 <AFE_PrintValues+0xd4>)
    24ae:	4798      	blx	r3
	DEBUG_WriteHex("Config1: ", _afe.Config1);
    24b0:	4b2a      	ldr	r3, [pc, #168]	; (255c <AFE_PrintValues+0xcc>)
    24b2:	789b      	ldrb	r3, [r3, #2]
    24b4:	001a      	movs	r2, r3
    24b6:	4b2c      	ldr	r3, [pc, #176]	; (2568 <AFE_PrintValues+0xd8>)
    24b8:	0011      	movs	r1, r2
    24ba:	0018      	movs	r0, r3
    24bc:	4b29      	ldr	r3, [pc, #164]	; (2564 <AFE_PrintValues+0xd4>)
    24be:	4798      	blx	r3
	DEBUG_WriteHex("Config2: ", _afe.Config2);
    24c0:	4b26      	ldr	r3, [pc, #152]	; (255c <AFE_PrintValues+0xcc>)
    24c2:	78db      	ldrb	r3, [r3, #3]
    24c4:	001a      	movs	r2, r3
    24c6:	4b29      	ldr	r3, [pc, #164]	; (256c <AFE_PrintValues+0xdc>)
    24c8:	0011      	movs	r1, r2
    24ca:	0018      	movs	r0, r3
    24cc:	4b25      	ldr	r3, [pc, #148]	; (2564 <AFE_PrintValues+0xd4>)
    24ce:	4798      	blx	r3
	DEBUG_WriteHex("Config3: ", _afe.Config3);
    24d0:	4b22      	ldr	r3, [pc, #136]	; (255c <AFE_PrintValues+0xcc>)
    24d2:	791b      	ldrb	r3, [r3, #4]
    24d4:	001a      	movs	r2, r3
    24d6:	4b26      	ldr	r3, [pc, #152]	; (2570 <AFE_PrintValues+0xe0>)
    24d8:	0011      	movs	r1, r2
    24da:	0018      	movs	r0, r3
    24dc:	4b21      	ldr	r3, [pc, #132]	; (2564 <AFE_PrintValues+0xd4>)
    24de:	4798      	blx	r3
	DEBUG_WriteHex("Config4: ", _afe.Config4);
    24e0:	4b1e      	ldr	r3, [pc, #120]	; (255c <AFE_PrintValues+0xcc>)
    24e2:	795b      	ldrb	r3, [r3, #5]
    24e4:	001a      	movs	r2, r3
    24e6:	4b23      	ldr	r3, [pc, #140]	; (2574 <AFE_PrintValues+0xe4>)
    24e8:	0011      	movs	r1, r2
    24ea:	0018      	movs	r0, r3
    24ec:	4b1d      	ldr	r3, [pc, #116]	; (2564 <AFE_PrintValues+0xd4>)
    24ee:	4798      	blx	r3
	DEBUG_WriteHex("TOF1: ", _afe.TOF_1);
    24f0:	4b1a      	ldr	r3, [pc, #104]	; (255c <AFE_PrintValues+0xcc>)
    24f2:	799b      	ldrb	r3, [r3, #6]
    24f4:	001a      	movs	r2, r3
    24f6:	4b20      	ldr	r3, [pc, #128]	; (2578 <AFE_PrintValues+0xe8>)
    24f8:	0011      	movs	r1, r2
    24fa:	0018      	movs	r0, r3
    24fc:	4b19      	ldr	r3, [pc, #100]	; (2564 <AFE_PrintValues+0xd4>)
    24fe:	4798      	blx	r3
	DEBUG_WriteHex("TOF0: ", _afe.TOF_0);
    2500:	4b16      	ldr	r3, [pc, #88]	; (255c <AFE_PrintValues+0xcc>)
    2502:	79db      	ldrb	r3, [r3, #7]
    2504:	001a      	movs	r2, r3
    2506:	4b1d      	ldr	r3, [pc, #116]	; (257c <AFE_PrintValues+0xec>)
    2508:	0011      	movs	r1, r2
    250a:	0018      	movs	r0, r3
    250c:	4b15      	ldr	r3, [pc, #84]	; (2564 <AFE_PrintValues+0xd4>)
    250e:	4798      	blx	r3
	DEBUG_WriteHex("Error Flags: ", _afe.ErrorFlags);
    2510:	4b12      	ldr	r3, [pc, #72]	; (255c <AFE_PrintValues+0xcc>)
    2512:	7a1b      	ldrb	r3, [r3, #8]
    2514:	001a      	movs	r2, r3
    2516:	4b1a      	ldr	r3, [pc, #104]	; (2580 <AFE_PrintValues+0xf0>)
    2518:	0011      	movs	r1, r2
    251a:	0018      	movs	r0, r3
    251c:	4b11      	ldr	r3, [pc, #68]	; (2564 <AFE_PrintValues+0xd4>)
    251e:	4798      	blx	r3
	DEBUG_WriteHex("Timeouts: ", _afe.Timeout);
    2520:	4b0e      	ldr	r3, [pc, #56]	; (255c <AFE_PrintValues+0xcc>)
    2522:	7a5b      	ldrb	r3, [r3, #9]
    2524:	001a      	movs	r2, r3
    2526:	4b17      	ldr	r3, [pc, #92]	; (2584 <AFE_PrintValues+0xf4>)
    2528:	0011      	movs	r1, r2
    252a:	0018      	movs	r0, r3
    252c:	4b0d      	ldr	r3, [pc, #52]	; (2564 <AFE_PrintValues+0xd4>)
    252e:	4798      	blx	r3
	DEBUG_WriteHex("Clock Rage: ", _afe.ClockRate);
    2530:	4b0a      	ldr	r3, [pc, #40]	; (255c <AFE_PrintValues+0xcc>)
    2532:	7a9b      	ldrb	r3, [r3, #10]
    2534:	001a      	movs	r2, r3
    2536:	4b14      	ldr	r3, [pc, #80]	; (2588 <AFE_PrintValues+0xf8>)
    2538:	0011      	movs	r1, r2
    253a:	0018      	movs	r0, r3
    253c:	4b09      	ldr	r3, [pc, #36]	; (2564 <AFE_PrintValues+0xd4>)
    253e:	4798      	blx	r3
	DEBUG_WriteLine("\r\n\r\n");
    2540:	4b12      	ldr	r3, [pc, #72]	; (258c <AFE_PrintValues+0xfc>)
    2542:	0018      	movs	r0, r3
    2544:	4b04      	ldr	r3, [pc, #16]	; (2558 <AFE_PrintValues+0xc8>)
    2546:	4798      	blx	r3
}
    2548:	46c0      	nop			; (mov r8, r8)
    254a:	46bd      	mov	sp, r7
    254c:	bd80      	pop	{r7, pc}
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	00002591 	.word	0x00002591
    2554:	00005f0c 	.word	0x00005f0c
    2558:	00000509 	.word	0x00000509
    255c:	200007a4 	.word	0x200007a4
    2560:	00005f20 	.word	0x00005f20
    2564:	0000054d 	.word	0x0000054d
    2568:	00005f2c 	.word	0x00005f2c
    256c:	00005f38 	.word	0x00005f38
    2570:	00005f44 	.word	0x00005f44
    2574:	00005f50 	.word	0x00005f50
    2578:	00005f5c 	.word	0x00005f5c
    257c:	00005f64 	.word	0x00005f64
    2580:	00005f6c 	.word	0x00005f6c
    2584:	00005f7c 	.word	0x00005f7c
    2588:	00005f88 	.word	0x00005f88
    258c:	00005f98 	.word	0x00005f98

00002590 <afe_loadAllValues>:

static void afe_loadAllValues(void)
{
    2590:	b590      	push	{r4, r7, lr}
    2592:	b083      	sub	sp, #12
    2594:	af00      	add	r7, sp, #0
	uint8_t *afeReg = &_afe.Config0;
    2596:	4b10      	ldr	r3, [pc, #64]	; (25d8 <afe_loadAllValues+0x48>)
    2598:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < AFE_TOTAL_REGISTERS; i++)
    259a:	1dfb      	adds	r3, r7, #7
    259c:	2200      	movs	r2, #0
    259e:	701a      	strb	r2, [r3, #0]
    25a0:	e00f      	b.n	25c2 <afe_loadAllValues+0x32>
		afeReg[i] = afe_getRegister(i);
    25a2:	1dfb      	adds	r3, r7, #7
    25a4:	781b      	ldrb	r3, [r3, #0]
    25a6:	683a      	ldr	r2, [r7, #0]
    25a8:	18d4      	adds	r4, r2, r3
    25aa:	1dfb      	adds	r3, r7, #7
    25ac:	781b      	ldrb	r3, [r3, #0]
    25ae:	0018      	movs	r0, r3
    25b0:	4b0a      	ldr	r3, [pc, #40]	; (25dc <afe_loadAllValues+0x4c>)
    25b2:	4798      	blx	r3
    25b4:	0003      	movs	r3, r0
    25b6:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < AFE_TOTAL_REGISTERS; i++)
    25b8:	1dfb      	adds	r3, r7, #7
    25ba:	781a      	ldrb	r2, [r3, #0]
    25bc:	1dfb      	adds	r3, r7, #7
    25be:	3201      	adds	r2, #1
    25c0:	701a      	strb	r2, [r3, #0]
    25c2:	1dfb      	adds	r3, r7, #7
    25c4:	781b      	ldrb	r3, [r3, #0]
    25c6:	2b09      	cmp	r3, #9
    25c8:	d9eb      	bls.n	25a2 <afe_loadAllValues+0x12>

	_afe.Status = Normal;
    25ca:	4b05      	ldr	r3, [pc, #20]	; (25e0 <afe_loadAllValues+0x50>)
    25cc:	2201      	movs	r2, #1
    25ce:	701a      	strb	r2, [r3, #0]
}
    25d0:	46c0      	nop			; (mov r8, r8)
    25d2:	46bd      	mov	sp, r7
    25d4:	b003      	add	sp, #12
    25d6:	bd90      	pop	{r4, r7, pc}
    25d8:	200007a5 	.word	0x200007a5
    25dc:	00002639 	.word	0x00002639
    25e0:	200007a4 	.word	0x200007a4

000025e4 <afe_writeAllValues>:

static void afe_writeAllValues(void)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	af00      	add	r7, sp, #0
	uint8_t *afeReg = &_afe.Config0;
    25ea:	4b10      	ldr	r3, [pc, #64]	; (262c <afe_writeAllValues+0x48>)
    25ec:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < AFE_TOTAL_REGISTERS; i++)
    25ee:	1dfb      	adds	r3, r7, #7
    25f0:	2200      	movs	r2, #0
    25f2:	701a      	strb	r2, [r3, #0]
    25f4:	e00f      	b.n	2616 <afe_writeAllValues+0x32>
		afe_setRegister(i, afeReg[i]);
    25f6:	1dfb      	adds	r3, r7, #7
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	683a      	ldr	r2, [r7, #0]
    25fc:	18d3      	adds	r3, r2, r3
    25fe:	781a      	ldrb	r2, [r3, #0]
    2600:	1dfb      	adds	r3, r7, #7
    2602:	781b      	ldrb	r3, [r3, #0]
    2604:	0011      	movs	r1, r2
    2606:	0018      	movs	r0, r3
    2608:	4b09      	ldr	r3, [pc, #36]	; (2630 <afe_writeAllValues+0x4c>)
    260a:	4798      	blx	r3
	for(uint8_t i = 0; i < AFE_TOTAL_REGISTERS; i++)
    260c:	1dfb      	adds	r3, r7, #7
    260e:	781a      	ldrb	r2, [r3, #0]
    2610:	1dfb      	adds	r3, r7, #7
    2612:	3201      	adds	r2, #1
    2614:	701a      	strb	r2, [r3, #0]
    2616:	1dfb      	adds	r3, r7, #7
    2618:	781b      	ldrb	r3, [r3, #0]
    261a:	2b09      	cmp	r3, #9
    261c:	d9eb      	bls.n	25f6 <afe_writeAllValues+0x12>

	_afe.Status = Normal;
    261e:	4b05      	ldr	r3, [pc, #20]	; (2634 <afe_writeAllValues+0x50>)
    2620:	2201      	movs	r2, #1
    2622:	701a      	strb	r2, [r3, #0]
}
    2624:	46c0      	nop			; (mov r8, r8)
    2626:	46bd      	mov	sp, r7
    2628:	b002      	add	sp, #8
    262a:	bd80      	pop	{r7, pc}
    262c:	200007a5 	.word	0x200007a5
    2630:	000026bd 	.word	0x000026bd
    2634:	200007a4 	.word	0x200007a4

00002638 <afe_getRegister>:

static uint8_t afe_getRegister(uint8_t reg)
{
    2638:	b580      	push	{r7, lr}
    263a:	b082      	sub	sp, #8
    263c:	af00      	add	r7, sp, #0
    263e:	0002      	movs	r2, r0
    2640:	1dfb      	adds	r3, r7, #7
    2642:	701a      	strb	r2, [r3, #0]
	reg = reg & 0b00111111;
    2644:	1dfb      	adds	r3, r7, #7
    2646:	1dfa      	adds	r2, r7, #7
    2648:	7812      	ldrb	r2, [r2, #0]
    264a:	213f      	movs	r1, #63	; 0x3f
    264c:	400a      	ands	r2, r1
    264e:	701a      	strb	r2, [r3, #0]

	SPI_TxSendChar(_spiLine, reg, TRUE);
    2650:	4b14      	ldr	r3, [pc, #80]	; (26a4 <afe_getRegister+0x6c>)
    2652:	6818      	ldr	r0, [r3, #0]
    2654:	1dfb      	adds	r3, r7, #7
    2656:	781b      	ldrb	r3, [r3, #0]
    2658:	2201      	movs	r2, #1
    265a:	0019      	movs	r1, r3
    265c:	4b12      	ldr	r3, [pc, #72]	; (26a8 <afe_getRegister+0x70>)
    265e:	4798      	blx	r3
	SPI_TxSendChar(_spiLine, 0x00, FALSE);
    2660:	4b10      	ldr	r3, [pc, #64]	; (26a4 <afe_getRegister+0x6c>)
    2662:	681b      	ldr	r3, [r3, #0]
    2664:	2200      	movs	r2, #0
    2666:	2100      	movs	r1, #0
    2668:	0018      	movs	r0, r3
    266a:	4b0f      	ldr	r3, [pc, #60]	; (26a8 <afe_getRegister+0x70>)
    266c:	4798      	blx	r3

	_txInProgress = TRUE;
    266e:	4b0f      	ldr	r3, [pc, #60]	; (26ac <afe_getRegister+0x74>)
    2670:	2201      	movs	r2, #1
    2672:	701a      	strb	r2, [r3, #0]

	//Set Slave Select to 0
	afe_setSlaveSelect(0);
    2674:	2000      	movs	r0, #0
    2676:	4b0e      	ldr	r3, [pc, #56]	; (26b0 <afe_getRegister+0x78>)
    2678:	4798      	blx	r3

	SPI_TxMasterTransfer(_spiLine);
    267a:	4b0a      	ldr	r3, [pc, #40]	; (26a4 <afe_getRegister+0x6c>)
    267c:	681b      	ldr	r3, [r3, #0]
    267e:	0018      	movs	r0, r3
    2680:	4b0c      	ldr	r3, [pc, #48]	; (26b4 <afe_getRegister+0x7c>)
    2682:	4798      	blx	r3

	while(_txInProgress)
    2684:	e001      	b.n	268a <afe_getRegister+0x52>
		afe_taskHandler();
    2686:	4b0c      	ldr	r3, [pc, #48]	; (26b8 <afe_getRegister+0x80>)
    2688:	4798      	blx	r3
	while(_txInProgress)
    268a:	4b08      	ldr	r3, [pc, #32]	; (26ac <afe_getRegister+0x74>)
    268c:	781b      	ldrb	r3, [r3, #0]
    268e:	2b00      	cmp	r3, #0
    2690:	d1f9      	bne.n	2686 <afe_getRegister+0x4e>

	return _spiLine->rxBuffer[1];
    2692:	4b04      	ldr	r3, [pc, #16]	; (26a4 <afe_getRegister+0x6c>)
    2694:	681a      	ldr	r2, [r3, #0]
    2696:	230a      	movs	r3, #10
    2698:	33ff      	adds	r3, #255	; 0xff
    269a:	5cd3      	ldrb	r3, [r2, r3]
}
    269c:	0018      	movs	r0, r3
    269e:	46bd      	mov	sp, r7
    26a0:	b002      	add	sp, #8
    26a2:	bd80      	pop	{r7, pc}
    26a4:	2000079c 	.word	0x2000079c
    26a8:	00001ac5 	.word	0x00001ac5
    26ac:	200007a0 	.word	0x200007a0
    26b0:	0000274d 	.word	0x0000274d
    26b4:	00001b21 	.word	0x00001b21
    26b8:	00002775 	.word	0x00002775

000026bc <afe_setRegister>:

static void afe_setRegister(uint8_t reg, uint8_t val)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b082      	sub	sp, #8
    26c0:	af00      	add	r7, sp, #0
    26c2:	0002      	movs	r2, r0
    26c4:	1dfb      	adds	r3, r7, #7
    26c6:	701a      	strb	r2, [r3, #0]
    26c8:	1dbb      	adds	r3, r7, #6
    26ca:	1c0a      	adds	r2, r1, #0
    26cc:	701a      	strb	r2, [r3, #0]
	reg = reg & 0b00111111;
    26ce:	1dfb      	adds	r3, r7, #7
    26d0:	1dfa      	adds	r2, r7, #7
    26d2:	7812      	ldrb	r2, [r2, #0]
    26d4:	213f      	movs	r1, #63	; 0x3f
    26d6:	400a      	ands	r2, r1
    26d8:	701a      	strb	r2, [r3, #0]
	reg |= 0b01000000;
    26da:	1dfb      	adds	r3, r7, #7
    26dc:	1dfa      	adds	r2, r7, #7
    26de:	7812      	ldrb	r2, [r2, #0]
    26e0:	2140      	movs	r1, #64	; 0x40
    26e2:	430a      	orrs	r2, r1
    26e4:	701a      	strb	r2, [r3, #0]

	SPI_TxSendChar(_spiLine, reg, TRUE);
    26e6:	4b13      	ldr	r3, [pc, #76]	; (2734 <afe_setRegister+0x78>)
    26e8:	6818      	ldr	r0, [r3, #0]
    26ea:	1dfb      	adds	r3, r7, #7
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	2201      	movs	r2, #1
    26f0:	0019      	movs	r1, r3
    26f2:	4b11      	ldr	r3, [pc, #68]	; (2738 <afe_setRegister+0x7c>)
    26f4:	4798      	blx	r3
	SPI_TxSendChar(_spiLine, val, FALSE);
    26f6:	4b0f      	ldr	r3, [pc, #60]	; (2734 <afe_setRegister+0x78>)
    26f8:	6818      	ldr	r0, [r3, #0]
    26fa:	1dbb      	adds	r3, r7, #6
    26fc:	781b      	ldrb	r3, [r3, #0]
    26fe:	2200      	movs	r2, #0
    2700:	0019      	movs	r1, r3
    2702:	4b0d      	ldr	r3, [pc, #52]	; (2738 <afe_setRegister+0x7c>)
    2704:	4798      	blx	r3

	_txInProgress = TRUE;
    2706:	4b0d      	ldr	r3, [pc, #52]	; (273c <afe_setRegister+0x80>)
    2708:	2201      	movs	r2, #1
    270a:	701a      	strb	r2, [r3, #0]

	//Set Slave Select to 0
	afe_setSlaveSelect(0);
    270c:	2000      	movs	r0, #0
    270e:	4b0c      	ldr	r3, [pc, #48]	; (2740 <afe_setRegister+0x84>)
    2710:	4798      	blx	r3

	SPI_TxMasterTransfer(_spiLine);
    2712:	4b08      	ldr	r3, [pc, #32]	; (2734 <afe_setRegister+0x78>)
    2714:	681b      	ldr	r3, [r3, #0]
    2716:	0018      	movs	r0, r3
    2718:	4b0a      	ldr	r3, [pc, #40]	; (2744 <afe_setRegister+0x88>)
    271a:	4798      	blx	r3

	while(_txInProgress)
    271c:	e001      	b.n	2722 <afe_setRegister+0x66>
		afe_taskHandler();
    271e:	4b0a      	ldr	r3, [pc, #40]	; (2748 <afe_setRegister+0x8c>)
    2720:	4798      	blx	r3
	while(_txInProgress)
    2722:	4b06      	ldr	r3, [pc, #24]	; (273c <afe_setRegister+0x80>)
    2724:	781b      	ldrb	r3, [r3, #0]
    2726:	2b00      	cmp	r3, #0
    2728:	d1f9      	bne.n	271e <afe_setRegister+0x62>
}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	46bd      	mov	sp, r7
    272e:	b002      	add	sp, #8
    2730:	bd80      	pop	{r7, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	2000079c 	.word	0x2000079c
    2738:	00001ac5 	.word	0x00001ac5
    273c:	200007a0 	.word	0x200007a0
    2740:	0000274d 	.word	0x0000274d
    2744:	00001b21 	.word	0x00001b21
    2748:	00002775 	.word	0x00002775

0000274c <afe_setSlaveSelect>:

static void afe_setSlaveSelect(uint8_t val)
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
    2752:	0002      	movs	r2, r0
    2754:	1dfb      	adds	r3, r7, #7
    2756:	701a      	strb	r2, [r3, #0]
	MCU_SetPinState(SPI_AFE_CS_PORT, SPI_AFE_CS_PIN, val);
    2758:	1dfb      	adds	r3, r7, #7
    275a:	781b      	ldrb	r3, [r3, #0]
    275c:	001a      	movs	r2, r3
    275e:	2104      	movs	r1, #4
    2760:	2000      	movs	r0, #0
    2762:	4b03      	ldr	r3, [pc, #12]	; (2770 <afe_setSlaveSelect+0x24>)
    2764:	4798      	blx	r3
}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	46bd      	mov	sp, r7
    276a:	b002      	add	sp, #8
    276c:	bd80      	pop	{r7, pc}
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	000003a1 	.word	0x000003a1

00002774 <afe_taskHandler>:

//=========================================================================
// TaskHandler
//=========================================================================
static void afe_taskHandler(void)
{
    2774:	b580      	push	{r7, lr}
    2776:	af00      	add	r7, sp, #0
	if(_spiLine->txSize && _spiLine->txIndex >= _spiLine->txSize && _spiLine->rxIndex >= _spiLine->txSize)
    2778:	4b14      	ldr	r3, [pc, #80]	; (27cc <afe_taskHandler+0x58>)
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	4a14      	ldr	r2, [pc, #80]	; (27d0 <afe_taskHandler+0x5c>)
    277e:	5a9b      	ldrh	r3, [r3, r2]
    2780:	2b00      	cmp	r3, #0
    2782:	d01f      	beq.n	27c4 <afe_taskHandler+0x50>
    2784:	4b11      	ldr	r3, [pc, #68]	; (27cc <afe_taskHandler+0x58>)
    2786:	681a      	ldr	r2, [r3, #0]
    2788:	2381      	movs	r3, #129	; 0x81
    278a:	009b      	lsls	r3, r3, #2
    278c:	5ad2      	ldrh	r2, [r2, r3]
    278e:	4b0f      	ldr	r3, [pc, #60]	; (27cc <afe_taskHandler+0x58>)
    2790:	681b      	ldr	r3, [r3, #0]
    2792:	490f      	ldr	r1, [pc, #60]	; (27d0 <afe_taskHandler+0x5c>)
    2794:	5a5b      	ldrh	r3, [r3, r1]
    2796:	429a      	cmp	r2, r3
    2798:	d314      	bcc.n	27c4 <afe_taskHandler+0x50>
    279a:	4b0c      	ldr	r3, [pc, #48]	; (27cc <afe_taskHandler+0x58>)
    279c:	681b      	ldr	r3, [r3, #0]
    279e:	4a0d      	ldr	r2, [pc, #52]	; (27d4 <afe_taskHandler+0x60>)
    27a0:	5a9a      	ldrh	r2, [r3, r2]
    27a2:	4b0a      	ldr	r3, [pc, #40]	; (27cc <afe_taskHandler+0x58>)
    27a4:	681b      	ldr	r3, [r3, #0]
    27a6:	490a      	ldr	r1, [pc, #40]	; (27d0 <afe_taskHandler+0x5c>)
    27a8:	5a5b      	ldrh	r3, [r3, r1]
    27aa:	429a      	cmp	r2, r3
    27ac:	d30a      	bcc.n	27c4 <afe_taskHandler+0x50>
	{
		afe_setSlaveSelect(1);
    27ae:	2001      	movs	r0, #1
    27b0:	4b09      	ldr	r3, [pc, #36]	; (27d8 <afe_taskHandler+0x64>)
    27b2:	4798      	blx	r3
		_spiLine->txSize = 0;
    27b4:	4b05      	ldr	r3, [pc, #20]	; (27cc <afe_taskHandler+0x58>)
    27b6:	681b      	ldr	r3, [r3, #0]
    27b8:	4a05      	ldr	r2, [pc, #20]	; (27d0 <afe_taskHandler+0x5c>)
    27ba:	2100      	movs	r1, #0
    27bc:	5299      	strh	r1, [r3, r2]
		_txInProgress = FALSE;
    27be:	4b07      	ldr	r3, [pc, #28]	; (27dc <afe_taskHandler+0x68>)
    27c0:	2200      	movs	r2, #0
    27c2:	701a      	strb	r2, [r3, #0]
	}
}
    27c4:	46c0      	nop			; (mov r8, r8)
    27c6:	46bd      	mov	sp, r7
    27c8:	bd80      	pop	{r7, pc}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	2000079c 	.word	0x2000079c
    27d0:	00000202 	.word	0x00000202
    27d4:	00000206 	.word	0x00000206
    27d8:	0000274d 	.word	0x0000274d
    27dc:	200007a0 	.word	0x200007a0

000027e0 <FLOW_Init>:

//=========================================================================
// Implementations
//=========================================================================
void FLOW_Init(void)
{
    27e0:	b590      	push	{r4, r7, lr}
    27e2:	b083      	sub	sp, #12
    27e4:	af02      	add	r7, sp, #8
	//Setup Channel Select Pin
	MCU_PinSetup(AFE_CHANNEL_SELECT_PORT, AFE_CHANNEL_SELECT_PIN, 1, _flowDirection, FALSE, FALSE);
    27e6:	4b0e      	ldr	r3, [pc, #56]	; (2820 <FLOW_Init+0x40>)
    27e8:	781a      	ldrb	r2, [r3, #0]
    27ea:	2300      	movs	r3, #0
    27ec:	9301      	str	r3, [sp, #4]
    27ee:	2300      	movs	r3, #0
    27f0:	9300      	str	r3, [sp, #0]
    27f2:	0013      	movs	r3, r2
    27f4:	2201      	movs	r2, #1
    27f6:	2102      	movs	r1, #2
    27f8:	2000      	movs	r0, #0
    27fa:	4c0a      	ldr	r4, [pc, #40]	; (2824 <FLOW_Init+0x44>)
    27fc:	47a0      	blx	r4

	//Initilizes Sensor Libraries
	TDC_Init(&_spiLine);
    27fe:	4b0a      	ldr	r3, [pc, #40]	; (2828 <FLOW_Init+0x48>)
    2800:	0018      	movs	r0, r3
    2802:	4b0a      	ldr	r3, [pc, #40]	; (282c <FLOW_Init+0x4c>)
    2804:	4798      	blx	r3
	AFE_Init(&_spiLine);
    2806:	4b08      	ldr	r3, [pc, #32]	; (2828 <FLOW_Init+0x48>)
    2808:	0018      	movs	r0, r3
    280a:	4b09      	ldr	r3, [pc, #36]	; (2830 <FLOW_Init+0x50>)
    280c:	4798      	blx	r3

	flow_setDirection(UPSTREAM);
    280e:	2000      	movs	r0, #0
    2810:	4b08      	ldr	r3, [pc, #32]	; (2834 <FLOW_Init+0x54>)
    2812:	4798      	blx	r3
	
	TDC_StartUltrasonicTransaction();
    2814:	4b08      	ldr	r3, [pc, #32]	; (2838 <FLOW_Init+0x58>)
    2816:	4798      	blx	r3
	{
		TDC_PrintValues();
	}
	*/
	
}
    2818:	46c0      	nop			; (mov r8, r8)
    281a:	46bd      	mov	sp, r7
    281c:	b001      	add	sp, #4
    281e:	bd90      	pop	{r4, r7, pc}
    2820:	200007b0 	.word	0x200007b0
    2824:	000001d5 	.word	0x000001d5
    2828:	2000004c 	.word	0x2000004c
    282c:	00003289 	.word	0x00003289
    2830:	000023c9 	.word	0x000023c9
    2834:	00002a3d 	.word	0x00002a3d
    2838:	00003365 	.word	0x00003365

0000283c <FLOW_TransactionCompleteCallback>:

void FLOW_TransactionCompleteCallback(TdcStatus_t status)
{
    283c:	b5b0      	push	{r4, r5, r7, lr}
    283e:	b084      	sub	sp, #16
    2840:	af00      	add	r7, sp, #0
    2842:	0002      	movs	r2, r0
    2844:	1dfb      	adds	r3, r7, #7
    2846:	701a      	strb	r2, [r3, #0]
	//Check if error getting reading
	if(status != TDC_SUCCESS)
    2848:	1dfb      	adds	r3, r7, #7
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	2b03      	cmp	r3, #3
    284e:	d004      	beq.n	285a <FLOW_TransactionCompleteCallback+0x1e>
	{
		DEBUG_WriteLine("ERROR With Reading!");
    2850:	4b65      	ldr	r3, [pc, #404]	; (29e8 <FLOW_TransactionCompleteCallback+0x1ac>)
    2852:	0018      	movs	r0, r3
    2854:	4b65      	ldr	r3, [pc, #404]	; (29ec <FLOW_TransactionCompleteCallback+0x1b0>)
    2856:	4798      	blx	r3
		return;
    2858:	e0c3      	b.n	29e2 <FLOW_TransactionCompleteCallback+0x1a6>
	}

	flow_copyTdcValues();
    285a:	4b65      	ldr	r3, [pc, #404]	; (29f0 <FLOW_TransactionCompleteCallback+0x1b4>)
    285c:	4798      	blx	r3

	if(_flowDirection == UPSTREAM)
    285e:	4b65      	ldr	r3, [pc, #404]	; (29f4 <FLOW_TransactionCompleteCallback+0x1b8>)
    2860:	781b      	ldrb	r3, [r3, #0]
    2862:	2b00      	cmp	r3, #0
    2864:	d105      	bne.n	2872 <FLOW_TransactionCompleteCallback+0x36>
	{
		flow_setDirection(DOWNSTREAM);
    2866:	2001      	movs	r0, #1
    2868:	4b63      	ldr	r3, [pc, #396]	; (29f8 <FLOW_TransactionCompleteCallback+0x1bc>)
    286a:	4798      	blx	r3
		TDC_StartUltrasonicTransaction();
    286c:	4b63      	ldr	r3, [pc, #396]	; (29fc <FLOW_TransactionCompleteCallback+0x1c0>)
    286e:	4798      	blx	r3
    2870:	e0b7      	b.n	29e2 <FLOW_TransactionCompleteCallback+0x1a6>
	}
	else
	{
		flow_calculateToFs();
    2872:	4b63      	ldr	r3, [pc, #396]	; (2a00 <FLOW_TransactionCompleteCallback+0x1c4>)
    2874:	4798      	blx	r3


		/*Calculate Average Flow*/
		_tofAverage[0] = 0;
    2876:	4a63      	ldr	r2, [pc, #396]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    2878:	2300      	movs	r3, #0
    287a:	2400      	movs	r4, #0
    287c:	6013      	str	r3, [r2, #0]
    287e:	6054      	str	r4, [r2, #4]
		_tofAverage[1] = 0;
    2880:	4a60      	ldr	r2, [pc, #384]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    2882:	2300      	movs	r3, #0
    2884:	2400      	movs	r4, #0
    2886:	6093      	str	r3, [r2, #8]
    2888:	60d4      	str	r4, [r2, #12]

		for(uint8_t i = 0; i < 5; i++)
    288a:	230f      	movs	r3, #15
    288c:	18fb      	adds	r3, r7, r3
    288e:	2200      	movs	r2, #0
    2890:	701a      	strb	r2, [r3, #0]
    2892:	e01a      	b.n	28ca <FLOW_TransactionCompleteCallback+0x8e>
			_tofAverage[0] += _rawToFs[0][i];
    2894:	230f      	movs	r3, #15
    2896:	18fb      	adds	r3, r7, r3
    2898:	781b      	ldrb	r3, [r3, #0]
    289a:	4a5b      	ldr	r2, [pc, #364]	; (2a08 <FLOW_TransactionCompleteCallback+0x1cc>)
    289c:	00db      	lsls	r3, r3, #3
    289e:	18d3      	adds	r3, r2, r3
    28a0:	685c      	ldr	r4, [r3, #4]
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	4a57      	ldr	r2, [pc, #348]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    28a6:	6810      	ldr	r0, [r2, #0]
    28a8:	6851      	ldr	r1, [r2, #4]
    28aa:	4d58      	ldr	r5, [pc, #352]	; (2a0c <FLOW_TransactionCompleteCallback+0x1d0>)
    28ac:	001a      	movs	r2, r3
    28ae:	0023      	movs	r3, r4
    28b0:	47a8      	blx	r5
    28b2:	0003      	movs	r3, r0
    28b4:	000c      	movs	r4, r1
    28b6:	4a53      	ldr	r2, [pc, #332]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    28b8:	6013      	str	r3, [r2, #0]
    28ba:	6054      	str	r4, [r2, #4]
		for(uint8_t i = 0; i < 5; i++)
    28bc:	230f      	movs	r3, #15
    28be:	18fb      	adds	r3, r7, r3
    28c0:	781a      	ldrb	r2, [r3, #0]
    28c2:	230f      	movs	r3, #15
    28c4:	18fb      	adds	r3, r7, r3
    28c6:	3201      	adds	r2, #1
    28c8:	701a      	strb	r2, [r3, #0]
    28ca:	230f      	movs	r3, #15
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	2b04      	cmp	r3, #4
    28d2:	d9df      	bls.n	2894 <FLOW_TransactionCompleteCallback+0x58>

		for(uint8_t i = 0; i < 5; i++)
    28d4:	230e      	movs	r3, #14
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	2200      	movs	r2, #0
    28da:	701a      	strb	r2, [r3, #0]
    28dc:	e01b      	b.n	2916 <FLOW_TransactionCompleteCallback+0xda>
			_tofAverage[1] += _rawToFs[1][i];
    28de:	230e      	movs	r3, #14
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	4a48      	ldr	r2, [pc, #288]	; (2a08 <FLOW_TransactionCompleteCallback+0x1cc>)
    28e6:	3305      	adds	r3, #5
    28e8:	00db      	lsls	r3, r3, #3
    28ea:	18d3      	adds	r3, r2, r3
    28ec:	685c      	ldr	r4, [r3, #4]
    28ee:	681b      	ldr	r3, [r3, #0]
    28f0:	4a44      	ldr	r2, [pc, #272]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    28f2:	6890      	ldr	r0, [r2, #8]
    28f4:	68d1      	ldr	r1, [r2, #12]
    28f6:	4d45      	ldr	r5, [pc, #276]	; (2a0c <FLOW_TransactionCompleteCallback+0x1d0>)
    28f8:	001a      	movs	r2, r3
    28fa:	0023      	movs	r3, r4
    28fc:	47a8      	blx	r5
    28fe:	0003      	movs	r3, r0
    2900:	000c      	movs	r4, r1
    2902:	4a40      	ldr	r2, [pc, #256]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    2904:	6093      	str	r3, [r2, #8]
    2906:	60d4      	str	r4, [r2, #12]
		for(uint8_t i = 0; i < 5; i++)
    2908:	230e      	movs	r3, #14
    290a:	18fb      	adds	r3, r7, r3
    290c:	781a      	ldrb	r2, [r3, #0]
    290e:	230e      	movs	r3, #14
    2910:	18fb      	adds	r3, r7, r3
    2912:	3201      	adds	r2, #1
    2914:	701a      	strb	r2, [r3, #0]
    2916:	230e      	movs	r3, #14
    2918:	18fb      	adds	r3, r7, r3
    291a:	781b      	ldrb	r3, [r3, #0]
    291c:	2b04      	cmp	r3, #4
    291e:	d9de      	bls.n	28de <FLOW_TransactionCompleteCallback+0xa2>

		_tofAverage[0] = _tofAverage[0] / 5;
    2920:	4b38      	ldr	r3, [pc, #224]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    2922:	6818      	ldr	r0, [r3, #0]
    2924:	6859      	ldr	r1, [r3, #4]
    2926:	4c3a      	ldr	r4, [pc, #232]	; (2a10 <FLOW_TransactionCompleteCallback+0x1d4>)
    2928:	2200      	movs	r2, #0
    292a:	4b3a      	ldr	r3, [pc, #232]	; (2a14 <FLOW_TransactionCompleteCallback+0x1d8>)
    292c:	47a0      	blx	r4
    292e:	0003      	movs	r3, r0
    2930:	000c      	movs	r4, r1
    2932:	4a34      	ldr	r2, [pc, #208]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    2934:	6013      	str	r3, [r2, #0]
    2936:	6054      	str	r4, [r2, #4]
		_tofAverage[1] = _tofAverage[1] / 5;
    2938:	4b32      	ldr	r3, [pc, #200]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    293a:	6898      	ldr	r0, [r3, #8]
    293c:	68d9      	ldr	r1, [r3, #12]
    293e:	4c34      	ldr	r4, [pc, #208]	; (2a10 <FLOW_TransactionCompleteCallback+0x1d4>)
    2940:	2200      	movs	r2, #0
    2942:	4b34      	ldr	r3, [pc, #208]	; (2a14 <FLOW_TransactionCompleteCallback+0x1d8>)
    2944:	47a0      	blx	r4
    2946:	0003      	movs	r3, r0
    2948:	000c      	movs	r4, r1
    294a:	4a2e      	ldr	r2, [pc, #184]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    294c:	6093      	str	r3, [r2, #8]
    294e:	60d4      	str	r4, [r2, #12]

		_difference = _tofAverage[0] - _tofAverage[1];
    2950:	4b2c      	ldr	r3, [pc, #176]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    2952:	6818      	ldr	r0, [r3, #0]
    2954:	6859      	ldr	r1, [r3, #4]
    2956:	4b2b      	ldr	r3, [pc, #172]	; (2a04 <FLOW_TransactionCompleteCallback+0x1c8>)
    2958:	68dc      	ldr	r4, [r3, #12]
    295a:	689b      	ldr	r3, [r3, #8]
    295c:	4d2e      	ldr	r5, [pc, #184]	; (2a18 <FLOW_TransactionCompleteCallback+0x1dc>)
    295e:	001a      	movs	r2, r3
    2960:	0023      	movs	r3, r4
    2962:	47a8      	blx	r5
    2964:	0003      	movs	r3, r0
    2966:	000c      	movs	r4, r1
    2968:	4a2c      	ldr	r2, [pc, #176]	; (2a1c <FLOW_TransactionCompleteCallback+0x1e0>)
    296a:	6013      	str	r3, [r2, #0]
    296c:	6054      	str	r4, [r2, #4]
		//_difference += .003;
		//DEBUG_WriteDouble(_difference, "us");
		

		
		if(_i++ < 5)
    296e:	4b2c      	ldr	r3, [pc, #176]	; (2a20 <FLOW_TransactionCompleteCallback+0x1e4>)
    2970:	781b      	ldrb	r3, [r3, #0]
    2972:	1c5a      	adds	r2, r3, #1
    2974:	b2d1      	uxtb	r1, r2
    2976:	4a2a      	ldr	r2, [pc, #168]	; (2a20 <FLOW_TransactionCompleteCallback+0x1e4>)
    2978:	7011      	strb	r1, [r2, #0]
    297a:	2b04      	cmp	r3, #4
    297c:	d80f      	bhi.n	299e <FLOW_TransactionCompleteCallback+0x162>
		{
			_avg += _difference;
    297e:	4b27      	ldr	r3, [pc, #156]	; (2a1c <FLOW_TransactionCompleteCallback+0x1e0>)
    2980:	6818      	ldr	r0, [r3, #0]
    2982:	6859      	ldr	r1, [r3, #4]
    2984:	4b27      	ldr	r3, [pc, #156]	; (2a24 <FLOW_TransactionCompleteCallback+0x1e8>)
    2986:	685c      	ldr	r4, [r3, #4]
    2988:	681b      	ldr	r3, [r3, #0]
    298a:	4d20      	ldr	r5, [pc, #128]	; (2a0c <FLOW_TransactionCompleteCallback+0x1d0>)
    298c:	001a      	movs	r2, r3
    298e:	0023      	movs	r3, r4
    2990:	47a8      	blx	r5
    2992:	0003      	movs	r3, r0
    2994:	000c      	movs	r4, r1
    2996:	4a23      	ldr	r2, [pc, #140]	; (2a24 <FLOW_TransactionCompleteCallback+0x1e8>)
    2998:	6013      	str	r3, [r2, #0]
    299a:	6054      	str	r4, [r2, #4]
    299c:	e01b      	b.n	29d6 <FLOW_TransactionCompleteCallback+0x19a>
		}
		else
		{
			_avg = (_avg / 5);
    299e:	4b21      	ldr	r3, [pc, #132]	; (2a24 <FLOW_TransactionCompleteCallback+0x1e8>)
    29a0:	6818      	ldr	r0, [r3, #0]
    29a2:	6859      	ldr	r1, [r3, #4]
    29a4:	4c1a      	ldr	r4, [pc, #104]	; (2a10 <FLOW_TransactionCompleteCallback+0x1d4>)
    29a6:	2200      	movs	r2, #0
    29a8:	4b1a      	ldr	r3, [pc, #104]	; (2a14 <FLOW_TransactionCompleteCallback+0x1d8>)
    29aa:	47a0      	blx	r4
    29ac:	0003      	movs	r3, r0
    29ae:	000c      	movs	r4, r1
    29b0:	4a1c      	ldr	r2, [pc, #112]	; (2a24 <FLOW_TransactionCompleteCallback+0x1e8>)
    29b2:	6013      	str	r3, [r2, #0]
    29b4:	6054      	str	r4, [r2, #4]
			DEBUG_WriteDouble(_avg, "us");
    29b6:	4b1b      	ldr	r3, [pc, #108]	; (2a24 <FLOW_TransactionCompleteCallback+0x1e8>)
    29b8:	685c      	ldr	r4, [r3, #4]
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	4a1a      	ldr	r2, [pc, #104]	; (2a28 <FLOW_TransactionCompleteCallback+0x1ec>)
    29be:	0018      	movs	r0, r3
    29c0:	0021      	movs	r1, r4
    29c2:	4b1a      	ldr	r3, [pc, #104]	; (2a2c <FLOW_TransactionCompleteCallback+0x1f0>)
    29c4:	4798      	blx	r3
			_i = 0;
    29c6:	4b16      	ldr	r3, [pc, #88]	; (2a20 <FLOW_TransactionCompleteCallback+0x1e4>)
    29c8:	2200      	movs	r2, #0
    29ca:	701a      	strb	r2, [r3, #0]
			_avg = 0;
    29cc:	4a15      	ldr	r2, [pc, #84]	; (2a24 <FLOW_TransactionCompleteCallback+0x1e8>)
    29ce:	2300      	movs	r3, #0
    29d0:	2400      	movs	r4, #0
    29d2:	6013      	str	r3, [r2, #0]
    29d4:	6054      	str	r4, [r2, #4]
		}
		

		//Start Timer
		TIMER_Start(&_timer, FLOW_TRANSACTION_TIMER, FALSE, (uint8_t*)&flow_timerCallback);
    29d6:	4b16      	ldr	r3, [pc, #88]	; (2a30 <FLOW_TransactionCompleteCallback+0x1f4>)
    29d8:	4816      	ldr	r0, [pc, #88]	; (2a34 <FLOW_TransactionCompleteCallback+0x1f8>)
    29da:	2200      	movs	r2, #0
    29dc:	2164      	movs	r1, #100	; 0x64
    29de:	4c16      	ldr	r4, [pc, #88]	; (2a38 <FLOW_TransactionCompleteCallback+0x1fc>)
    29e0:	47a0      	blx	r4
	}
}
    29e2:	46bd      	mov	sp, r7
    29e4:	b004      	add	sp, #16
    29e6:	bdb0      	pop	{r4, r5, r7, pc}
    29e8:	00005fa0 	.word	0x00005fa0
    29ec:	00000509 	.word	0x00000509
    29f0:	00002a71 	.word	0x00002a71
    29f4:	200007b0 	.word	0x200007b0
    29f8:	00002a3d 	.word	0x00002a3d
    29fc:	00003365 	.word	0x00003365
    2a00:	00003059 	.word	0x00003059
    2a04:	20000870 	.word	0x20000870
    2a08:	20000820 	.word	0x20000820
    2a0c:	00004215 	.word	0x00004215
    2a10:	00004835 	.word	0x00004835
    2a14:	40140000 	.word	0x40140000
    2a18:	0000559d 	.word	0x0000559d
    2a1c:	20000880 	.word	0x20000880
    2a20:	20000890 	.word	0x20000890
    2a24:	20000888 	.word	0x20000888
    2a28:	00005fb4 	.word	0x00005fb4
    2a2c:	000005b5 	.word	0x000005b5
    2a30:	00003265 	.word	0x00003265
    2a34:	20000894 	.word	0x20000894
    2a38:	00001779 	.word	0x00001779

00002a3c <flow_setDirection>:
	DEBUG_WriteHex("Clock5 DN: \t", _TimeMeasurementRaw.DownStreamClock5);
	*/
}

static void flow_setDirection(FlowDirection_t direction)
{
    2a3c:	b580      	push	{r7, lr}
    2a3e:	b082      	sub	sp, #8
    2a40:	af00      	add	r7, sp, #0
    2a42:	0002      	movs	r2, r0
    2a44:	1dfb      	adds	r3, r7, #7
    2a46:	701a      	strb	r2, [r3, #0]
	if(direction)
		;//DEBUG_WriteLine("Changing Direction to: Downstream");
	else
		;//DEBUG_WriteLine("Changing Direction to: Upstream");

	MCU_SetPinState(AFE_CHANNEL_SELECT_PORT, AFE_CHANNEL_SELECT_PIN, direction);
    2a48:	1dfb      	adds	r3, r7, #7
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	001a      	movs	r2, r3
    2a4e:	2102      	movs	r1, #2
    2a50:	2000      	movs	r0, #0
    2a52:	4b05      	ldr	r3, [pc, #20]	; (2a68 <flow_setDirection+0x2c>)
    2a54:	4798      	blx	r3
	_flowDirection = direction;
    2a56:	4b05      	ldr	r3, [pc, #20]	; (2a6c <flow_setDirection+0x30>)
    2a58:	1dfa      	adds	r2, r7, #7
    2a5a:	7812      	ldrb	r2, [r2, #0]
    2a5c:	701a      	strb	r2, [r3, #0]
}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	46bd      	mov	sp, r7
    2a62:	b002      	add	sp, #8
    2a64:	bd80      	pop	{r7, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	000003a1 	.word	0x000003a1
    2a6c:	200007b0 	.word	0x200007b0

00002a70 <flow_copyTdcValues>:

static void flow_copyTdcValues(void)
{
    2a70:	b5b0      	push	{r4, r5, r7, lr}
    2a72:	b082      	sub	sp, #8
    2a74:	af00      	add	r7, sp, #0
	tdcTimerRegs_t *tdcCpy = TDC_GetTimerRegs();
    2a76:	4bfe      	ldr	r3, [pc, #1016]	; (2e70 <flow_copyTdcValues+0x400>)
    2a78:	4798      	blx	r3
    2a7a:	0003      	movs	r3, r0
    2a7c:	607b      	str	r3, [r7, #4]
	tdcTimerRegs_t *localCpy = &_rawTimerRegs[_flowDirection];
    2a7e:	4bfd      	ldr	r3, [pc, #1012]	; (2e74 <flow_copyTdcValues+0x404>)
    2a80:	781b      	ldrb	r3, [r3, #0]
    2a82:	001a      	movs	r2, r3
    2a84:	2334      	movs	r3, #52	; 0x34
    2a86:	435a      	muls	r2, r3
    2a88:	4bfb      	ldr	r3, [pc, #1004]	; (2e78 <flow_copyTdcValues+0x408>)
    2a8a:	18d3      	adds	r3, r2, r3
    2a8c:	603b      	str	r3, [r7, #0]

	localCpy->Timer1 = tdcCpy->Timer1;
    2a8e:	687b      	ldr	r3, [r7, #4]
    2a90:	781a      	ldrb	r2, [r3, #0]
    2a92:	7859      	ldrb	r1, [r3, #1]
    2a94:	0209      	lsls	r1, r1, #8
    2a96:	430a      	orrs	r2, r1
    2a98:	7899      	ldrb	r1, [r3, #2]
    2a9a:	0409      	lsls	r1, r1, #16
    2a9c:	430a      	orrs	r2, r1
    2a9e:	78db      	ldrb	r3, [r3, #3]
    2aa0:	061b      	lsls	r3, r3, #24
    2aa2:	4313      	orrs	r3, r2
    2aa4:	001a      	movs	r2, r3
    2aa6:	683b      	ldr	r3, [r7, #0]
    2aa8:	21ff      	movs	r1, #255	; 0xff
    2aaa:	4011      	ands	r1, r2
    2aac:	000c      	movs	r4, r1
    2aae:	7819      	ldrb	r1, [r3, #0]
    2ab0:	2000      	movs	r0, #0
    2ab2:	4001      	ands	r1, r0
    2ab4:	1c08      	adds	r0, r1, #0
    2ab6:	1c21      	adds	r1, r4, #0
    2ab8:	4301      	orrs	r1, r0
    2aba:	7019      	strb	r1, [r3, #0]
    2abc:	0a11      	lsrs	r1, r2, #8
    2abe:	20ff      	movs	r0, #255	; 0xff
    2ac0:	4001      	ands	r1, r0
    2ac2:	000c      	movs	r4, r1
    2ac4:	7859      	ldrb	r1, [r3, #1]
    2ac6:	2000      	movs	r0, #0
    2ac8:	4001      	ands	r1, r0
    2aca:	1c08      	adds	r0, r1, #0
    2acc:	1c21      	adds	r1, r4, #0
    2ace:	4301      	orrs	r1, r0
    2ad0:	7059      	strb	r1, [r3, #1]
    2ad2:	0c11      	lsrs	r1, r2, #16
    2ad4:	20ff      	movs	r0, #255	; 0xff
    2ad6:	4001      	ands	r1, r0
    2ad8:	000c      	movs	r4, r1
    2ada:	7899      	ldrb	r1, [r3, #2]
    2adc:	2000      	movs	r0, #0
    2ade:	4001      	ands	r1, r0
    2ae0:	1c08      	adds	r0, r1, #0
    2ae2:	1c21      	adds	r1, r4, #0
    2ae4:	4301      	orrs	r1, r0
    2ae6:	7099      	strb	r1, [r3, #2]
    2ae8:	0e10      	lsrs	r0, r2, #24
    2aea:	78da      	ldrb	r2, [r3, #3]
    2aec:	2100      	movs	r1, #0
    2aee:	400a      	ands	r2, r1
    2af0:	1c11      	adds	r1, r2, #0
    2af2:	1c02      	adds	r2, r0, #0
    2af4:	430a      	orrs	r2, r1
    2af6:	70da      	strb	r2, [r3, #3]
	localCpy->Clock1 = tdcCpy->Clock1;
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	791a      	ldrb	r2, [r3, #4]
    2afc:	7959      	ldrb	r1, [r3, #5]
    2afe:	0209      	lsls	r1, r1, #8
    2b00:	430a      	orrs	r2, r1
    2b02:	7999      	ldrb	r1, [r3, #6]
    2b04:	0409      	lsls	r1, r1, #16
    2b06:	430a      	orrs	r2, r1
    2b08:	79db      	ldrb	r3, [r3, #7]
    2b0a:	061b      	lsls	r3, r3, #24
    2b0c:	4313      	orrs	r3, r2
    2b0e:	001a      	movs	r2, r3
    2b10:	683b      	ldr	r3, [r7, #0]
    2b12:	21ff      	movs	r1, #255	; 0xff
    2b14:	4011      	ands	r1, r2
    2b16:	000c      	movs	r4, r1
    2b18:	7919      	ldrb	r1, [r3, #4]
    2b1a:	2000      	movs	r0, #0
    2b1c:	4001      	ands	r1, r0
    2b1e:	1c08      	adds	r0, r1, #0
    2b20:	1c21      	adds	r1, r4, #0
    2b22:	4301      	orrs	r1, r0
    2b24:	7119      	strb	r1, [r3, #4]
    2b26:	0a11      	lsrs	r1, r2, #8
    2b28:	20ff      	movs	r0, #255	; 0xff
    2b2a:	4001      	ands	r1, r0
    2b2c:	000c      	movs	r4, r1
    2b2e:	7959      	ldrb	r1, [r3, #5]
    2b30:	2000      	movs	r0, #0
    2b32:	4001      	ands	r1, r0
    2b34:	1c08      	adds	r0, r1, #0
    2b36:	1c21      	adds	r1, r4, #0
    2b38:	4301      	orrs	r1, r0
    2b3a:	7159      	strb	r1, [r3, #5]
    2b3c:	0c11      	lsrs	r1, r2, #16
    2b3e:	20ff      	movs	r0, #255	; 0xff
    2b40:	4001      	ands	r1, r0
    2b42:	000c      	movs	r4, r1
    2b44:	7999      	ldrb	r1, [r3, #6]
    2b46:	2000      	movs	r0, #0
    2b48:	4001      	ands	r1, r0
    2b4a:	1c08      	adds	r0, r1, #0
    2b4c:	1c21      	adds	r1, r4, #0
    2b4e:	4301      	orrs	r1, r0
    2b50:	7199      	strb	r1, [r3, #6]
    2b52:	0e10      	lsrs	r0, r2, #24
    2b54:	79da      	ldrb	r2, [r3, #7]
    2b56:	2100      	movs	r1, #0
    2b58:	400a      	ands	r2, r1
    2b5a:	1c11      	adds	r1, r2, #0
    2b5c:	1c02      	adds	r2, r0, #0
    2b5e:	430a      	orrs	r2, r1
    2b60:	71da      	strb	r2, [r3, #7]
	localCpy->Timer2 = tdcCpy->Timer2;
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	7a1a      	ldrb	r2, [r3, #8]
    2b66:	7a59      	ldrb	r1, [r3, #9]
    2b68:	0209      	lsls	r1, r1, #8
    2b6a:	430a      	orrs	r2, r1
    2b6c:	7a99      	ldrb	r1, [r3, #10]
    2b6e:	0409      	lsls	r1, r1, #16
    2b70:	430a      	orrs	r2, r1
    2b72:	7adb      	ldrb	r3, [r3, #11]
    2b74:	061b      	lsls	r3, r3, #24
    2b76:	4313      	orrs	r3, r2
    2b78:	001a      	movs	r2, r3
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	21ff      	movs	r1, #255	; 0xff
    2b7e:	4011      	ands	r1, r2
    2b80:	000c      	movs	r4, r1
    2b82:	7a19      	ldrb	r1, [r3, #8]
    2b84:	2000      	movs	r0, #0
    2b86:	4001      	ands	r1, r0
    2b88:	1c08      	adds	r0, r1, #0
    2b8a:	1c21      	adds	r1, r4, #0
    2b8c:	4301      	orrs	r1, r0
    2b8e:	7219      	strb	r1, [r3, #8]
    2b90:	0a11      	lsrs	r1, r2, #8
    2b92:	20ff      	movs	r0, #255	; 0xff
    2b94:	4001      	ands	r1, r0
    2b96:	000c      	movs	r4, r1
    2b98:	7a59      	ldrb	r1, [r3, #9]
    2b9a:	2000      	movs	r0, #0
    2b9c:	4001      	ands	r1, r0
    2b9e:	1c08      	adds	r0, r1, #0
    2ba0:	1c21      	adds	r1, r4, #0
    2ba2:	4301      	orrs	r1, r0
    2ba4:	7259      	strb	r1, [r3, #9]
    2ba6:	0c11      	lsrs	r1, r2, #16
    2ba8:	20ff      	movs	r0, #255	; 0xff
    2baa:	4001      	ands	r1, r0
    2bac:	000c      	movs	r4, r1
    2bae:	7a99      	ldrb	r1, [r3, #10]
    2bb0:	2000      	movs	r0, #0
    2bb2:	4001      	ands	r1, r0
    2bb4:	1c08      	adds	r0, r1, #0
    2bb6:	1c21      	adds	r1, r4, #0
    2bb8:	4301      	orrs	r1, r0
    2bba:	7299      	strb	r1, [r3, #10]
    2bbc:	0e10      	lsrs	r0, r2, #24
    2bbe:	7ada      	ldrb	r2, [r3, #11]
    2bc0:	2100      	movs	r1, #0
    2bc2:	400a      	ands	r2, r1
    2bc4:	1c11      	adds	r1, r2, #0
    2bc6:	1c02      	adds	r2, r0, #0
    2bc8:	430a      	orrs	r2, r1
    2bca:	72da      	strb	r2, [r3, #11]
	localCpy->Clock2 = tdcCpy->Clock2;
    2bcc:	687b      	ldr	r3, [r7, #4]
    2bce:	7b1a      	ldrb	r2, [r3, #12]
    2bd0:	7b59      	ldrb	r1, [r3, #13]
    2bd2:	0209      	lsls	r1, r1, #8
    2bd4:	430a      	orrs	r2, r1
    2bd6:	7b99      	ldrb	r1, [r3, #14]
    2bd8:	0409      	lsls	r1, r1, #16
    2bda:	430a      	orrs	r2, r1
    2bdc:	7bdb      	ldrb	r3, [r3, #15]
    2bde:	061b      	lsls	r3, r3, #24
    2be0:	4313      	orrs	r3, r2
    2be2:	001a      	movs	r2, r3
    2be4:	683b      	ldr	r3, [r7, #0]
    2be6:	21ff      	movs	r1, #255	; 0xff
    2be8:	4011      	ands	r1, r2
    2bea:	000c      	movs	r4, r1
    2bec:	7b19      	ldrb	r1, [r3, #12]
    2bee:	2000      	movs	r0, #0
    2bf0:	4001      	ands	r1, r0
    2bf2:	1c08      	adds	r0, r1, #0
    2bf4:	1c21      	adds	r1, r4, #0
    2bf6:	4301      	orrs	r1, r0
    2bf8:	7319      	strb	r1, [r3, #12]
    2bfa:	0a11      	lsrs	r1, r2, #8
    2bfc:	20ff      	movs	r0, #255	; 0xff
    2bfe:	4001      	ands	r1, r0
    2c00:	000c      	movs	r4, r1
    2c02:	7b59      	ldrb	r1, [r3, #13]
    2c04:	2000      	movs	r0, #0
    2c06:	4001      	ands	r1, r0
    2c08:	1c08      	adds	r0, r1, #0
    2c0a:	1c21      	adds	r1, r4, #0
    2c0c:	4301      	orrs	r1, r0
    2c0e:	7359      	strb	r1, [r3, #13]
    2c10:	0c11      	lsrs	r1, r2, #16
    2c12:	20ff      	movs	r0, #255	; 0xff
    2c14:	4001      	ands	r1, r0
    2c16:	000c      	movs	r4, r1
    2c18:	7b99      	ldrb	r1, [r3, #14]
    2c1a:	2000      	movs	r0, #0
    2c1c:	4001      	ands	r1, r0
    2c1e:	1c08      	adds	r0, r1, #0
    2c20:	1c21      	adds	r1, r4, #0
    2c22:	4301      	orrs	r1, r0
    2c24:	7399      	strb	r1, [r3, #14]
    2c26:	0e10      	lsrs	r0, r2, #24
    2c28:	7bda      	ldrb	r2, [r3, #15]
    2c2a:	2100      	movs	r1, #0
    2c2c:	400a      	ands	r2, r1
    2c2e:	1c11      	adds	r1, r2, #0
    2c30:	1c02      	adds	r2, r0, #0
    2c32:	430a      	orrs	r2, r1
    2c34:	73da      	strb	r2, [r3, #15]
	localCpy->Timer3 = tdcCpy->Timer3;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	7c1a      	ldrb	r2, [r3, #16]
    2c3a:	7c59      	ldrb	r1, [r3, #17]
    2c3c:	0209      	lsls	r1, r1, #8
    2c3e:	430a      	orrs	r2, r1
    2c40:	7c99      	ldrb	r1, [r3, #18]
    2c42:	0409      	lsls	r1, r1, #16
    2c44:	430a      	orrs	r2, r1
    2c46:	7cdb      	ldrb	r3, [r3, #19]
    2c48:	061b      	lsls	r3, r3, #24
    2c4a:	4313      	orrs	r3, r2
    2c4c:	001a      	movs	r2, r3
    2c4e:	683b      	ldr	r3, [r7, #0]
    2c50:	21ff      	movs	r1, #255	; 0xff
    2c52:	4011      	ands	r1, r2
    2c54:	000c      	movs	r4, r1
    2c56:	7c19      	ldrb	r1, [r3, #16]
    2c58:	2000      	movs	r0, #0
    2c5a:	4001      	ands	r1, r0
    2c5c:	1c08      	adds	r0, r1, #0
    2c5e:	1c21      	adds	r1, r4, #0
    2c60:	4301      	orrs	r1, r0
    2c62:	7419      	strb	r1, [r3, #16]
    2c64:	0a11      	lsrs	r1, r2, #8
    2c66:	20ff      	movs	r0, #255	; 0xff
    2c68:	4001      	ands	r1, r0
    2c6a:	000c      	movs	r4, r1
    2c6c:	7c59      	ldrb	r1, [r3, #17]
    2c6e:	2000      	movs	r0, #0
    2c70:	4001      	ands	r1, r0
    2c72:	1c08      	adds	r0, r1, #0
    2c74:	1c21      	adds	r1, r4, #0
    2c76:	4301      	orrs	r1, r0
    2c78:	7459      	strb	r1, [r3, #17]
    2c7a:	0c11      	lsrs	r1, r2, #16
    2c7c:	20ff      	movs	r0, #255	; 0xff
    2c7e:	4001      	ands	r1, r0
    2c80:	000c      	movs	r4, r1
    2c82:	7c99      	ldrb	r1, [r3, #18]
    2c84:	2000      	movs	r0, #0
    2c86:	4001      	ands	r1, r0
    2c88:	1c08      	adds	r0, r1, #0
    2c8a:	1c21      	adds	r1, r4, #0
    2c8c:	4301      	orrs	r1, r0
    2c8e:	7499      	strb	r1, [r3, #18]
    2c90:	0e10      	lsrs	r0, r2, #24
    2c92:	7cda      	ldrb	r2, [r3, #19]
    2c94:	2100      	movs	r1, #0
    2c96:	400a      	ands	r2, r1
    2c98:	1c11      	adds	r1, r2, #0
    2c9a:	1c02      	adds	r2, r0, #0
    2c9c:	430a      	orrs	r2, r1
    2c9e:	74da      	strb	r2, [r3, #19]
	localCpy->Clock3 = tdcCpy->Clock3;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	7d1a      	ldrb	r2, [r3, #20]
    2ca4:	7d59      	ldrb	r1, [r3, #21]
    2ca6:	0209      	lsls	r1, r1, #8
    2ca8:	430a      	orrs	r2, r1
    2caa:	7d99      	ldrb	r1, [r3, #22]
    2cac:	0409      	lsls	r1, r1, #16
    2cae:	430a      	orrs	r2, r1
    2cb0:	7ddb      	ldrb	r3, [r3, #23]
    2cb2:	061b      	lsls	r3, r3, #24
    2cb4:	4313      	orrs	r3, r2
    2cb6:	001a      	movs	r2, r3
    2cb8:	683b      	ldr	r3, [r7, #0]
    2cba:	21ff      	movs	r1, #255	; 0xff
    2cbc:	4011      	ands	r1, r2
    2cbe:	000c      	movs	r4, r1
    2cc0:	7d19      	ldrb	r1, [r3, #20]
    2cc2:	2000      	movs	r0, #0
    2cc4:	4001      	ands	r1, r0
    2cc6:	1c08      	adds	r0, r1, #0
    2cc8:	1c21      	adds	r1, r4, #0
    2cca:	4301      	orrs	r1, r0
    2ccc:	7519      	strb	r1, [r3, #20]
    2cce:	0a11      	lsrs	r1, r2, #8
    2cd0:	20ff      	movs	r0, #255	; 0xff
    2cd2:	4001      	ands	r1, r0
    2cd4:	000c      	movs	r4, r1
    2cd6:	7d59      	ldrb	r1, [r3, #21]
    2cd8:	2000      	movs	r0, #0
    2cda:	4001      	ands	r1, r0
    2cdc:	1c08      	adds	r0, r1, #0
    2cde:	1c21      	adds	r1, r4, #0
    2ce0:	4301      	orrs	r1, r0
    2ce2:	7559      	strb	r1, [r3, #21]
    2ce4:	0c11      	lsrs	r1, r2, #16
    2ce6:	20ff      	movs	r0, #255	; 0xff
    2ce8:	4001      	ands	r1, r0
    2cea:	000c      	movs	r4, r1
    2cec:	7d99      	ldrb	r1, [r3, #22]
    2cee:	2000      	movs	r0, #0
    2cf0:	4001      	ands	r1, r0
    2cf2:	1c08      	adds	r0, r1, #0
    2cf4:	1c21      	adds	r1, r4, #0
    2cf6:	4301      	orrs	r1, r0
    2cf8:	7599      	strb	r1, [r3, #22]
    2cfa:	0e10      	lsrs	r0, r2, #24
    2cfc:	7dda      	ldrb	r2, [r3, #23]
    2cfe:	2100      	movs	r1, #0
    2d00:	400a      	ands	r2, r1
    2d02:	1c11      	adds	r1, r2, #0
    2d04:	1c02      	adds	r2, r0, #0
    2d06:	430a      	orrs	r2, r1
    2d08:	75da      	strb	r2, [r3, #23]
	localCpy->Timer4 = tdcCpy->Timer4;
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	7e1a      	ldrb	r2, [r3, #24]
    2d0e:	7e59      	ldrb	r1, [r3, #25]
    2d10:	0209      	lsls	r1, r1, #8
    2d12:	430a      	orrs	r2, r1
    2d14:	7e99      	ldrb	r1, [r3, #26]
    2d16:	0409      	lsls	r1, r1, #16
    2d18:	430a      	orrs	r2, r1
    2d1a:	7edb      	ldrb	r3, [r3, #27]
    2d1c:	061b      	lsls	r3, r3, #24
    2d1e:	4313      	orrs	r3, r2
    2d20:	001a      	movs	r2, r3
    2d22:	683b      	ldr	r3, [r7, #0]
    2d24:	21ff      	movs	r1, #255	; 0xff
    2d26:	4011      	ands	r1, r2
    2d28:	000c      	movs	r4, r1
    2d2a:	7e19      	ldrb	r1, [r3, #24]
    2d2c:	2000      	movs	r0, #0
    2d2e:	4001      	ands	r1, r0
    2d30:	1c08      	adds	r0, r1, #0
    2d32:	1c21      	adds	r1, r4, #0
    2d34:	4301      	orrs	r1, r0
    2d36:	7619      	strb	r1, [r3, #24]
    2d38:	0a11      	lsrs	r1, r2, #8
    2d3a:	20ff      	movs	r0, #255	; 0xff
    2d3c:	4001      	ands	r1, r0
    2d3e:	000c      	movs	r4, r1
    2d40:	7e59      	ldrb	r1, [r3, #25]
    2d42:	2000      	movs	r0, #0
    2d44:	4001      	ands	r1, r0
    2d46:	1c08      	adds	r0, r1, #0
    2d48:	1c21      	adds	r1, r4, #0
    2d4a:	4301      	orrs	r1, r0
    2d4c:	7659      	strb	r1, [r3, #25]
    2d4e:	0c11      	lsrs	r1, r2, #16
    2d50:	20ff      	movs	r0, #255	; 0xff
    2d52:	4001      	ands	r1, r0
    2d54:	000c      	movs	r4, r1
    2d56:	7e99      	ldrb	r1, [r3, #26]
    2d58:	2000      	movs	r0, #0
    2d5a:	4001      	ands	r1, r0
    2d5c:	1c08      	adds	r0, r1, #0
    2d5e:	1c21      	adds	r1, r4, #0
    2d60:	4301      	orrs	r1, r0
    2d62:	7699      	strb	r1, [r3, #26]
    2d64:	0e10      	lsrs	r0, r2, #24
    2d66:	7eda      	ldrb	r2, [r3, #27]
    2d68:	2100      	movs	r1, #0
    2d6a:	400a      	ands	r2, r1
    2d6c:	1c11      	adds	r1, r2, #0
    2d6e:	1c02      	adds	r2, r0, #0
    2d70:	430a      	orrs	r2, r1
    2d72:	76da      	strb	r2, [r3, #27]
	localCpy->Clock4 = tdcCpy->Clock4;
    2d74:	687b      	ldr	r3, [r7, #4]
    2d76:	7f1a      	ldrb	r2, [r3, #28]
    2d78:	7f59      	ldrb	r1, [r3, #29]
    2d7a:	0209      	lsls	r1, r1, #8
    2d7c:	430a      	orrs	r2, r1
    2d7e:	7f99      	ldrb	r1, [r3, #30]
    2d80:	0409      	lsls	r1, r1, #16
    2d82:	430a      	orrs	r2, r1
    2d84:	7fdb      	ldrb	r3, [r3, #31]
    2d86:	061b      	lsls	r3, r3, #24
    2d88:	4313      	orrs	r3, r2
    2d8a:	001a      	movs	r2, r3
    2d8c:	683b      	ldr	r3, [r7, #0]
    2d8e:	21ff      	movs	r1, #255	; 0xff
    2d90:	4011      	ands	r1, r2
    2d92:	000c      	movs	r4, r1
    2d94:	7f19      	ldrb	r1, [r3, #28]
    2d96:	2000      	movs	r0, #0
    2d98:	4001      	ands	r1, r0
    2d9a:	1c08      	adds	r0, r1, #0
    2d9c:	1c21      	adds	r1, r4, #0
    2d9e:	4301      	orrs	r1, r0
    2da0:	7719      	strb	r1, [r3, #28]
    2da2:	0a11      	lsrs	r1, r2, #8
    2da4:	20ff      	movs	r0, #255	; 0xff
    2da6:	4001      	ands	r1, r0
    2da8:	000c      	movs	r4, r1
    2daa:	7f59      	ldrb	r1, [r3, #29]
    2dac:	2000      	movs	r0, #0
    2dae:	4001      	ands	r1, r0
    2db0:	1c08      	adds	r0, r1, #0
    2db2:	1c21      	adds	r1, r4, #0
    2db4:	4301      	orrs	r1, r0
    2db6:	7759      	strb	r1, [r3, #29]
    2db8:	0c11      	lsrs	r1, r2, #16
    2dba:	20ff      	movs	r0, #255	; 0xff
    2dbc:	4001      	ands	r1, r0
    2dbe:	000c      	movs	r4, r1
    2dc0:	7f99      	ldrb	r1, [r3, #30]
    2dc2:	2000      	movs	r0, #0
    2dc4:	4001      	ands	r1, r0
    2dc6:	1c08      	adds	r0, r1, #0
    2dc8:	1c21      	adds	r1, r4, #0
    2dca:	4301      	orrs	r1, r0
    2dcc:	7799      	strb	r1, [r3, #30]
    2dce:	0e10      	lsrs	r0, r2, #24
    2dd0:	7fda      	ldrb	r2, [r3, #31]
    2dd2:	2100      	movs	r1, #0
    2dd4:	400a      	ands	r2, r1
    2dd6:	1c11      	adds	r1, r2, #0
    2dd8:	1c02      	adds	r2, r0, #0
    2dda:	430a      	orrs	r2, r1
    2ddc:	77da      	strb	r2, [r3, #31]
	localCpy->Timer5 = tdcCpy->Timer5;
    2dde:	687b      	ldr	r3, [r7, #4]
    2de0:	2220      	movs	r2, #32
    2de2:	5c9a      	ldrb	r2, [r3, r2]
    2de4:	2121      	movs	r1, #33	; 0x21
    2de6:	5c59      	ldrb	r1, [r3, r1]
    2de8:	0209      	lsls	r1, r1, #8
    2dea:	430a      	orrs	r2, r1
    2dec:	2122      	movs	r1, #34	; 0x22
    2dee:	5c59      	ldrb	r1, [r3, r1]
    2df0:	0409      	lsls	r1, r1, #16
    2df2:	430a      	orrs	r2, r1
    2df4:	2123      	movs	r1, #35	; 0x23
    2df6:	5c5b      	ldrb	r3, [r3, r1]
    2df8:	061b      	lsls	r3, r3, #24
    2dfa:	4313      	orrs	r3, r2
    2dfc:	001a      	movs	r2, r3
    2dfe:	683b      	ldr	r3, [r7, #0]
    2e00:	21ff      	movs	r1, #255	; 0xff
    2e02:	4011      	ands	r1, r2
    2e04:	000d      	movs	r5, r1
    2e06:	2120      	movs	r1, #32
    2e08:	5c58      	ldrb	r0, [r3, r1]
    2e0a:	2400      	movs	r4, #0
    2e0c:	4020      	ands	r0, r4
    2e0e:	1c04      	adds	r4, r0, #0
    2e10:	1c28      	adds	r0, r5, #0
    2e12:	4320      	orrs	r0, r4
    2e14:	5458      	strb	r0, [r3, r1]
    2e16:	0a11      	lsrs	r1, r2, #8
    2e18:	20ff      	movs	r0, #255	; 0xff
    2e1a:	4001      	ands	r1, r0
    2e1c:	000d      	movs	r5, r1
    2e1e:	2121      	movs	r1, #33	; 0x21
    2e20:	5c58      	ldrb	r0, [r3, r1]
    2e22:	2400      	movs	r4, #0
    2e24:	4020      	ands	r0, r4
    2e26:	1c04      	adds	r4, r0, #0
    2e28:	1c28      	adds	r0, r5, #0
    2e2a:	4320      	orrs	r0, r4
    2e2c:	5458      	strb	r0, [r3, r1]
    2e2e:	0c11      	lsrs	r1, r2, #16
    2e30:	20ff      	movs	r0, #255	; 0xff
    2e32:	4001      	ands	r1, r0
    2e34:	000d      	movs	r5, r1
    2e36:	2122      	movs	r1, #34	; 0x22
    2e38:	5c58      	ldrb	r0, [r3, r1]
    2e3a:	2400      	movs	r4, #0
    2e3c:	4020      	ands	r0, r4
    2e3e:	1c04      	adds	r4, r0, #0
    2e40:	1c28      	adds	r0, r5, #0
    2e42:	4320      	orrs	r0, r4
    2e44:	5458      	strb	r0, [r3, r1]
    2e46:	0e14      	lsrs	r4, r2, #24
    2e48:	2223      	movs	r2, #35	; 0x23
    2e4a:	5c99      	ldrb	r1, [r3, r2]
    2e4c:	2000      	movs	r0, #0
    2e4e:	4001      	ands	r1, r0
    2e50:	1c08      	adds	r0, r1, #0
    2e52:	1c21      	adds	r1, r4, #0
    2e54:	4301      	orrs	r1, r0
    2e56:	5499      	strb	r1, [r3, r2]
	localCpy->Clock5 = tdcCpy->Clock5;
    2e58:	687b      	ldr	r3, [r7, #4]
    2e5a:	2224      	movs	r2, #36	; 0x24
    2e5c:	5c9a      	ldrb	r2, [r3, r2]
    2e5e:	2125      	movs	r1, #37	; 0x25
    2e60:	5c59      	ldrb	r1, [r3, r1]
    2e62:	0209      	lsls	r1, r1, #8
    2e64:	430a      	orrs	r2, r1
    2e66:	2126      	movs	r1, #38	; 0x26
    2e68:	5c59      	ldrb	r1, [r3, r1]
    2e6a:	0409      	lsls	r1, r1, #16
    2e6c:	430a      	orrs	r2, r1
    2e6e:	e005      	b.n	2e7c <flow_copyTdcValues+0x40c>
    2e70:	0000338d 	.word	0x0000338d
    2e74:	200007b0 	.word	0x200007b0
    2e78:	200007b4 	.word	0x200007b4
    2e7c:	2127      	movs	r1, #39	; 0x27
    2e7e:	5c5b      	ldrb	r3, [r3, r1]
    2e80:	061b      	lsls	r3, r3, #24
    2e82:	4313      	orrs	r3, r2
    2e84:	001a      	movs	r2, r3
    2e86:	683b      	ldr	r3, [r7, #0]
    2e88:	21ff      	movs	r1, #255	; 0xff
    2e8a:	4011      	ands	r1, r2
    2e8c:	000d      	movs	r5, r1
    2e8e:	2124      	movs	r1, #36	; 0x24
    2e90:	5c58      	ldrb	r0, [r3, r1]
    2e92:	2400      	movs	r4, #0
    2e94:	4020      	ands	r0, r4
    2e96:	1c04      	adds	r4, r0, #0
    2e98:	1c28      	adds	r0, r5, #0
    2e9a:	4320      	orrs	r0, r4
    2e9c:	5458      	strb	r0, [r3, r1]
    2e9e:	0a11      	lsrs	r1, r2, #8
    2ea0:	20ff      	movs	r0, #255	; 0xff
    2ea2:	4001      	ands	r1, r0
    2ea4:	000d      	movs	r5, r1
    2ea6:	2125      	movs	r1, #37	; 0x25
    2ea8:	5c58      	ldrb	r0, [r3, r1]
    2eaa:	2400      	movs	r4, #0
    2eac:	4020      	ands	r0, r4
    2eae:	1c04      	adds	r4, r0, #0
    2eb0:	1c28      	adds	r0, r5, #0
    2eb2:	4320      	orrs	r0, r4
    2eb4:	5458      	strb	r0, [r3, r1]
    2eb6:	0c11      	lsrs	r1, r2, #16
    2eb8:	20ff      	movs	r0, #255	; 0xff
    2eba:	4001      	ands	r1, r0
    2ebc:	000d      	movs	r5, r1
    2ebe:	2126      	movs	r1, #38	; 0x26
    2ec0:	5c58      	ldrb	r0, [r3, r1]
    2ec2:	2400      	movs	r4, #0
    2ec4:	4020      	ands	r0, r4
    2ec6:	1c04      	adds	r4, r0, #0
    2ec8:	1c28      	adds	r0, r5, #0
    2eca:	4320      	orrs	r0, r4
    2ecc:	5458      	strb	r0, [r3, r1]
    2ece:	0e14      	lsrs	r4, r2, #24
    2ed0:	2227      	movs	r2, #39	; 0x27
    2ed2:	5c99      	ldrb	r1, [r3, r2]
    2ed4:	2000      	movs	r0, #0
    2ed6:	4001      	ands	r1, r0
    2ed8:	1c08      	adds	r0, r1, #0
    2eda:	1c21      	adds	r1, r4, #0
    2edc:	4301      	orrs	r1, r0
    2ede:	5499      	strb	r1, [r3, r2]
	localCpy->Timer6 = tdcCpy->Timer6;
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	2228      	movs	r2, #40	; 0x28
    2ee4:	5c9a      	ldrb	r2, [r3, r2]
    2ee6:	2129      	movs	r1, #41	; 0x29
    2ee8:	5c59      	ldrb	r1, [r3, r1]
    2eea:	0209      	lsls	r1, r1, #8
    2eec:	430a      	orrs	r2, r1
    2eee:	212a      	movs	r1, #42	; 0x2a
    2ef0:	5c59      	ldrb	r1, [r3, r1]
    2ef2:	0409      	lsls	r1, r1, #16
    2ef4:	430a      	orrs	r2, r1
    2ef6:	212b      	movs	r1, #43	; 0x2b
    2ef8:	5c5b      	ldrb	r3, [r3, r1]
    2efa:	061b      	lsls	r3, r3, #24
    2efc:	4313      	orrs	r3, r2
    2efe:	001a      	movs	r2, r3
    2f00:	683b      	ldr	r3, [r7, #0]
    2f02:	21ff      	movs	r1, #255	; 0xff
    2f04:	4011      	ands	r1, r2
    2f06:	000d      	movs	r5, r1
    2f08:	2128      	movs	r1, #40	; 0x28
    2f0a:	5c58      	ldrb	r0, [r3, r1]
    2f0c:	2400      	movs	r4, #0
    2f0e:	4020      	ands	r0, r4
    2f10:	1c04      	adds	r4, r0, #0
    2f12:	1c28      	adds	r0, r5, #0
    2f14:	4320      	orrs	r0, r4
    2f16:	5458      	strb	r0, [r3, r1]
    2f18:	0a11      	lsrs	r1, r2, #8
    2f1a:	20ff      	movs	r0, #255	; 0xff
    2f1c:	4001      	ands	r1, r0
    2f1e:	000d      	movs	r5, r1
    2f20:	2129      	movs	r1, #41	; 0x29
    2f22:	5c58      	ldrb	r0, [r3, r1]
    2f24:	2400      	movs	r4, #0
    2f26:	4020      	ands	r0, r4
    2f28:	1c04      	adds	r4, r0, #0
    2f2a:	1c28      	adds	r0, r5, #0
    2f2c:	4320      	orrs	r0, r4
    2f2e:	5458      	strb	r0, [r3, r1]
    2f30:	0c11      	lsrs	r1, r2, #16
    2f32:	20ff      	movs	r0, #255	; 0xff
    2f34:	4001      	ands	r1, r0
    2f36:	000d      	movs	r5, r1
    2f38:	212a      	movs	r1, #42	; 0x2a
    2f3a:	5c58      	ldrb	r0, [r3, r1]
    2f3c:	2400      	movs	r4, #0
    2f3e:	4020      	ands	r0, r4
    2f40:	1c04      	adds	r4, r0, #0
    2f42:	1c28      	adds	r0, r5, #0
    2f44:	4320      	orrs	r0, r4
    2f46:	5458      	strb	r0, [r3, r1]
    2f48:	0e14      	lsrs	r4, r2, #24
    2f4a:	222b      	movs	r2, #43	; 0x2b
    2f4c:	5c99      	ldrb	r1, [r3, r2]
    2f4e:	2000      	movs	r0, #0
    2f50:	4001      	ands	r1, r0
    2f52:	1c08      	adds	r0, r1, #0
    2f54:	1c21      	adds	r1, r4, #0
    2f56:	4301      	orrs	r1, r0
    2f58:	5499      	strb	r1, [r3, r2]
	localCpy->Calb1 = tdcCpy->Calb1;
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	222c      	movs	r2, #44	; 0x2c
    2f5e:	5c9a      	ldrb	r2, [r3, r2]
    2f60:	212d      	movs	r1, #45	; 0x2d
    2f62:	5c59      	ldrb	r1, [r3, r1]
    2f64:	0209      	lsls	r1, r1, #8
    2f66:	430a      	orrs	r2, r1
    2f68:	212e      	movs	r1, #46	; 0x2e
    2f6a:	5c59      	ldrb	r1, [r3, r1]
    2f6c:	0409      	lsls	r1, r1, #16
    2f6e:	430a      	orrs	r2, r1
    2f70:	212f      	movs	r1, #47	; 0x2f
    2f72:	5c5b      	ldrb	r3, [r3, r1]
    2f74:	061b      	lsls	r3, r3, #24
    2f76:	4313      	orrs	r3, r2
    2f78:	001a      	movs	r2, r3
    2f7a:	683b      	ldr	r3, [r7, #0]
    2f7c:	21ff      	movs	r1, #255	; 0xff
    2f7e:	4011      	ands	r1, r2
    2f80:	000d      	movs	r5, r1
    2f82:	212c      	movs	r1, #44	; 0x2c
    2f84:	5c58      	ldrb	r0, [r3, r1]
    2f86:	2400      	movs	r4, #0
    2f88:	4020      	ands	r0, r4
    2f8a:	1c04      	adds	r4, r0, #0
    2f8c:	1c28      	adds	r0, r5, #0
    2f8e:	4320      	orrs	r0, r4
    2f90:	5458      	strb	r0, [r3, r1]
    2f92:	0a11      	lsrs	r1, r2, #8
    2f94:	20ff      	movs	r0, #255	; 0xff
    2f96:	4001      	ands	r1, r0
    2f98:	000d      	movs	r5, r1
    2f9a:	212d      	movs	r1, #45	; 0x2d
    2f9c:	5c58      	ldrb	r0, [r3, r1]
    2f9e:	2400      	movs	r4, #0
    2fa0:	4020      	ands	r0, r4
    2fa2:	1c04      	adds	r4, r0, #0
    2fa4:	1c28      	adds	r0, r5, #0
    2fa6:	4320      	orrs	r0, r4
    2fa8:	5458      	strb	r0, [r3, r1]
    2faa:	0c11      	lsrs	r1, r2, #16
    2fac:	20ff      	movs	r0, #255	; 0xff
    2fae:	4001      	ands	r1, r0
    2fb0:	000d      	movs	r5, r1
    2fb2:	212e      	movs	r1, #46	; 0x2e
    2fb4:	5c58      	ldrb	r0, [r3, r1]
    2fb6:	2400      	movs	r4, #0
    2fb8:	4020      	ands	r0, r4
    2fba:	1c04      	adds	r4, r0, #0
    2fbc:	1c28      	adds	r0, r5, #0
    2fbe:	4320      	orrs	r0, r4
    2fc0:	5458      	strb	r0, [r3, r1]
    2fc2:	0e14      	lsrs	r4, r2, #24
    2fc4:	222f      	movs	r2, #47	; 0x2f
    2fc6:	5c99      	ldrb	r1, [r3, r2]
    2fc8:	2000      	movs	r0, #0
    2fca:	4001      	ands	r1, r0
    2fcc:	1c08      	adds	r0, r1, #0
    2fce:	1c21      	adds	r1, r4, #0
    2fd0:	4301      	orrs	r1, r0
    2fd2:	5499      	strb	r1, [r3, r2]
	localCpy->Calb2 = tdcCpy->Calb2;
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	2230      	movs	r2, #48	; 0x30
    2fd8:	5c9a      	ldrb	r2, [r3, r2]
    2fda:	2131      	movs	r1, #49	; 0x31
    2fdc:	5c59      	ldrb	r1, [r3, r1]
    2fde:	0209      	lsls	r1, r1, #8
    2fe0:	430a      	orrs	r2, r1
    2fe2:	2132      	movs	r1, #50	; 0x32
    2fe4:	5c59      	ldrb	r1, [r3, r1]
    2fe6:	0409      	lsls	r1, r1, #16
    2fe8:	430a      	orrs	r2, r1
    2fea:	2133      	movs	r1, #51	; 0x33
    2fec:	5c5b      	ldrb	r3, [r3, r1]
    2fee:	061b      	lsls	r3, r3, #24
    2ff0:	4313      	orrs	r3, r2
    2ff2:	001a      	movs	r2, r3
    2ff4:	683b      	ldr	r3, [r7, #0]
    2ff6:	21ff      	movs	r1, #255	; 0xff
    2ff8:	4011      	ands	r1, r2
    2ffa:	000d      	movs	r5, r1
    2ffc:	2130      	movs	r1, #48	; 0x30
    2ffe:	5c58      	ldrb	r0, [r3, r1]
    3000:	2400      	movs	r4, #0
    3002:	4020      	ands	r0, r4
    3004:	1c04      	adds	r4, r0, #0
    3006:	1c28      	adds	r0, r5, #0
    3008:	4320      	orrs	r0, r4
    300a:	5458      	strb	r0, [r3, r1]
    300c:	0a11      	lsrs	r1, r2, #8
    300e:	20ff      	movs	r0, #255	; 0xff
    3010:	4001      	ands	r1, r0
    3012:	000d      	movs	r5, r1
    3014:	2131      	movs	r1, #49	; 0x31
    3016:	5c58      	ldrb	r0, [r3, r1]
    3018:	2400      	movs	r4, #0
    301a:	4020      	ands	r0, r4
    301c:	1c04      	adds	r4, r0, #0
    301e:	1c28      	adds	r0, r5, #0
    3020:	4320      	orrs	r0, r4
    3022:	5458      	strb	r0, [r3, r1]
    3024:	0c11      	lsrs	r1, r2, #16
    3026:	20ff      	movs	r0, #255	; 0xff
    3028:	4001      	ands	r1, r0
    302a:	000d      	movs	r5, r1
    302c:	2132      	movs	r1, #50	; 0x32
    302e:	5c58      	ldrb	r0, [r3, r1]
    3030:	2400      	movs	r4, #0
    3032:	4020      	ands	r0, r4
    3034:	1c04      	adds	r4, r0, #0
    3036:	1c28      	adds	r0, r5, #0
    3038:	4320      	orrs	r0, r4
    303a:	5458      	strb	r0, [r3, r1]
    303c:	0e14      	lsrs	r4, r2, #24
    303e:	2233      	movs	r2, #51	; 0x33
    3040:	5c99      	ldrb	r1, [r3, r2]
    3042:	2000      	movs	r0, #0
    3044:	4001      	ands	r1, r0
    3046:	1c08      	adds	r0, r1, #0
    3048:	1c21      	adds	r1, r4, #0
    304a:	4301      	orrs	r1, r0
    304c:	5499      	strb	r1, [r3, r2]
}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	46bd      	mov	sp, r7
    3052:	b002      	add	sp, #8
    3054:	bdb0      	pop	{r4, r5, r7, pc}
    3056:	46c0      	nop			; (mov r8, r8)

00003058 <flow_calculateToFs>:

static void flow_calculateToFs(void)
{
    3058:	b5f0      	push	{r4, r5, r6, r7, lr}
    305a:	b08d      	sub	sp, #52	; 0x34
    305c:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < 2; i++)
    305e:	230f      	movs	r3, #15
    3060:	2210      	movs	r2, #16
    3062:	4694      	mov	ip, r2
    3064:	44bc      	add	ip, r7
    3066:	4463      	add	r3, ip
    3068:	2200      	movs	r2, #0
    306a:	701a      	strb	r2, [r3, #0]
    306c:	e0a5      	b.n	31ba <flow_calculateToFs+0x162>
	{
		volatile double calibration = (double)(1.125) / ((double)_rawTimerRegs[i].Calb2 - (double)_rawTimerRegs[i].Calb1);
    306e:	230f      	movs	r3, #15
    3070:	2210      	movs	r2, #16
    3072:	4694      	mov	ip, r2
    3074:	44bc      	add	ip, r7
    3076:	4463      	add	r3, ip
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	4a56      	ldr	r2, [pc, #344]	; (31d4 <flow_calculateToFs+0x17c>)
    307c:	2134      	movs	r1, #52	; 0x34
    307e:	434b      	muls	r3, r1
    3080:	18d3      	adds	r3, r2, r3
    3082:	3330      	adds	r3, #48	; 0x30
    3084:	681a      	ldr	r2, [r3, #0]
    3086:	4b54      	ldr	r3, [pc, #336]	; (31d8 <flow_calculateToFs+0x180>)
    3088:	0010      	movs	r0, r2
    308a:	4798      	blx	r3
    308c:	0005      	movs	r5, r0
    308e:	000e      	movs	r6, r1
    3090:	230f      	movs	r3, #15
    3092:	2210      	movs	r2, #16
    3094:	4694      	mov	ip, r2
    3096:	44bc      	add	ip, r7
    3098:	4463      	add	r3, ip
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	4a4d      	ldr	r2, [pc, #308]	; (31d4 <flow_calculateToFs+0x17c>)
    309e:	2134      	movs	r1, #52	; 0x34
    30a0:	434b      	muls	r3, r1
    30a2:	18d3      	adds	r3, r2, r3
    30a4:	332c      	adds	r3, #44	; 0x2c
    30a6:	681a      	ldr	r2, [r3, #0]
    30a8:	4b4b      	ldr	r3, [pc, #300]	; (31d8 <flow_calculateToFs+0x180>)
    30aa:	0010      	movs	r0, r2
    30ac:	4798      	blx	r3
    30ae:	0002      	movs	r2, r0
    30b0:	000b      	movs	r3, r1
    30b2:	4c4a      	ldr	r4, [pc, #296]	; (31dc <flow_calculateToFs+0x184>)
    30b4:	0028      	movs	r0, r5
    30b6:	0031      	movs	r1, r6
    30b8:	47a0      	blx	r4
    30ba:	0003      	movs	r3, r0
    30bc:	000c      	movs	r4, r1
    30be:	001a      	movs	r2, r3
    30c0:	0023      	movs	r3, r4
    30c2:	4c47      	ldr	r4, [pc, #284]	; (31e0 <flow_calculateToFs+0x188>)
    30c4:	2000      	movs	r0, #0
    30c6:	4947      	ldr	r1, [pc, #284]	; (31e4 <flow_calculateToFs+0x18c>)
    30c8:	47a0      	blx	r4
    30ca:	0003      	movs	r3, r0
    30cc:	000c      	movs	r4, r1
    30ce:	613b      	str	r3, [r7, #16]
    30d0:	617c      	str	r4, [r7, #20]
		uint32_t *regs = &_rawTimerRegs[i].Timer1;
    30d2:	230f      	movs	r3, #15
    30d4:	2210      	movs	r2, #16
    30d6:	4694      	mov	ip, r2
    30d8:	44bc      	add	ip, r7
    30da:	4463      	add	r3, ip
    30dc:	781b      	ldrb	r3, [r3, #0]
    30de:	2234      	movs	r2, #52	; 0x34
    30e0:	435a      	muls	r2, r3
    30e2:	4b3c      	ldr	r3, [pc, #240]	; (31d4 <flow_calculateToFs+0x17c>)
    30e4:	18d3      	adds	r3, r2, r3
    30e6:	61bb      	str	r3, [r7, #24]

		for(uint8_t j = 0; j < 5; j++)
    30e8:	230e      	movs	r3, #14
    30ea:	2210      	movs	r2, #16
    30ec:	4694      	mov	ip, r2
    30ee:	44bc      	add	ip, r7
    30f0:	4463      	add	r3, ip
    30f2:	2200      	movs	r2, #0
    30f4:	701a      	strb	r2, [r3, #0]
    30f6:	e04b      	b.n	3190 <flow_calculateToFs+0x138>
		{
			_rawToFs[i][j] = flow_calcualteToFSingle(regs[0], regs[2], (regs[1] >> 0), calibration);
    30f8:	230f      	movs	r3, #15
    30fa:	2210      	movs	r2, #16
    30fc:	4694      	mov	ip, r2
    30fe:	44bc      	add	ip, r7
    3100:	4463      	add	r3, ip
    3102:	781d      	ldrb	r5, [r3, #0]
    3104:	230e      	movs	r3, #14
    3106:	2210      	movs	r2, #16
    3108:	4694      	mov	ip, r2
    310a:	44bc      	add	ip, r7
    310c:	4463      	add	r3, ip
    310e:	781e      	ldrb	r6, [r3, #0]
    3110:	69bb      	ldr	r3, [r7, #24]
    3112:	681a      	ldr	r2, [r3, #0]
    3114:	4b30      	ldr	r3, [pc, #192]	; (31d8 <flow_calculateToFs+0x180>)
    3116:	0010      	movs	r0, r2
    3118:	4798      	blx	r3
    311a:	60b8      	str	r0, [r7, #8]
    311c:	60f9      	str	r1, [r7, #12]
    311e:	69bb      	ldr	r3, [r7, #24]
    3120:	3308      	adds	r3, #8
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	4b2c      	ldr	r3, [pc, #176]	; (31d8 <flow_calculateToFs+0x180>)
    3126:	0010      	movs	r0, r2
    3128:	4798      	blx	r3
    312a:	6038      	str	r0, [r7, #0]
    312c:	6079      	str	r1, [r7, #4]
    312e:	69bb      	ldr	r3, [r7, #24]
    3130:	3304      	adds	r3, #4
    3132:	681a      	ldr	r2, [r3, #0]
    3134:	4b28      	ldr	r3, [pc, #160]	; (31d8 <flow_calculateToFs+0x180>)
    3136:	0010      	movs	r0, r2
    3138:	4798      	blx	r3
    313a:	000a      	movs	r2, r1
    313c:	0001      	movs	r1, r0
    313e:	693b      	ldr	r3, [r7, #16]
    3140:	697c      	ldr	r4, [r7, #20]
    3142:	9302      	str	r3, [sp, #8]
    3144:	9403      	str	r4, [sp, #12]
    3146:	9100      	str	r1, [sp, #0]
    3148:	9201      	str	r2, [sp, #4]
    314a:	683a      	ldr	r2, [r7, #0]
    314c:	687b      	ldr	r3, [r7, #4]
    314e:	68b8      	ldr	r0, [r7, #8]
    3150:	68f9      	ldr	r1, [r7, #12]
    3152:	4c25      	ldr	r4, [pc, #148]	; (31e8 <flow_calculateToFs+0x190>)
    3154:	47a0      	blx	r4
    3156:	000a      	movs	r2, r1
    3158:	0001      	movs	r1, r0
    315a:	4824      	ldr	r0, [pc, #144]	; (31ec <flow_calculateToFs+0x194>)
    315c:	002b      	movs	r3, r5
    315e:	009b      	lsls	r3, r3, #2
    3160:	195b      	adds	r3, r3, r5
    3162:	199b      	adds	r3, r3, r6
    3164:	00db      	lsls	r3, r3, #3
    3166:	18c3      	adds	r3, r0, r3
    3168:	6019      	str	r1, [r3, #0]
    316a:	605a      	str	r2, [r3, #4]
			*regs += 2;
    316c:	69bb      	ldr	r3, [r7, #24]
    316e:	681b      	ldr	r3, [r3, #0]
    3170:	1c9a      	adds	r2, r3, #2
    3172:	69bb      	ldr	r3, [r7, #24]
    3174:	601a      	str	r2, [r3, #0]
		for(uint8_t j = 0; j < 5; j++)
    3176:	230e      	movs	r3, #14
    3178:	2210      	movs	r2, #16
    317a:	4694      	mov	ip, r2
    317c:	44bc      	add	ip, r7
    317e:	4463      	add	r3, ip
    3180:	781a      	ldrb	r2, [r3, #0]
    3182:	230e      	movs	r3, #14
    3184:	2110      	movs	r1, #16
    3186:	468c      	mov	ip, r1
    3188:	44bc      	add	ip, r7
    318a:	4463      	add	r3, ip
    318c:	3201      	adds	r2, #1
    318e:	701a      	strb	r2, [r3, #0]
    3190:	230e      	movs	r3, #14
    3192:	2210      	movs	r2, #16
    3194:	4694      	mov	ip, r2
    3196:	44bc      	add	ip, r7
    3198:	4463      	add	r3, ip
    319a:	781b      	ldrb	r3, [r3, #0]
    319c:	2b04      	cmp	r3, #4
    319e:	d9ab      	bls.n	30f8 <flow_calculateToFs+0xa0>
	for(uint8_t i = 0; i < 2; i++)
    31a0:	230f      	movs	r3, #15
    31a2:	2210      	movs	r2, #16
    31a4:	4694      	mov	ip, r2
    31a6:	44bc      	add	ip, r7
    31a8:	4463      	add	r3, ip
    31aa:	781a      	ldrb	r2, [r3, #0]
    31ac:	230f      	movs	r3, #15
    31ae:	2110      	movs	r1, #16
    31b0:	468c      	mov	ip, r1
    31b2:	44bc      	add	ip, r7
    31b4:	4463      	add	r3, ip
    31b6:	3201      	adds	r2, #1
    31b8:	701a      	strb	r2, [r3, #0]
    31ba:	230f      	movs	r3, #15
    31bc:	2210      	movs	r2, #16
    31be:	4694      	mov	ip, r2
    31c0:	44bc      	add	ip, r7
    31c2:	4463      	add	r3, ip
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2b01      	cmp	r3, #1
    31c8:	d800      	bhi.n	31cc <flow_calculateToFs+0x174>
    31ca:	e750      	b.n	306e <flow_calculateToFs+0x16>
		}
	}
}
    31cc:	46c0      	nop			; (mov r8, r8)
    31ce:	46bd      	mov	sp, r7
    31d0:	b009      	add	sp, #36	; 0x24
    31d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31d4:	200007b4 	.word	0x200007b4
    31d8:	00005c31 	.word	0x00005c31
    31dc:	0000559d 	.word	0x0000559d
    31e0:	00004835 	.word	0x00004835
    31e4:	3ff20000 	.word	0x3ff20000
    31e8:	000031f1 	.word	0x000031f1
    31ec:	20000820 	.word	0x20000820

000031f0 <flow_calcualteToFSingle>:

static double flow_calcualteToFSingle(double time1, double time2, double clock, double calib)
{
    31f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31f2:	b087      	sub	sp, #28
    31f4:	af00      	add	r7, sp, #0
    31f6:	60b8      	str	r0, [r7, #8]
    31f8:	60f9      	str	r1, [r7, #12]
    31fa:	603a      	str	r2, [r7, #0]
    31fc:	607b      	str	r3, [r7, #4]
	volatile double val = (time1 - time2) * calib + (clock * (double).125);
    31fe:	4c16      	ldr	r4, [pc, #88]	; (3258 <flow_calcualteToFSingle+0x68>)
    3200:	683a      	ldr	r2, [r7, #0]
    3202:	687b      	ldr	r3, [r7, #4]
    3204:	68b8      	ldr	r0, [r7, #8]
    3206:	68f9      	ldr	r1, [r7, #12]
    3208:	47a0      	blx	r4
    320a:	0003      	movs	r3, r0
    320c:	000c      	movs	r4, r1
    320e:	0018      	movs	r0, r3
    3210:	0021      	movs	r1, r4
    3212:	4c12      	ldr	r4, [pc, #72]	; (325c <flow_calcualteToFSingle+0x6c>)
    3214:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3218:	47a0      	blx	r4
    321a:	0003      	movs	r3, r0
    321c:	000c      	movs	r4, r1
    321e:	001d      	movs	r5, r3
    3220:	0026      	movs	r6, r4
    3222:	4c0e      	ldr	r4, [pc, #56]	; (325c <flow_calcualteToFSingle+0x6c>)
    3224:	2200      	movs	r2, #0
    3226:	23ff      	movs	r3, #255	; 0xff
    3228:	059b      	lsls	r3, r3, #22
    322a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    322c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    322e:	47a0      	blx	r4
    3230:	0003      	movs	r3, r0
    3232:	000c      	movs	r4, r1
    3234:	001a      	movs	r2, r3
    3236:	0023      	movs	r3, r4
    3238:	4c09      	ldr	r4, [pc, #36]	; (3260 <flow_calcualteToFSingle+0x70>)
    323a:	0028      	movs	r0, r5
    323c:	0031      	movs	r1, r6
    323e:	47a0      	blx	r4
    3240:	0003      	movs	r3, r0
    3242:	000c      	movs	r4, r1
    3244:	613b      	str	r3, [r7, #16]
    3246:	617c      	str	r4, [r7, #20]
	return val;
    3248:	693b      	ldr	r3, [r7, #16]
    324a:	697c      	ldr	r4, [r7, #20]
}
    324c:	0018      	movs	r0, r3
    324e:	0021      	movs	r1, r4
    3250:	46bd      	mov	sp, r7
    3252:	b007      	add	sp, #28
    3254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	0000559d 	.word	0x0000559d
    325c:	0000509d 	.word	0x0000509d
    3260:	00004215 	.word	0x00004215

00003264 <flow_timerCallback>:

static void flow_timerCallback(Timer_t *timer)
{
    3264:	b580      	push	{r7, lr}
    3266:	b082      	sub	sp, #8
    3268:	af00      	add	r7, sp, #0
    326a:	6078      	str	r0, [r7, #4]
	flow_setDirection(UPSTREAM);
    326c:	2000      	movs	r0, #0
    326e:	4b04      	ldr	r3, [pc, #16]	; (3280 <flow_timerCallback+0x1c>)
    3270:	4798      	blx	r3
	TDC_StartUltrasonicTransaction();
    3272:	4b04      	ldr	r3, [pc, #16]	; (3284 <flow_timerCallback+0x20>)
    3274:	4798      	blx	r3
}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	46bd      	mov	sp, r7
    327a:	b002      	add	sp, #8
    327c:	bd80      	pop	{r7, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	00002a3d 	.word	0x00002a3d
    3284:	00003365 	.word	0x00003365

00003288 <TDC_Init>:

//=========================================================================
// Implementations
//=========================================================================
void TDC_Init(SPI_t *spi)
{
    3288:	b590      	push	{r4, r7, lr}
    328a:	b085      	sub	sp, #20
    328c:	af02      	add	r7, sp, #8
    328e:	6078      	str	r0, [r7, #4]
	DEBUG_WriteLine("Initializing TDC Library.");
    3290:	4b28      	ldr	r3, [pc, #160]	; (3334 <TDC_Init+0xac>)
    3292:	0018      	movs	r0, r3
    3294:	4b28      	ldr	r3, [pc, #160]	; (3338 <TDC_Init+0xb0>)
    3296:	4798      	blx	r3

	//Init SPI
	_spiLine = spi;
    3298:	4b28      	ldr	r3, [pc, #160]	; (333c <TDC_Init+0xb4>)
    329a:	687a      	ldr	r2, [r7, #4]
    329c:	601a      	str	r2, [r3, #0]
	SPI_Init(_spiLine);
    329e:	4b27      	ldr	r3, [pc, #156]	; (333c <TDC_Init+0xb4>)
    32a0:	681b      	ldr	r3, [r3, #0]
    32a2:	0018      	movs	r0, r3
    32a4:	4b26      	ldr	r3, [pc, #152]	; (3340 <TDC_Init+0xb8>)
    32a6:	4798      	blx	r3

	//Setup Chip Select Pin
	MCU_PinSetup(SPI_TDC_CS_PORT, SPI_TDC_CS_PIN, 1, 1, FALSE, FALSE);
    32a8:	2300      	movs	r3, #0
    32aa:	9301      	str	r3, [sp, #4]
    32ac:	2300      	movs	r3, #0
    32ae:	9300      	str	r3, [sp, #0]
    32b0:	2301      	movs	r3, #1
    32b2:	2201      	movs	r2, #1
    32b4:	2104      	movs	r1, #4
    32b6:	2001      	movs	r0, #1
    32b8:	4c22      	ldr	r4, [pc, #136]	; (3344 <TDC_Init+0xbc>)
    32ba:	47a0      	blx	r4
	//Setup the Enable Pin
	MCU_PinSetup(SPI_TDC_EN_PORT, SPI_TDC_EN_PIN, 1, SPI_TDC_EN_CHIP_ON, FALSE, FALSE);
    32bc:	2300      	movs	r3, #0
    32be:	9301      	str	r3, [sp, #4]
    32c0:	2300      	movs	r3, #0
    32c2:	9300      	str	r3, [sp, #0]
    32c4:	2301      	movs	r3, #1
    32c6:	2201      	movs	r2, #1
    32c8:	2108      	movs	r1, #8
    32ca:	2001      	movs	r0, #1
    32cc:	4c1d      	ldr	r4, [pc, #116]	; (3344 <TDC_Init+0xbc>)
    32ce:	47a0      	blx	r4

	//Setup the Interrupt Pin INput
	_interrupt.CallBackFunc = (uint8_t*)&tdc_interruptHandler;
    32d0:	4b1d      	ldr	r3, [pc, #116]	; (3348 <TDC_Init+0xc0>)
    32d2:	4a1e      	ldr	r2, [pc, #120]	; (334c <TDC_Init+0xc4>)
    32d4:	605a      	str	r2, [r3, #4]
	INPUT_Init(&_interrupt);
    32d6:	4b1c      	ldr	r3, [pc, #112]	; (3348 <TDC_Init+0xc0>)
    32d8:	0018      	movs	r0, r3
    32da:	4b1d      	ldr	r3, [pc, #116]	; (3350 <TDC_Init+0xc8>)
    32dc:	4798      	blx	r3
	
	/*Setup Defaults*/
	_tdc.Config1 = TDC_CONFIG1_MEAS_MODE_2;
    32de:	4b1d      	ldr	r3, [pc, #116]	; (3354 <TDC_Init+0xcc>)
    32e0:	2202      	movs	r2, #2
    32e2:	705a      	strb	r2, [r3, #1]
	_tdc.Config2 = TDC_CONFIG2_CALIB2_10_CLOCKS | TDC_CONFIG2_NUM_STOPS_5 | TDC_CONFIG2_AVG_CYCLES_1;
    32e4:	4b1b      	ldr	r3, [pc, #108]	; (3354 <TDC_Init+0xcc>)
    32e6:	2244      	movs	r2, #68	; 0x44
    32e8:	709a      	strb	r2, [r3, #2]
	_tdc.IntStatus =  0x1F;
    32ea:	4b1a      	ldr	r3, [pc, #104]	; (3354 <TDC_Init+0xcc>)
    32ec:	221f      	movs	r2, #31
    32ee:	70da      	strb	r2, [r3, #3]
	_tdc.IntMask = TDC_INT_MASK_CLK_CNTRL_OVF_INT_ENABLED | TDC_INT_MASK_COARSE_CNTR_OVF_INT_ENABLE | TDC_INT_MASK_NEW_MEAS_MASK_ENABLE;
    32f0:	4b18      	ldr	r3, [pc, #96]	; (3354 <TDC_Init+0xcc>)
    32f2:	2207      	movs	r2, #7
    32f4:	711a      	strb	r2, [r3, #4]
	_tdc.CourseCounterHigh = TDC_COARSE_CNTRL_OVF_H(0xFF);
    32f6:	4b17      	ldr	r3, [pc, #92]	; (3354 <TDC_Init+0xcc>)
    32f8:	22ff      	movs	r2, #255	; 0xff
    32fa:	715a      	strb	r2, [r3, #5]
	_tdc.CourseCounterLow = TDC_COARSE_CNTRL_OVF_L(0xFF);
    32fc:	4b15      	ldr	r3, [pc, #84]	; (3354 <TDC_Init+0xcc>)
    32fe:	22ff      	movs	r2, #255	; 0xff
    3300:	719a      	strb	r2, [r3, #6]
	_tdc.ClockCounterHigh = TDC_CLOCK_CNTRL_OVF_H(0xFF);
    3302:	4b14      	ldr	r3, [pc, #80]	; (3354 <TDC_Init+0xcc>)
    3304:	22ff      	movs	r2, #255	; 0xff
    3306:	71da      	strb	r2, [r3, #7]
	_tdc.ClockCounterLow = TDC_CLOCK_CNTRL_OVF_L(0xFF);
    3308:	4b12      	ldr	r3, [pc, #72]	; (3354 <TDC_Init+0xcc>)
    330a:	22ff      	movs	r2, #255	; 0xff
    330c:	721a      	strb	r2, [r3, #8]
	_tdc.ClockCounterStopMaskHigh = 0;
    330e:	4b11      	ldr	r3, [pc, #68]	; (3354 <TDC_Init+0xcc>)
    3310:	2200      	movs	r2, #0
    3312:	725a      	strb	r2, [r3, #9]
	_tdc.ClockCounterStopMaskLow = 0;
    3314:	4b0f      	ldr	r3, [pc, #60]	; (3354 <TDC_Init+0xcc>)
    3316:	2200      	movs	r2, #0
    3318:	729a      	strb	r2, [r3, #10]

	_tdc.Status = TDC_NORMAL;
    331a:	4b0e      	ldr	r3, [pc, #56]	; (3354 <TDC_Init+0xcc>)
    331c:	2201      	movs	r2, #1
    331e:	701a      	strb	r2, [r3, #0]

	tdc_writeAllValues();
    3320:	4b0d      	ldr	r3, [pc, #52]	; (3358 <TDC_Init+0xd0>)
    3322:	4798      	blx	r3

	INPUT_TaskHandler();
    3324:	4b0d      	ldr	r3, [pc, #52]	; (335c <TDC_Init+0xd4>)
    3326:	4798      	blx	r3
	
	TDC_PrintValues();
    3328:	4b0d      	ldr	r3, [pc, #52]	; (3360 <TDC_Init+0xd8>)
    332a:	4798      	blx	r3
}
    332c:	46c0      	nop			; (mov r8, r8)
    332e:	46bd      	mov	sp, r7
    3330:	b003      	add	sp, #12
    3332:	bd90      	pop	{r4, r7, pc}
    3334:	00005fb8 	.word	0x00005fb8
    3338:	00000509 	.word	0x00000509
    333c:	200008a8 	.word	0x200008a8
    3340:	00001a75 	.word	0x00001a75
    3344:	000001d5 	.word	0x000001d5
    3348:	20000254 	.word	0x20000254
    334c:	00003d35 	.word	0x00003d35
    3350:	000008d1 	.word	0x000008d1
    3354:	200008b0 	.word	0x200008b0
    3358:	00003b39 	.word	0x00003b39
    335c:	00000aa1 	.word	0x00000aa1
    3360:	0000339d 	.word	0x0000339d

00003364 <TDC_StartUltrasonicTransaction>:

void TDC_StartUltrasonicTransaction(void)
{
    3364:	b580      	push	{r7, lr}
    3366:	af00      	add	r7, sp, #0
	//DEBUG_WriteLine("Starting Ultrasonic Transaction \r\n");

	tdc_clearInterrupts();
    3368:	4b05      	ldr	r3, [pc, #20]	; (3380 <TDC_StartUltrasonicTransaction+0x1c>)
    336a:	4798      	blx	r3
	
	_tdc.Status = TDC_NORMAL;
    336c:	4b05      	ldr	r3, [pc, #20]	; (3384 <TDC_StartUltrasonicTransaction+0x20>)
    336e:	2201      	movs	r2, #1
    3370:	701a      	strb	r2, [r3, #0]
	tdc_setRegister(TDC_REG_CONFIG1, TDC_CONFIG1_START_MEAS | TDC_CONFIG1_MEAS_MODE_2);
    3372:	2103      	movs	r1, #3
    3374:	2000      	movs	r0, #0
    3376:	4b04      	ldr	r3, [pc, #16]	; (3388 <TDC_StartUltrasonicTransaction+0x24>)
    3378:	4798      	blx	r3
	
}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	46bd      	mov	sp, r7
    337e:	bd80      	pop	{r7, pc}
    3380:	00003ced 	.word	0x00003ced
    3384:	200008b0 	.word	0x200008b0
    3388:	00003c5d 	.word	0x00003c5d

0000338c <TDC_GetTimerRegs>:

tdcTimerRegs_t *TDC_GetTimerRegs(void)
{
    338c:	b580      	push	{r7, lr}
    338e:	af00      	add	r7, sp, #0
	return &_tdc.TimerRegs;
    3390:	4b01      	ldr	r3, [pc, #4]	; (3398 <TDC_GetTimerRegs+0xc>)
}
    3392:	0018      	movs	r0, r3
    3394:	46bd      	mov	sp, r7
    3396:	bd80      	pop	{r7, pc}
    3398:	200008bb 	.word	0x200008bb

0000339c <TDC_PrintValues>:

void TDC_PrintValues(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	af00      	add	r7, sp, #0
	tdc_loadAllValues();
    33a0:	4b86      	ldr	r3, [pc, #536]	; (35bc <TDC_PrintValues+0x220>)
    33a2:	4798      	blx	r3

	DEBUG_WriteLine("---TDC Values---");
    33a4:	4b86      	ldr	r3, [pc, #536]	; (35c0 <TDC_PrintValues+0x224>)
    33a6:	0018      	movs	r0, r3
    33a8:	4b86      	ldr	r3, [pc, #536]	; (35c4 <TDC_PrintValues+0x228>)
    33aa:	4798      	blx	r3

	DEBUG_WriteHex("Config1: ", _tdc.Config1);
    33ac:	4b86      	ldr	r3, [pc, #536]	; (35c8 <TDC_PrintValues+0x22c>)
    33ae:	785b      	ldrb	r3, [r3, #1]
    33b0:	001a      	movs	r2, r3
    33b2:	4b86      	ldr	r3, [pc, #536]	; (35cc <TDC_PrintValues+0x230>)
    33b4:	0011      	movs	r1, r2
    33b6:	0018      	movs	r0, r3
    33b8:	4b85      	ldr	r3, [pc, #532]	; (35d0 <TDC_PrintValues+0x234>)
    33ba:	4798      	blx	r3
	DEBUG_WriteHex("Config2: ", _tdc.Config2);
    33bc:	4b82      	ldr	r3, [pc, #520]	; (35c8 <TDC_PrintValues+0x22c>)
    33be:	789b      	ldrb	r3, [r3, #2]
    33c0:	001a      	movs	r2, r3
    33c2:	4b84      	ldr	r3, [pc, #528]	; (35d4 <TDC_PrintValues+0x238>)
    33c4:	0011      	movs	r1, r2
    33c6:	0018      	movs	r0, r3
    33c8:	4b81      	ldr	r3, [pc, #516]	; (35d0 <TDC_PrintValues+0x234>)
    33ca:	4798      	blx	r3
	DEBUG_WriteHex("IntStatus: ", _tdc.IntStatus);
    33cc:	4b7e      	ldr	r3, [pc, #504]	; (35c8 <TDC_PrintValues+0x22c>)
    33ce:	78db      	ldrb	r3, [r3, #3]
    33d0:	001a      	movs	r2, r3
    33d2:	4b81      	ldr	r3, [pc, #516]	; (35d8 <TDC_PrintValues+0x23c>)
    33d4:	0011      	movs	r1, r2
    33d6:	0018      	movs	r0, r3
    33d8:	4b7d      	ldr	r3, [pc, #500]	; (35d0 <TDC_PrintValues+0x234>)
    33da:	4798      	blx	r3
	DEBUG_WriteHex("IntMask: ", _tdc.IntMask);
    33dc:	4b7a      	ldr	r3, [pc, #488]	; (35c8 <TDC_PrintValues+0x22c>)
    33de:	791b      	ldrb	r3, [r3, #4]
    33e0:	001a      	movs	r2, r3
    33e2:	4b7e      	ldr	r3, [pc, #504]	; (35dc <TDC_PrintValues+0x240>)
    33e4:	0011      	movs	r1, r2
    33e6:	0018      	movs	r0, r3
    33e8:	4b79      	ldr	r3, [pc, #484]	; (35d0 <TDC_PrintValues+0x234>)
    33ea:	4798      	blx	r3
	DEBUG_WriteHex("CourseCounterH: ", _tdc.CourseCounterHigh);
    33ec:	4b76      	ldr	r3, [pc, #472]	; (35c8 <TDC_PrintValues+0x22c>)
    33ee:	795b      	ldrb	r3, [r3, #5]
    33f0:	001a      	movs	r2, r3
    33f2:	4b7b      	ldr	r3, [pc, #492]	; (35e0 <TDC_PrintValues+0x244>)
    33f4:	0011      	movs	r1, r2
    33f6:	0018      	movs	r0, r3
    33f8:	4b75      	ldr	r3, [pc, #468]	; (35d0 <TDC_PrintValues+0x234>)
    33fa:	4798      	blx	r3
	DEBUG_WriteHex("CourseCounterL: ", _tdc.CourseCounterLow);
    33fc:	4b72      	ldr	r3, [pc, #456]	; (35c8 <TDC_PrintValues+0x22c>)
    33fe:	799b      	ldrb	r3, [r3, #6]
    3400:	001a      	movs	r2, r3
    3402:	4b78      	ldr	r3, [pc, #480]	; (35e4 <TDC_PrintValues+0x248>)
    3404:	0011      	movs	r1, r2
    3406:	0018      	movs	r0, r3
    3408:	4b71      	ldr	r3, [pc, #452]	; (35d0 <TDC_PrintValues+0x234>)
    340a:	4798      	blx	r3
	DEBUG_WriteHex("ClockCounterL: ", _tdc.ClockCounterHigh);
    340c:	4b6e      	ldr	r3, [pc, #440]	; (35c8 <TDC_PrintValues+0x22c>)
    340e:	79db      	ldrb	r3, [r3, #7]
    3410:	001a      	movs	r2, r3
    3412:	4b75      	ldr	r3, [pc, #468]	; (35e8 <TDC_PrintValues+0x24c>)
    3414:	0011      	movs	r1, r2
    3416:	0018      	movs	r0, r3
    3418:	4b6d      	ldr	r3, [pc, #436]	; (35d0 <TDC_PrintValues+0x234>)
    341a:	4798      	blx	r3
	DEBUG_WriteHex("ClockCounterH: ", _tdc.ClockCounterLow);
    341c:	4b6a      	ldr	r3, [pc, #424]	; (35c8 <TDC_PrintValues+0x22c>)
    341e:	7a1b      	ldrb	r3, [r3, #8]
    3420:	001a      	movs	r2, r3
    3422:	4b72      	ldr	r3, [pc, #456]	; (35ec <TDC_PrintValues+0x250>)
    3424:	0011      	movs	r1, r2
    3426:	0018      	movs	r0, r3
    3428:	4b69      	ldr	r3, [pc, #420]	; (35d0 <TDC_PrintValues+0x234>)
    342a:	4798      	blx	r3
	DEBUG_WriteHex("ClockCounterMaskH: ", _tdc.ClockCounterStopMaskHigh);
    342c:	4b66      	ldr	r3, [pc, #408]	; (35c8 <TDC_PrintValues+0x22c>)
    342e:	7a5b      	ldrb	r3, [r3, #9]
    3430:	001a      	movs	r2, r3
    3432:	4b6f      	ldr	r3, [pc, #444]	; (35f0 <TDC_PrintValues+0x254>)
    3434:	0011      	movs	r1, r2
    3436:	0018      	movs	r0, r3
    3438:	4b65      	ldr	r3, [pc, #404]	; (35d0 <TDC_PrintValues+0x234>)
    343a:	4798      	blx	r3
	DEBUG_WriteHex("ClockCounterMaskL: ", _tdc.ClockCounterStopMaskLow);
    343c:	4b62      	ldr	r3, [pc, #392]	; (35c8 <TDC_PrintValues+0x22c>)
    343e:	7a9b      	ldrb	r3, [r3, #10]
    3440:	001a      	movs	r2, r3
    3442:	4b6c      	ldr	r3, [pc, #432]	; (35f4 <TDC_PrintValues+0x258>)
    3444:	0011      	movs	r1, r2
    3446:	0018      	movs	r0, r3
    3448:	4b61      	ldr	r3, [pc, #388]	; (35d0 <TDC_PrintValues+0x234>)
    344a:	4798      	blx	r3
	DEBUG_WriteHex("Timer1: ", _tdc.TimerRegs.Timer1);
    344c:	4b5e      	ldr	r3, [pc, #376]	; (35c8 <TDC_PrintValues+0x22c>)
    344e:	7ada      	ldrb	r2, [r3, #11]
    3450:	68db      	ldr	r3, [r3, #12]
    3452:	021b      	lsls	r3, r3, #8
    3454:	0a1b      	lsrs	r3, r3, #8
    3456:	021b      	lsls	r3, r3, #8
    3458:	4313      	orrs	r3, r2
    345a:	001a      	movs	r2, r3
    345c:	4b66      	ldr	r3, [pc, #408]	; (35f8 <TDC_PrintValues+0x25c>)
    345e:	0011      	movs	r1, r2
    3460:	0018      	movs	r0, r3
    3462:	4b5b      	ldr	r3, [pc, #364]	; (35d0 <TDC_PrintValues+0x234>)
    3464:	4798      	blx	r3
	DEBUG_WriteHex("Clock1: ", _tdc.TimerRegs.Clock1);
    3466:	4b58      	ldr	r3, [pc, #352]	; (35c8 <TDC_PrintValues+0x22c>)
    3468:	7bda      	ldrb	r2, [r3, #15]
    346a:	691b      	ldr	r3, [r3, #16]
    346c:	021b      	lsls	r3, r3, #8
    346e:	0a1b      	lsrs	r3, r3, #8
    3470:	021b      	lsls	r3, r3, #8
    3472:	4313      	orrs	r3, r2
    3474:	001a      	movs	r2, r3
    3476:	4b61      	ldr	r3, [pc, #388]	; (35fc <TDC_PrintValues+0x260>)
    3478:	0011      	movs	r1, r2
    347a:	0018      	movs	r0, r3
    347c:	4b54      	ldr	r3, [pc, #336]	; (35d0 <TDC_PrintValues+0x234>)
    347e:	4798      	blx	r3
	DEBUG_WriteHex("Timer2: ", _tdc.TimerRegs.Timer2);
    3480:	4b51      	ldr	r3, [pc, #324]	; (35c8 <TDC_PrintValues+0x22c>)
    3482:	7cda      	ldrb	r2, [r3, #19]
    3484:	695b      	ldr	r3, [r3, #20]
    3486:	021b      	lsls	r3, r3, #8
    3488:	0a1b      	lsrs	r3, r3, #8
    348a:	021b      	lsls	r3, r3, #8
    348c:	4313      	orrs	r3, r2
    348e:	001a      	movs	r2, r3
    3490:	4b5b      	ldr	r3, [pc, #364]	; (3600 <TDC_PrintValues+0x264>)
    3492:	0011      	movs	r1, r2
    3494:	0018      	movs	r0, r3
    3496:	4b4e      	ldr	r3, [pc, #312]	; (35d0 <TDC_PrintValues+0x234>)
    3498:	4798      	blx	r3
	DEBUG_WriteHex("Clock2: ", _tdc.TimerRegs.Clock2);
    349a:	4b4b      	ldr	r3, [pc, #300]	; (35c8 <TDC_PrintValues+0x22c>)
    349c:	7dda      	ldrb	r2, [r3, #23]
    349e:	699b      	ldr	r3, [r3, #24]
    34a0:	021b      	lsls	r3, r3, #8
    34a2:	0a1b      	lsrs	r3, r3, #8
    34a4:	021b      	lsls	r3, r3, #8
    34a6:	4313      	orrs	r3, r2
    34a8:	001a      	movs	r2, r3
    34aa:	4b56      	ldr	r3, [pc, #344]	; (3604 <TDC_PrintValues+0x268>)
    34ac:	0011      	movs	r1, r2
    34ae:	0018      	movs	r0, r3
    34b0:	4b47      	ldr	r3, [pc, #284]	; (35d0 <TDC_PrintValues+0x234>)
    34b2:	4798      	blx	r3
	DEBUG_WriteHex("Timer3: ", _tdc.TimerRegs.Timer3);
    34b4:	4b44      	ldr	r3, [pc, #272]	; (35c8 <TDC_PrintValues+0x22c>)
    34b6:	7eda      	ldrb	r2, [r3, #27]
    34b8:	69db      	ldr	r3, [r3, #28]
    34ba:	021b      	lsls	r3, r3, #8
    34bc:	0a1b      	lsrs	r3, r3, #8
    34be:	021b      	lsls	r3, r3, #8
    34c0:	4313      	orrs	r3, r2
    34c2:	001a      	movs	r2, r3
    34c4:	4b50      	ldr	r3, [pc, #320]	; (3608 <TDC_PrintValues+0x26c>)
    34c6:	0011      	movs	r1, r2
    34c8:	0018      	movs	r0, r3
    34ca:	4b41      	ldr	r3, [pc, #260]	; (35d0 <TDC_PrintValues+0x234>)
    34cc:	4798      	blx	r3
	DEBUG_WriteHex("Clock3: ", _tdc.TimerRegs.Clock3);
    34ce:	4b3e      	ldr	r3, [pc, #248]	; (35c8 <TDC_PrintValues+0x22c>)
    34d0:	7fda      	ldrb	r2, [r3, #31]
    34d2:	6a1b      	ldr	r3, [r3, #32]
    34d4:	021b      	lsls	r3, r3, #8
    34d6:	0a1b      	lsrs	r3, r3, #8
    34d8:	021b      	lsls	r3, r3, #8
    34da:	4313      	orrs	r3, r2
    34dc:	001a      	movs	r2, r3
    34de:	4b4b      	ldr	r3, [pc, #300]	; (360c <TDC_PrintValues+0x270>)
    34e0:	0011      	movs	r1, r2
    34e2:	0018      	movs	r0, r3
    34e4:	4b3a      	ldr	r3, [pc, #232]	; (35d0 <TDC_PrintValues+0x234>)
    34e6:	4798      	blx	r3
	DEBUG_WriteHex("Timer4: ", _tdc.TimerRegs.Timer4);
    34e8:	4b37      	ldr	r3, [pc, #220]	; (35c8 <TDC_PrintValues+0x22c>)
    34ea:	2223      	movs	r2, #35	; 0x23
    34ec:	5c9a      	ldrb	r2, [r3, r2]
    34ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34f0:	021b      	lsls	r3, r3, #8
    34f2:	0a1b      	lsrs	r3, r3, #8
    34f4:	021b      	lsls	r3, r3, #8
    34f6:	4313      	orrs	r3, r2
    34f8:	001a      	movs	r2, r3
    34fa:	4b45      	ldr	r3, [pc, #276]	; (3610 <TDC_PrintValues+0x274>)
    34fc:	0011      	movs	r1, r2
    34fe:	0018      	movs	r0, r3
    3500:	4b33      	ldr	r3, [pc, #204]	; (35d0 <TDC_PrintValues+0x234>)
    3502:	4798      	blx	r3
	DEBUG_WriteHex("Clock4: ", _tdc.TimerRegs.Clock4);
    3504:	4b30      	ldr	r3, [pc, #192]	; (35c8 <TDC_PrintValues+0x22c>)
    3506:	2227      	movs	r2, #39	; 0x27
    3508:	5c9a      	ldrb	r2, [r3, r2]
    350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    350c:	021b      	lsls	r3, r3, #8
    350e:	0a1b      	lsrs	r3, r3, #8
    3510:	021b      	lsls	r3, r3, #8
    3512:	4313      	orrs	r3, r2
    3514:	001a      	movs	r2, r3
    3516:	4b3f      	ldr	r3, [pc, #252]	; (3614 <TDC_PrintValues+0x278>)
    3518:	0011      	movs	r1, r2
    351a:	0018      	movs	r0, r3
    351c:	4b2c      	ldr	r3, [pc, #176]	; (35d0 <TDC_PrintValues+0x234>)
    351e:	4798      	blx	r3
	DEBUG_WriteHex("Timer5: ", _tdc.TimerRegs.Timer5);
    3520:	4b29      	ldr	r3, [pc, #164]	; (35c8 <TDC_PrintValues+0x22c>)
    3522:	222b      	movs	r2, #43	; 0x2b
    3524:	5c9a      	ldrb	r2, [r3, r2]
    3526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3528:	021b      	lsls	r3, r3, #8
    352a:	0a1b      	lsrs	r3, r3, #8
    352c:	021b      	lsls	r3, r3, #8
    352e:	4313      	orrs	r3, r2
    3530:	001a      	movs	r2, r3
    3532:	4b39      	ldr	r3, [pc, #228]	; (3618 <TDC_PrintValues+0x27c>)
    3534:	0011      	movs	r1, r2
    3536:	0018      	movs	r0, r3
    3538:	4b25      	ldr	r3, [pc, #148]	; (35d0 <TDC_PrintValues+0x234>)
    353a:	4798      	blx	r3
	DEBUG_WriteHex("Clock5: ", _tdc.TimerRegs.Clock5);
    353c:	4b22      	ldr	r3, [pc, #136]	; (35c8 <TDC_PrintValues+0x22c>)
    353e:	222f      	movs	r2, #47	; 0x2f
    3540:	5c9a      	ldrb	r2, [r3, r2]
    3542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3544:	021b      	lsls	r3, r3, #8
    3546:	0a1b      	lsrs	r3, r3, #8
    3548:	021b      	lsls	r3, r3, #8
    354a:	4313      	orrs	r3, r2
    354c:	001a      	movs	r2, r3
    354e:	4b33      	ldr	r3, [pc, #204]	; (361c <TDC_PrintValues+0x280>)
    3550:	0011      	movs	r1, r2
    3552:	0018      	movs	r0, r3
    3554:	4b1e      	ldr	r3, [pc, #120]	; (35d0 <TDC_PrintValues+0x234>)
    3556:	4798      	blx	r3
	DEBUG_WriteHex("Timer6: ", _tdc.TimerRegs.Timer6);
    3558:	4b1b      	ldr	r3, [pc, #108]	; (35c8 <TDC_PrintValues+0x22c>)
    355a:	2233      	movs	r2, #51	; 0x33
    355c:	5c9a      	ldrb	r2, [r3, r2]
    355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3560:	021b      	lsls	r3, r3, #8
    3562:	0a1b      	lsrs	r3, r3, #8
    3564:	021b      	lsls	r3, r3, #8
    3566:	4313      	orrs	r3, r2
    3568:	001a      	movs	r2, r3
    356a:	4b2d      	ldr	r3, [pc, #180]	; (3620 <TDC_PrintValues+0x284>)
    356c:	0011      	movs	r1, r2
    356e:	0018      	movs	r0, r3
    3570:	4b17      	ldr	r3, [pc, #92]	; (35d0 <TDC_PrintValues+0x234>)
    3572:	4798      	blx	r3
	DEBUG_WriteHex("Calb1: ", _tdc.TimerRegs.Calb1);
    3574:	4b14      	ldr	r3, [pc, #80]	; (35c8 <TDC_PrintValues+0x22c>)
    3576:	2237      	movs	r2, #55	; 0x37
    3578:	5c9a      	ldrb	r2, [r3, r2]
    357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    357c:	021b      	lsls	r3, r3, #8
    357e:	0a1b      	lsrs	r3, r3, #8
    3580:	021b      	lsls	r3, r3, #8
    3582:	4313      	orrs	r3, r2
    3584:	001a      	movs	r2, r3
    3586:	4b27      	ldr	r3, [pc, #156]	; (3624 <TDC_PrintValues+0x288>)
    3588:	0011      	movs	r1, r2
    358a:	0018      	movs	r0, r3
    358c:	4b10      	ldr	r3, [pc, #64]	; (35d0 <TDC_PrintValues+0x234>)
    358e:	4798      	blx	r3
	DEBUG_WriteHex("Calb2: ", _tdc.TimerRegs.Calb2);
    3590:	4b0d      	ldr	r3, [pc, #52]	; (35c8 <TDC_PrintValues+0x22c>)
    3592:	223b      	movs	r2, #59	; 0x3b
    3594:	5c9a      	ldrb	r2, [r3, r2]
    3596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3598:	021b      	lsls	r3, r3, #8
    359a:	0a1b      	lsrs	r3, r3, #8
    359c:	021b      	lsls	r3, r3, #8
    359e:	4313      	orrs	r3, r2
    35a0:	001a      	movs	r2, r3
    35a2:	4b21      	ldr	r3, [pc, #132]	; (3628 <TDC_PrintValues+0x28c>)
    35a4:	0011      	movs	r1, r2
    35a6:	0018      	movs	r0, r3
    35a8:	4b09      	ldr	r3, [pc, #36]	; (35d0 <TDC_PrintValues+0x234>)
    35aa:	4798      	blx	r3
	
	DEBUG_WriteLine("\r\n\r\n");
    35ac:	4b1f      	ldr	r3, [pc, #124]	; (362c <TDC_PrintValues+0x290>)
    35ae:	0018      	movs	r0, r3
    35b0:	4b04      	ldr	r3, [pc, #16]	; (35c4 <TDC_PrintValues+0x228>)
    35b2:	4798      	blx	r3
}
    35b4:	46c0      	nop			; (mov r8, r8)
    35b6:	46bd      	mov	sp, r7
    35b8:	bd80      	pop	{r7, pc}
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	00003631 	.word	0x00003631
    35c0:	00005fd4 	.word	0x00005fd4
    35c4:	00000509 	.word	0x00000509
    35c8:	200008b0 	.word	0x200008b0
    35cc:	00005fe8 	.word	0x00005fe8
    35d0:	0000054d 	.word	0x0000054d
    35d4:	00005ff4 	.word	0x00005ff4
    35d8:	00006000 	.word	0x00006000
    35dc:	0000600c 	.word	0x0000600c
    35e0:	00006018 	.word	0x00006018
    35e4:	0000602c 	.word	0x0000602c
    35e8:	00006040 	.word	0x00006040
    35ec:	00006050 	.word	0x00006050
    35f0:	00006060 	.word	0x00006060
    35f4:	00006074 	.word	0x00006074
    35f8:	00006088 	.word	0x00006088
    35fc:	00006094 	.word	0x00006094
    3600:	000060a0 	.word	0x000060a0
    3604:	000060ac 	.word	0x000060ac
    3608:	000060b8 	.word	0x000060b8
    360c:	000060c4 	.word	0x000060c4
    3610:	000060d0 	.word	0x000060d0
    3614:	000060dc 	.word	0x000060dc
    3618:	000060e8 	.word	0x000060e8
    361c:	000060f4 	.word	0x000060f4
    3620:	00006100 	.word	0x00006100
    3624:	0000610c 	.word	0x0000610c
    3628:	00006114 	.word	0x00006114
    362c:	0000611c 	.word	0x0000611c

00003630 <tdc_loadAllValues>:

static void tdc_loadAllValues(void)
{
    3630:	b590      	push	{r4, r7, lr}
    3632:	b083      	sub	sp, #12
    3634:	af00      	add	r7, sp, #0
	uint8_t *tdcReg = &_tdc.Config1;
    3636:	4b03      	ldr	r3, [pc, #12]	; (3644 <tdc_loadAllValues+0x14>)
    3638:	603b      	str	r3, [r7, #0]

	uint8_t regLocation = 0;
    363a:	1dfb      	adds	r3, r7, #7
    363c:	2200      	movs	r2, #0
    363e:	701a      	strb	r2, [r3, #0]

	//Load Setting Registers
	for(; regLocation < TDC_TOTAL_SMALL_REGISTERS; regLocation++)
    3640:	e013      	b.n	366a <tdc_loadAllValues+0x3a>
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	200008b1 	.word	0x200008b1
		tdcReg[regLocation] = tdc_getRegister(regLocation);
    3648:	1dfb      	adds	r3, r7, #7
    364a:	781b      	ldrb	r3, [r3, #0]
    364c:	683a      	ldr	r2, [r7, #0]
    364e:	18d4      	adds	r4, r2, r3
    3650:	1dfb      	adds	r3, r7, #7
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	0018      	movs	r0, r3
    3656:	4bfd      	ldr	r3, [pc, #1012]	; (3a4c <tdc_loadAllValues+0x41c>)
    3658:	4798      	blx	r3
    365a:	0003      	movs	r3, r0
    365c:	b2db      	uxtb	r3, r3
    365e:	7023      	strb	r3, [r4, #0]
	for(; regLocation < TDC_TOTAL_SMALL_REGISTERS; regLocation++)
    3660:	1dfb      	adds	r3, r7, #7
    3662:	781a      	ldrb	r2, [r3, #0]
    3664:	1dfb      	adds	r3, r7, #7
    3666:	3201      	adds	r2, #1
    3668:	701a      	strb	r2, [r3, #0]
    366a:	1dfb      	adds	r3, r7, #7
    366c:	781b      	ldrb	r3, [r3, #0]
    366e:	2b09      	cmp	r3, #9
    3670:	d9ea      	bls.n	3648 <tdc_loadAllValues+0x18>

	//Load Timer Registers
	_tdc.TimerRegs.Timer1 = tdc_getRegister(TDC_REG_TIME1);
    3672:	2010      	movs	r0, #16
    3674:	4bf5      	ldr	r3, [pc, #980]	; (3a4c <tdc_loadAllValues+0x41c>)
    3676:	4798      	blx	r3
    3678:	0002      	movs	r2, r0
    367a:	4bf5      	ldr	r3, [pc, #980]	; (3a50 <tdc_loadAllValues+0x420>)
    367c:	330b      	adds	r3, #11
    367e:	21ff      	movs	r1, #255	; 0xff
    3680:	4011      	ands	r1, r2
    3682:	000c      	movs	r4, r1
    3684:	7819      	ldrb	r1, [r3, #0]
    3686:	2000      	movs	r0, #0
    3688:	4001      	ands	r1, r0
    368a:	1c08      	adds	r0, r1, #0
    368c:	1c21      	adds	r1, r4, #0
    368e:	4301      	orrs	r1, r0
    3690:	7019      	strb	r1, [r3, #0]
    3692:	0a11      	lsrs	r1, r2, #8
    3694:	20ff      	movs	r0, #255	; 0xff
    3696:	4001      	ands	r1, r0
    3698:	000c      	movs	r4, r1
    369a:	7859      	ldrb	r1, [r3, #1]
    369c:	2000      	movs	r0, #0
    369e:	4001      	ands	r1, r0
    36a0:	1c08      	adds	r0, r1, #0
    36a2:	1c21      	adds	r1, r4, #0
    36a4:	4301      	orrs	r1, r0
    36a6:	7059      	strb	r1, [r3, #1]
    36a8:	0c11      	lsrs	r1, r2, #16
    36aa:	20ff      	movs	r0, #255	; 0xff
    36ac:	4001      	ands	r1, r0
    36ae:	000c      	movs	r4, r1
    36b0:	7899      	ldrb	r1, [r3, #2]
    36b2:	2000      	movs	r0, #0
    36b4:	4001      	ands	r1, r0
    36b6:	1c08      	adds	r0, r1, #0
    36b8:	1c21      	adds	r1, r4, #0
    36ba:	4301      	orrs	r1, r0
    36bc:	7099      	strb	r1, [r3, #2]
    36be:	0e10      	lsrs	r0, r2, #24
    36c0:	78da      	ldrb	r2, [r3, #3]
    36c2:	2100      	movs	r1, #0
    36c4:	400a      	ands	r2, r1
    36c6:	1c11      	adds	r1, r2, #0
    36c8:	1c02      	adds	r2, r0, #0
    36ca:	430a      	orrs	r2, r1
    36cc:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Clock1 = tdc_getRegister(TDC_REG_CLOCK1);
    36ce:	2011      	movs	r0, #17
    36d0:	4bde      	ldr	r3, [pc, #888]	; (3a4c <tdc_loadAllValues+0x41c>)
    36d2:	4798      	blx	r3
    36d4:	0002      	movs	r2, r0
    36d6:	4bde      	ldr	r3, [pc, #888]	; (3a50 <tdc_loadAllValues+0x420>)
    36d8:	330f      	adds	r3, #15
    36da:	21ff      	movs	r1, #255	; 0xff
    36dc:	4011      	ands	r1, r2
    36de:	000c      	movs	r4, r1
    36e0:	7819      	ldrb	r1, [r3, #0]
    36e2:	2000      	movs	r0, #0
    36e4:	4001      	ands	r1, r0
    36e6:	1c08      	adds	r0, r1, #0
    36e8:	1c21      	adds	r1, r4, #0
    36ea:	4301      	orrs	r1, r0
    36ec:	7019      	strb	r1, [r3, #0]
    36ee:	0a11      	lsrs	r1, r2, #8
    36f0:	20ff      	movs	r0, #255	; 0xff
    36f2:	4001      	ands	r1, r0
    36f4:	000c      	movs	r4, r1
    36f6:	7859      	ldrb	r1, [r3, #1]
    36f8:	2000      	movs	r0, #0
    36fa:	4001      	ands	r1, r0
    36fc:	1c08      	adds	r0, r1, #0
    36fe:	1c21      	adds	r1, r4, #0
    3700:	4301      	orrs	r1, r0
    3702:	7059      	strb	r1, [r3, #1]
    3704:	0c11      	lsrs	r1, r2, #16
    3706:	20ff      	movs	r0, #255	; 0xff
    3708:	4001      	ands	r1, r0
    370a:	000c      	movs	r4, r1
    370c:	7899      	ldrb	r1, [r3, #2]
    370e:	2000      	movs	r0, #0
    3710:	4001      	ands	r1, r0
    3712:	1c08      	adds	r0, r1, #0
    3714:	1c21      	adds	r1, r4, #0
    3716:	4301      	orrs	r1, r0
    3718:	7099      	strb	r1, [r3, #2]
    371a:	0e10      	lsrs	r0, r2, #24
    371c:	78da      	ldrb	r2, [r3, #3]
    371e:	2100      	movs	r1, #0
    3720:	400a      	ands	r2, r1
    3722:	1c11      	adds	r1, r2, #0
    3724:	1c02      	adds	r2, r0, #0
    3726:	430a      	orrs	r2, r1
    3728:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Timer2 = tdc_getRegister(TDC_REG_TIME2);
    372a:	2012      	movs	r0, #18
    372c:	4bc7      	ldr	r3, [pc, #796]	; (3a4c <tdc_loadAllValues+0x41c>)
    372e:	4798      	blx	r3
    3730:	0002      	movs	r2, r0
    3732:	4bc7      	ldr	r3, [pc, #796]	; (3a50 <tdc_loadAllValues+0x420>)
    3734:	3313      	adds	r3, #19
    3736:	21ff      	movs	r1, #255	; 0xff
    3738:	4011      	ands	r1, r2
    373a:	000c      	movs	r4, r1
    373c:	7819      	ldrb	r1, [r3, #0]
    373e:	2000      	movs	r0, #0
    3740:	4001      	ands	r1, r0
    3742:	1c08      	adds	r0, r1, #0
    3744:	1c21      	adds	r1, r4, #0
    3746:	4301      	orrs	r1, r0
    3748:	7019      	strb	r1, [r3, #0]
    374a:	0a11      	lsrs	r1, r2, #8
    374c:	20ff      	movs	r0, #255	; 0xff
    374e:	4001      	ands	r1, r0
    3750:	000c      	movs	r4, r1
    3752:	7859      	ldrb	r1, [r3, #1]
    3754:	2000      	movs	r0, #0
    3756:	4001      	ands	r1, r0
    3758:	1c08      	adds	r0, r1, #0
    375a:	1c21      	adds	r1, r4, #0
    375c:	4301      	orrs	r1, r0
    375e:	7059      	strb	r1, [r3, #1]
    3760:	0c11      	lsrs	r1, r2, #16
    3762:	20ff      	movs	r0, #255	; 0xff
    3764:	4001      	ands	r1, r0
    3766:	000c      	movs	r4, r1
    3768:	7899      	ldrb	r1, [r3, #2]
    376a:	2000      	movs	r0, #0
    376c:	4001      	ands	r1, r0
    376e:	1c08      	adds	r0, r1, #0
    3770:	1c21      	adds	r1, r4, #0
    3772:	4301      	orrs	r1, r0
    3774:	7099      	strb	r1, [r3, #2]
    3776:	0e10      	lsrs	r0, r2, #24
    3778:	78da      	ldrb	r2, [r3, #3]
    377a:	2100      	movs	r1, #0
    377c:	400a      	ands	r2, r1
    377e:	1c11      	adds	r1, r2, #0
    3780:	1c02      	adds	r2, r0, #0
    3782:	430a      	orrs	r2, r1
    3784:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Clock2 = tdc_getRegister(TDC_REG_CLOCK2);
    3786:	2013      	movs	r0, #19
    3788:	4bb0      	ldr	r3, [pc, #704]	; (3a4c <tdc_loadAllValues+0x41c>)
    378a:	4798      	blx	r3
    378c:	0002      	movs	r2, r0
    378e:	4bb0      	ldr	r3, [pc, #704]	; (3a50 <tdc_loadAllValues+0x420>)
    3790:	3317      	adds	r3, #23
    3792:	21ff      	movs	r1, #255	; 0xff
    3794:	4011      	ands	r1, r2
    3796:	000c      	movs	r4, r1
    3798:	7819      	ldrb	r1, [r3, #0]
    379a:	2000      	movs	r0, #0
    379c:	4001      	ands	r1, r0
    379e:	1c08      	adds	r0, r1, #0
    37a0:	1c21      	adds	r1, r4, #0
    37a2:	4301      	orrs	r1, r0
    37a4:	7019      	strb	r1, [r3, #0]
    37a6:	0a11      	lsrs	r1, r2, #8
    37a8:	20ff      	movs	r0, #255	; 0xff
    37aa:	4001      	ands	r1, r0
    37ac:	000c      	movs	r4, r1
    37ae:	7859      	ldrb	r1, [r3, #1]
    37b0:	2000      	movs	r0, #0
    37b2:	4001      	ands	r1, r0
    37b4:	1c08      	adds	r0, r1, #0
    37b6:	1c21      	adds	r1, r4, #0
    37b8:	4301      	orrs	r1, r0
    37ba:	7059      	strb	r1, [r3, #1]
    37bc:	0c11      	lsrs	r1, r2, #16
    37be:	20ff      	movs	r0, #255	; 0xff
    37c0:	4001      	ands	r1, r0
    37c2:	000c      	movs	r4, r1
    37c4:	7899      	ldrb	r1, [r3, #2]
    37c6:	2000      	movs	r0, #0
    37c8:	4001      	ands	r1, r0
    37ca:	1c08      	adds	r0, r1, #0
    37cc:	1c21      	adds	r1, r4, #0
    37ce:	4301      	orrs	r1, r0
    37d0:	7099      	strb	r1, [r3, #2]
    37d2:	0e10      	lsrs	r0, r2, #24
    37d4:	78da      	ldrb	r2, [r3, #3]
    37d6:	2100      	movs	r1, #0
    37d8:	400a      	ands	r2, r1
    37da:	1c11      	adds	r1, r2, #0
    37dc:	1c02      	adds	r2, r0, #0
    37de:	430a      	orrs	r2, r1
    37e0:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Timer3 = tdc_getRegister(TDC_REG_TIME3);
    37e2:	2014      	movs	r0, #20
    37e4:	4b99      	ldr	r3, [pc, #612]	; (3a4c <tdc_loadAllValues+0x41c>)
    37e6:	4798      	blx	r3
    37e8:	0002      	movs	r2, r0
    37ea:	4b99      	ldr	r3, [pc, #612]	; (3a50 <tdc_loadAllValues+0x420>)
    37ec:	331b      	adds	r3, #27
    37ee:	21ff      	movs	r1, #255	; 0xff
    37f0:	4011      	ands	r1, r2
    37f2:	000c      	movs	r4, r1
    37f4:	7819      	ldrb	r1, [r3, #0]
    37f6:	2000      	movs	r0, #0
    37f8:	4001      	ands	r1, r0
    37fa:	1c08      	adds	r0, r1, #0
    37fc:	1c21      	adds	r1, r4, #0
    37fe:	4301      	orrs	r1, r0
    3800:	7019      	strb	r1, [r3, #0]
    3802:	0a11      	lsrs	r1, r2, #8
    3804:	20ff      	movs	r0, #255	; 0xff
    3806:	4001      	ands	r1, r0
    3808:	000c      	movs	r4, r1
    380a:	7859      	ldrb	r1, [r3, #1]
    380c:	2000      	movs	r0, #0
    380e:	4001      	ands	r1, r0
    3810:	1c08      	adds	r0, r1, #0
    3812:	1c21      	adds	r1, r4, #0
    3814:	4301      	orrs	r1, r0
    3816:	7059      	strb	r1, [r3, #1]
    3818:	0c11      	lsrs	r1, r2, #16
    381a:	20ff      	movs	r0, #255	; 0xff
    381c:	4001      	ands	r1, r0
    381e:	000c      	movs	r4, r1
    3820:	7899      	ldrb	r1, [r3, #2]
    3822:	2000      	movs	r0, #0
    3824:	4001      	ands	r1, r0
    3826:	1c08      	adds	r0, r1, #0
    3828:	1c21      	adds	r1, r4, #0
    382a:	4301      	orrs	r1, r0
    382c:	7099      	strb	r1, [r3, #2]
    382e:	0e10      	lsrs	r0, r2, #24
    3830:	78da      	ldrb	r2, [r3, #3]
    3832:	2100      	movs	r1, #0
    3834:	400a      	ands	r2, r1
    3836:	1c11      	adds	r1, r2, #0
    3838:	1c02      	adds	r2, r0, #0
    383a:	430a      	orrs	r2, r1
    383c:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Clock3 = tdc_getRegister(TDC_REG_CLOCK3);
    383e:	2015      	movs	r0, #21
    3840:	4b82      	ldr	r3, [pc, #520]	; (3a4c <tdc_loadAllValues+0x41c>)
    3842:	4798      	blx	r3
    3844:	0002      	movs	r2, r0
    3846:	4b82      	ldr	r3, [pc, #520]	; (3a50 <tdc_loadAllValues+0x420>)
    3848:	331f      	adds	r3, #31
    384a:	21ff      	movs	r1, #255	; 0xff
    384c:	4011      	ands	r1, r2
    384e:	000c      	movs	r4, r1
    3850:	7819      	ldrb	r1, [r3, #0]
    3852:	2000      	movs	r0, #0
    3854:	4001      	ands	r1, r0
    3856:	1c08      	adds	r0, r1, #0
    3858:	1c21      	adds	r1, r4, #0
    385a:	4301      	orrs	r1, r0
    385c:	7019      	strb	r1, [r3, #0]
    385e:	0a11      	lsrs	r1, r2, #8
    3860:	20ff      	movs	r0, #255	; 0xff
    3862:	4001      	ands	r1, r0
    3864:	000c      	movs	r4, r1
    3866:	7859      	ldrb	r1, [r3, #1]
    3868:	2000      	movs	r0, #0
    386a:	4001      	ands	r1, r0
    386c:	1c08      	adds	r0, r1, #0
    386e:	1c21      	adds	r1, r4, #0
    3870:	4301      	orrs	r1, r0
    3872:	7059      	strb	r1, [r3, #1]
    3874:	0c11      	lsrs	r1, r2, #16
    3876:	20ff      	movs	r0, #255	; 0xff
    3878:	4001      	ands	r1, r0
    387a:	000c      	movs	r4, r1
    387c:	7899      	ldrb	r1, [r3, #2]
    387e:	2000      	movs	r0, #0
    3880:	4001      	ands	r1, r0
    3882:	1c08      	adds	r0, r1, #0
    3884:	1c21      	adds	r1, r4, #0
    3886:	4301      	orrs	r1, r0
    3888:	7099      	strb	r1, [r3, #2]
    388a:	0e10      	lsrs	r0, r2, #24
    388c:	78da      	ldrb	r2, [r3, #3]
    388e:	2100      	movs	r1, #0
    3890:	400a      	ands	r2, r1
    3892:	1c11      	adds	r1, r2, #0
    3894:	1c02      	adds	r2, r0, #0
    3896:	430a      	orrs	r2, r1
    3898:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Timer4 = tdc_getRegister(TDC_REG_TIME4);
    389a:	2016      	movs	r0, #22
    389c:	4b6b      	ldr	r3, [pc, #428]	; (3a4c <tdc_loadAllValues+0x41c>)
    389e:	4798      	blx	r3
    38a0:	0002      	movs	r2, r0
    38a2:	4b6b      	ldr	r3, [pc, #428]	; (3a50 <tdc_loadAllValues+0x420>)
    38a4:	3323      	adds	r3, #35	; 0x23
    38a6:	21ff      	movs	r1, #255	; 0xff
    38a8:	4011      	ands	r1, r2
    38aa:	000c      	movs	r4, r1
    38ac:	7819      	ldrb	r1, [r3, #0]
    38ae:	2000      	movs	r0, #0
    38b0:	4001      	ands	r1, r0
    38b2:	1c08      	adds	r0, r1, #0
    38b4:	1c21      	adds	r1, r4, #0
    38b6:	4301      	orrs	r1, r0
    38b8:	7019      	strb	r1, [r3, #0]
    38ba:	0a11      	lsrs	r1, r2, #8
    38bc:	20ff      	movs	r0, #255	; 0xff
    38be:	4001      	ands	r1, r0
    38c0:	000c      	movs	r4, r1
    38c2:	7859      	ldrb	r1, [r3, #1]
    38c4:	2000      	movs	r0, #0
    38c6:	4001      	ands	r1, r0
    38c8:	1c08      	adds	r0, r1, #0
    38ca:	1c21      	adds	r1, r4, #0
    38cc:	4301      	orrs	r1, r0
    38ce:	7059      	strb	r1, [r3, #1]
    38d0:	0c11      	lsrs	r1, r2, #16
    38d2:	20ff      	movs	r0, #255	; 0xff
    38d4:	4001      	ands	r1, r0
    38d6:	000c      	movs	r4, r1
    38d8:	7899      	ldrb	r1, [r3, #2]
    38da:	2000      	movs	r0, #0
    38dc:	4001      	ands	r1, r0
    38de:	1c08      	adds	r0, r1, #0
    38e0:	1c21      	adds	r1, r4, #0
    38e2:	4301      	orrs	r1, r0
    38e4:	7099      	strb	r1, [r3, #2]
    38e6:	0e10      	lsrs	r0, r2, #24
    38e8:	78da      	ldrb	r2, [r3, #3]
    38ea:	2100      	movs	r1, #0
    38ec:	400a      	ands	r2, r1
    38ee:	1c11      	adds	r1, r2, #0
    38f0:	1c02      	adds	r2, r0, #0
    38f2:	430a      	orrs	r2, r1
    38f4:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Clock4 = tdc_getRegister(TDC_REG_CLOCK4);
    38f6:	2017      	movs	r0, #23
    38f8:	4b54      	ldr	r3, [pc, #336]	; (3a4c <tdc_loadAllValues+0x41c>)
    38fa:	4798      	blx	r3
    38fc:	0002      	movs	r2, r0
    38fe:	4b54      	ldr	r3, [pc, #336]	; (3a50 <tdc_loadAllValues+0x420>)
    3900:	3327      	adds	r3, #39	; 0x27
    3902:	21ff      	movs	r1, #255	; 0xff
    3904:	4011      	ands	r1, r2
    3906:	000c      	movs	r4, r1
    3908:	7819      	ldrb	r1, [r3, #0]
    390a:	2000      	movs	r0, #0
    390c:	4001      	ands	r1, r0
    390e:	1c08      	adds	r0, r1, #0
    3910:	1c21      	adds	r1, r4, #0
    3912:	4301      	orrs	r1, r0
    3914:	7019      	strb	r1, [r3, #0]
    3916:	0a11      	lsrs	r1, r2, #8
    3918:	20ff      	movs	r0, #255	; 0xff
    391a:	4001      	ands	r1, r0
    391c:	000c      	movs	r4, r1
    391e:	7859      	ldrb	r1, [r3, #1]
    3920:	2000      	movs	r0, #0
    3922:	4001      	ands	r1, r0
    3924:	1c08      	adds	r0, r1, #0
    3926:	1c21      	adds	r1, r4, #0
    3928:	4301      	orrs	r1, r0
    392a:	7059      	strb	r1, [r3, #1]
    392c:	0c11      	lsrs	r1, r2, #16
    392e:	20ff      	movs	r0, #255	; 0xff
    3930:	4001      	ands	r1, r0
    3932:	000c      	movs	r4, r1
    3934:	7899      	ldrb	r1, [r3, #2]
    3936:	2000      	movs	r0, #0
    3938:	4001      	ands	r1, r0
    393a:	1c08      	adds	r0, r1, #0
    393c:	1c21      	adds	r1, r4, #0
    393e:	4301      	orrs	r1, r0
    3940:	7099      	strb	r1, [r3, #2]
    3942:	0e10      	lsrs	r0, r2, #24
    3944:	78da      	ldrb	r2, [r3, #3]
    3946:	2100      	movs	r1, #0
    3948:	400a      	ands	r2, r1
    394a:	1c11      	adds	r1, r2, #0
    394c:	1c02      	adds	r2, r0, #0
    394e:	430a      	orrs	r2, r1
    3950:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Timer5 = tdc_getRegister(TDC_REG_TIME5);
    3952:	2018      	movs	r0, #24
    3954:	4b3d      	ldr	r3, [pc, #244]	; (3a4c <tdc_loadAllValues+0x41c>)
    3956:	4798      	blx	r3
    3958:	0002      	movs	r2, r0
    395a:	4b3d      	ldr	r3, [pc, #244]	; (3a50 <tdc_loadAllValues+0x420>)
    395c:	332b      	adds	r3, #43	; 0x2b
    395e:	21ff      	movs	r1, #255	; 0xff
    3960:	4011      	ands	r1, r2
    3962:	000c      	movs	r4, r1
    3964:	7819      	ldrb	r1, [r3, #0]
    3966:	2000      	movs	r0, #0
    3968:	4001      	ands	r1, r0
    396a:	1c08      	adds	r0, r1, #0
    396c:	1c21      	adds	r1, r4, #0
    396e:	4301      	orrs	r1, r0
    3970:	7019      	strb	r1, [r3, #0]
    3972:	0a11      	lsrs	r1, r2, #8
    3974:	20ff      	movs	r0, #255	; 0xff
    3976:	4001      	ands	r1, r0
    3978:	000c      	movs	r4, r1
    397a:	7859      	ldrb	r1, [r3, #1]
    397c:	2000      	movs	r0, #0
    397e:	4001      	ands	r1, r0
    3980:	1c08      	adds	r0, r1, #0
    3982:	1c21      	adds	r1, r4, #0
    3984:	4301      	orrs	r1, r0
    3986:	7059      	strb	r1, [r3, #1]
    3988:	0c11      	lsrs	r1, r2, #16
    398a:	20ff      	movs	r0, #255	; 0xff
    398c:	4001      	ands	r1, r0
    398e:	000c      	movs	r4, r1
    3990:	7899      	ldrb	r1, [r3, #2]
    3992:	2000      	movs	r0, #0
    3994:	4001      	ands	r1, r0
    3996:	1c08      	adds	r0, r1, #0
    3998:	1c21      	adds	r1, r4, #0
    399a:	4301      	orrs	r1, r0
    399c:	7099      	strb	r1, [r3, #2]
    399e:	0e10      	lsrs	r0, r2, #24
    39a0:	78da      	ldrb	r2, [r3, #3]
    39a2:	2100      	movs	r1, #0
    39a4:	400a      	ands	r2, r1
    39a6:	1c11      	adds	r1, r2, #0
    39a8:	1c02      	adds	r2, r0, #0
    39aa:	430a      	orrs	r2, r1
    39ac:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Clock5 = tdc_getRegister(TDC_REG_CLOCK5);
    39ae:	2019      	movs	r0, #25
    39b0:	4b26      	ldr	r3, [pc, #152]	; (3a4c <tdc_loadAllValues+0x41c>)
    39b2:	4798      	blx	r3
    39b4:	0002      	movs	r2, r0
    39b6:	4b26      	ldr	r3, [pc, #152]	; (3a50 <tdc_loadAllValues+0x420>)
    39b8:	332f      	adds	r3, #47	; 0x2f
    39ba:	21ff      	movs	r1, #255	; 0xff
    39bc:	4011      	ands	r1, r2
    39be:	000c      	movs	r4, r1
    39c0:	7819      	ldrb	r1, [r3, #0]
    39c2:	2000      	movs	r0, #0
    39c4:	4001      	ands	r1, r0
    39c6:	1c08      	adds	r0, r1, #0
    39c8:	1c21      	adds	r1, r4, #0
    39ca:	4301      	orrs	r1, r0
    39cc:	7019      	strb	r1, [r3, #0]
    39ce:	0a11      	lsrs	r1, r2, #8
    39d0:	20ff      	movs	r0, #255	; 0xff
    39d2:	4001      	ands	r1, r0
    39d4:	000c      	movs	r4, r1
    39d6:	7859      	ldrb	r1, [r3, #1]
    39d8:	2000      	movs	r0, #0
    39da:	4001      	ands	r1, r0
    39dc:	1c08      	adds	r0, r1, #0
    39de:	1c21      	adds	r1, r4, #0
    39e0:	4301      	orrs	r1, r0
    39e2:	7059      	strb	r1, [r3, #1]
    39e4:	0c11      	lsrs	r1, r2, #16
    39e6:	20ff      	movs	r0, #255	; 0xff
    39e8:	4001      	ands	r1, r0
    39ea:	000c      	movs	r4, r1
    39ec:	7899      	ldrb	r1, [r3, #2]
    39ee:	2000      	movs	r0, #0
    39f0:	4001      	ands	r1, r0
    39f2:	1c08      	adds	r0, r1, #0
    39f4:	1c21      	adds	r1, r4, #0
    39f6:	4301      	orrs	r1, r0
    39f8:	7099      	strb	r1, [r3, #2]
    39fa:	0e10      	lsrs	r0, r2, #24
    39fc:	78da      	ldrb	r2, [r3, #3]
    39fe:	2100      	movs	r1, #0
    3a00:	400a      	ands	r2, r1
    3a02:	1c11      	adds	r1, r2, #0
    3a04:	1c02      	adds	r2, r0, #0
    3a06:	430a      	orrs	r2, r1
    3a08:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Timer6 = tdc_getRegister(TDC_REG_TIME6);
    3a0a:	201a      	movs	r0, #26
    3a0c:	4b0f      	ldr	r3, [pc, #60]	; (3a4c <tdc_loadAllValues+0x41c>)
    3a0e:	4798      	blx	r3
    3a10:	0002      	movs	r2, r0
    3a12:	4b0f      	ldr	r3, [pc, #60]	; (3a50 <tdc_loadAllValues+0x420>)
    3a14:	3333      	adds	r3, #51	; 0x33
    3a16:	21ff      	movs	r1, #255	; 0xff
    3a18:	4011      	ands	r1, r2
    3a1a:	000c      	movs	r4, r1
    3a1c:	7819      	ldrb	r1, [r3, #0]
    3a1e:	2000      	movs	r0, #0
    3a20:	4001      	ands	r1, r0
    3a22:	1c08      	adds	r0, r1, #0
    3a24:	1c21      	adds	r1, r4, #0
    3a26:	4301      	orrs	r1, r0
    3a28:	7019      	strb	r1, [r3, #0]
    3a2a:	0a11      	lsrs	r1, r2, #8
    3a2c:	20ff      	movs	r0, #255	; 0xff
    3a2e:	4001      	ands	r1, r0
    3a30:	000c      	movs	r4, r1
    3a32:	7859      	ldrb	r1, [r3, #1]
    3a34:	2000      	movs	r0, #0
    3a36:	4001      	ands	r1, r0
    3a38:	1c08      	adds	r0, r1, #0
    3a3a:	1c21      	adds	r1, r4, #0
    3a3c:	4301      	orrs	r1, r0
    3a3e:	7059      	strb	r1, [r3, #1]
    3a40:	0c11      	lsrs	r1, r2, #16
    3a42:	20ff      	movs	r0, #255	; 0xff
    3a44:	4001      	ands	r1, r0
    3a46:	000c      	movs	r4, r1
    3a48:	7899      	ldrb	r1, [r3, #2]
    3a4a:	e003      	b.n	3a54 <tdc_loadAllValues+0x424>
    3a4c:	00003b85 	.word	0x00003b85
    3a50:	200008b0 	.word	0x200008b0
    3a54:	2000      	movs	r0, #0
    3a56:	4001      	ands	r1, r0
    3a58:	1c08      	adds	r0, r1, #0
    3a5a:	1c21      	adds	r1, r4, #0
    3a5c:	4301      	orrs	r1, r0
    3a5e:	7099      	strb	r1, [r3, #2]
    3a60:	0e10      	lsrs	r0, r2, #24
    3a62:	78da      	ldrb	r2, [r3, #3]
    3a64:	2100      	movs	r1, #0
    3a66:	400a      	ands	r2, r1
    3a68:	1c11      	adds	r1, r2, #0
    3a6a:	1c02      	adds	r2, r0, #0
    3a6c:	430a      	orrs	r2, r1
    3a6e:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Calb1 = tdc_getRegister(TDC_REG_CALIBRATION1);
    3a70:	201b      	movs	r0, #27
    3a72:	4b2f      	ldr	r3, [pc, #188]	; (3b30 <tdc_loadAllValues+0x500>)
    3a74:	4798      	blx	r3
    3a76:	0002      	movs	r2, r0
    3a78:	4b2e      	ldr	r3, [pc, #184]	; (3b34 <tdc_loadAllValues+0x504>)
    3a7a:	3337      	adds	r3, #55	; 0x37
    3a7c:	21ff      	movs	r1, #255	; 0xff
    3a7e:	4011      	ands	r1, r2
    3a80:	000c      	movs	r4, r1
    3a82:	7819      	ldrb	r1, [r3, #0]
    3a84:	2000      	movs	r0, #0
    3a86:	4001      	ands	r1, r0
    3a88:	1c08      	adds	r0, r1, #0
    3a8a:	1c21      	adds	r1, r4, #0
    3a8c:	4301      	orrs	r1, r0
    3a8e:	7019      	strb	r1, [r3, #0]
    3a90:	0a11      	lsrs	r1, r2, #8
    3a92:	20ff      	movs	r0, #255	; 0xff
    3a94:	4001      	ands	r1, r0
    3a96:	000c      	movs	r4, r1
    3a98:	7859      	ldrb	r1, [r3, #1]
    3a9a:	2000      	movs	r0, #0
    3a9c:	4001      	ands	r1, r0
    3a9e:	1c08      	adds	r0, r1, #0
    3aa0:	1c21      	adds	r1, r4, #0
    3aa2:	4301      	orrs	r1, r0
    3aa4:	7059      	strb	r1, [r3, #1]
    3aa6:	0c11      	lsrs	r1, r2, #16
    3aa8:	20ff      	movs	r0, #255	; 0xff
    3aaa:	4001      	ands	r1, r0
    3aac:	000c      	movs	r4, r1
    3aae:	7899      	ldrb	r1, [r3, #2]
    3ab0:	2000      	movs	r0, #0
    3ab2:	4001      	ands	r1, r0
    3ab4:	1c08      	adds	r0, r1, #0
    3ab6:	1c21      	adds	r1, r4, #0
    3ab8:	4301      	orrs	r1, r0
    3aba:	7099      	strb	r1, [r3, #2]
    3abc:	0e10      	lsrs	r0, r2, #24
    3abe:	78da      	ldrb	r2, [r3, #3]
    3ac0:	2100      	movs	r1, #0
    3ac2:	400a      	ands	r2, r1
    3ac4:	1c11      	adds	r1, r2, #0
    3ac6:	1c02      	adds	r2, r0, #0
    3ac8:	430a      	orrs	r2, r1
    3aca:	70da      	strb	r2, [r3, #3]
	_tdc.TimerRegs.Calb2 = tdc_getRegister(TDC_REG_CALIBRATION2);
    3acc:	201c      	movs	r0, #28
    3ace:	4b18      	ldr	r3, [pc, #96]	; (3b30 <tdc_loadAllValues+0x500>)
    3ad0:	4798      	blx	r3
    3ad2:	0002      	movs	r2, r0
    3ad4:	4b17      	ldr	r3, [pc, #92]	; (3b34 <tdc_loadAllValues+0x504>)
    3ad6:	333b      	adds	r3, #59	; 0x3b
    3ad8:	21ff      	movs	r1, #255	; 0xff
    3ada:	4011      	ands	r1, r2
    3adc:	000c      	movs	r4, r1
    3ade:	7819      	ldrb	r1, [r3, #0]
    3ae0:	2000      	movs	r0, #0
    3ae2:	4001      	ands	r1, r0
    3ae4:	1c08      	adds	r0, r1, #0
    3ae6:	1c21      	adds	r1, r4, #0
    3ae8:	4301      	orrs	r1, r0
    3aea:	7019      	strb	r1, [r3, #0]
    3aec:	0a11      	lsrs	r1, r2, #8
    3aee:	20ff      	movs	r0, #255	; 0xff
    3af0:	4001      	ands	r1, r0
    3af2:	000c      	movs	r4, r1
    3af4:	7859      	ldrb	r1, [r3, #1]
    3af6:	2000      	movs	r0, #0
    3af8:	4001      	ands	r1, r0
    3afa:	1c08      	adds	r0, r1, #0
    3afc:	1c21      	adds	r1, r4, #0
    3afe:	4301      	orrs	r1, r0
    3b00:	7059      	strb	r1, [r3, #1]
    3b02:	0c11      	lsrs	r1, r2, #16
    3b04:	20ff      	movs	r0, #255	; 0xff
    3b06:	4001      	ands	r1, r0
    3b08:	000c      	movs	r4, r1
    3b0a:	7899      	ldrb	r1, [r3, #2]
    3b0c:	2000      	movs	r0, #0
    3b0e:	4001      	ands	r1, r0
    3b10:	1c08      	adds	r0, r1, #0
    3b12:	1c21      	adds	r1, r4, #0
    3b14:	4301      	orrs	r1, r0
    3b16:	7099      	strb	r1, [r3, #2]
    3b18:	0e10      	lsrs	r0, r2, #24
    3b1a:	78da      	ldrb	r2, [r3, #3]
    3b1c:	2100      	movs	r1, #0
    3b1e:	400a      	ands	r2, r1
    3b20:	1c11      	adds	r1, r2, #0
    3b22:	1c02      	adds	r2, r0, #0
    3b24:	430a      	orrs	r2, r1
    3b26:	70da      	strb	r2, [r3, #3]
}
    3b28:	46c0      	nop			; (mov r8, r8)
    3b2a:	46bd      	mov	sp, r7
    3b2c:	b003      	add	sp, #12
    3b2e:	bd90      	pop	{r4, r7, pc}
    3b30:	00003b85 	.word	0x00003b85
    3b34:	200008b0 	.word	0x200008b0

00003b38 <tdc_writeAllValues>:

static void tdc_writeAllValues(void)
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	b082      	sub	sp, #8
    3b3c:	af00      	add	r7, sp, #0
	//Writes all registers (Not including timer and clock registers)
	uint8_t *tdcReg = &_tdc.Config1;
    3b3e:	4b0f      	ldr	r3, [pc, #60]	; (3b7c <tdc_writeAllValues+0x44>)
    3b40:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < TDC_TOTAL_SMALL_REGISTERS; i++)
    3b42:	1dfb      	adds	r3, r7, #7
    3b44:	2200      	movs	r2, #0
    3b46:	701a      	strb	r2, [r3, #0]
    3b48:	e00f      	b.n	3b6a <tdc_writeAllValues+0x32>
		tdc_setRegister(i, tdcReg[i]);
    3b4a:	1dfb      	adds	r3, r7, #7
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	683a      	ldr	r2, [r7, #0]
    3b50:	18d3      	adds	r3, r2, r3
    3b52:	781a      	ldrb	r2, [r3, #0]
    3b54:	1dfb      	adds	r3, r7, #7
    3b56:	781b      	ldrb	r3, [r3, #0]
    3b58:	0011      	movs	r1, r2
    3b5a:	0018      	movs	r0, r3
    3b5c:	4b08      	ldr	r3, [pc, #32]	; (3b80 <tdc_writeAllValues+0x48>)
    3b5e:	4798      	blx	r3
	for(uint8_t i = 0; i < TDC_TOTAL_SMALL_REGISTERS; i++)
    3b60:	1dfb      	adds	r3, r7, #7
    3b62:	781a      	ldrb	r2, [r3, #0]
    3b64:	1dfb      	adds	r3, r7, #7
    3b66:	3201      	adds	r2, #1
    3b68:	701a      	strb	r2, [r3, #0]
    3b6a:	1dfb      	adds	r3, r7, #7
    3b6c:	781b      	ldrb	r3, [r3, #0]
    3b6e:	2b09      	cmp	r3, #9
    3b70:	d9eb      	bls.n	3b4a <tdc_writeAllValues+0x12>
}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	46bd      	mov	sp, r7
    3b76:	b002      	add	sp, #8
    3b78:	bd80      	pop	{r7, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	200008b1 	.word	0x200008b1
    3b80:	00003c5d 	.word	0x00003c5d

00003b84 <tdc_getRegister>:


static uint32_t tdc_getRegister(uint8_t reg)
{
    3b84:	b580      	push	{r7, lr}
    3b86:	b082      	sub	sp, #8
    3b88:	af00      	add	r7, sp, #0
    3b8a:	0002      	movs	r2, r0
    3b8c:	1dfb      	adds	r3, r7, #7
    3b8e:	701a      	strb	r2, [r3, #0]
	reg = reg & 0b00111111;
    3b90:	1dfb      	adds	r3, r7, #7
    3b92:	1dfa      	adds	r2, r7, #7
    3b94:	7812      	ldrb	r2, [r2, #0]
    3b96:	213f      	movs	r1, #63	; 0x3f
    3b98:	400a      	ands	r2, r1
    3b9a:	701a      	strb	r2, [r3, #0]

	SPI_TxSendChar(_spiLine, reg, TRUE);
    3b9c:	4b29      	ldr	r3, [pc, #164]	; (3c44 <tdc_getRegister+0xc0>)
    3b9e:	6818      	ldr	r0, [r3, #0]
    3ba0:	1dfb      	adds	r3, r7, #7
    3ba2:	781b      	ldrb	r3, [r3, #0]
    3ba4:	2201      	movs	r2, #1
    3ba6:	0019      	movs	r1, r3
    3ba8:	4b27      	ldr	r3, [pc, #156]	; (3c48 <tdc_getRegister+0xc4>)
    3baa:	4798      	blx	r3
	SPI_TxSendChar(_spiLine, 0x00, FALSE);
    3bac:	4b25      	ldr	r3, [pc, #148]	; (3c44 <tdc_getRegister+0xc0>)
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	2200      	movs	r2, #0
    3bb2:	2100      	movs	r1, #0
    3bb4:	0018      	movs	r0, r3
    3bb6:	4b24      	ldr	r3, [pc, #144]	; (3c48 <tdc_getRegister+0xc4>)
    3bb8:	4798      	blx	r3

	if(reg >= TDC_LARGE_REGISTER_START_ADDRESS)
    3bba:	1dfb      	adds	r3, r7, #7
    3bbc:	781b      	ldrb	r3, [r3, #0]
    3bbe:	2b0f      	cmp	r3, #15
    3bc0:	d90d      	bls.n	3bde <tdc_getRegister+0x5a>
	{
		SPI_TxSendChar(_spiLine, 0x00, FALSE);
    3bc2:	4b20      	ldr	r3, [pc, #128]	; (3c44 <tdc_getRegister+0xc0>)
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	2200      	movs	r2, #0
    3bc8:	2100      	movs	r1, #0
    3bca:	0018      	movs	r0, r3
    3bcc:	4b1e      	ldr	r3, [pc, #120]	; (3c48 <tdc_getRegister+0xc4>)
    3bce:	4798      	blx	r3
		SPI_TxSendChar(_spiLine, 0x00, FALSE);
    3bd0:	4b1c      	ldr	r3, [pc, #112]	; (3c44 <tdc_getRegister+0xc0>)
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	2200      	movs	r2, #0
    3bd6:	2100      	movs	r1, #0
    3bd8:	0018      	movs	r0, r3
    3bda:	4b1b      	ldr	r3, [pc, #108]	; (3c48 <tdc_getRegister+0xc4>)
    3bdc:	4798      	blx	r3
	}

	_txInProgress = TRUE;
    3bde:	4b1b      	ldr	r3, [pc, #108]	; (3c4c <tdc_getRegister+0xc8>)
    3be0:	2201      	movs	r2, #1
    3be2:	701a      	strb	r2, [r3, #0]

	//Set Slave Select to 0
	tdc_setSlaveSelect(0);
    3be4:	2000      	movs	r0, #0
    3be6:	4b1a      	ldr	r3, [pc, #104]	; (3c50 <tdc_getRegister+0xcc>)
    3be8:	4798      	blx	r3

	SPI_TxMasterTransfer(_spiLine);
    3bea:	4b16      	ldr	r3, [pc, #88]	; (3c44 <tdc_getRegister+0xc0>)
    3bec:	681b      	ldr	r3, [r3, #0]
    3bee:	0018      	movs	r0, r3
    3bf0:	4b18      	ldr	r3, [pc, #96]	; (3c54 <tdc_getRegister+0xd0>)
    3bf2:	4798      	blx	r3

	while(_txInProgress)
    3bf4:	e001      	b.n	3bfa <tdc_getRegister+0x76>
		tdc_taskHandler();
    3bf6:	4b18      	ldr	r3, [pc, #96]	; (3c58 <tdc_getRegister+0xd4>)
    3bf8:	4798      	blx	r3
	while(_txInProgress)
    3bfa:	4b14      	ldr	r3, [pc, #80]	; (3c4c <tdc_getRegister+0xc8>)
    3bfc:	781b      	ldrb	r3, [r3, #0]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d1f9      	bne.n	3bf6 <tdc_getRegister+0x72>

	if(reg >= TDC_LARGE_REGISTER_START_ADDRESS)
    3c02:	1dfb      	adds	r3, r7, #7
    3c04:	781b      	ldrb	r3, [r3, #0]
    3c06:	2b0f      	cmp	r3, #15
    3c08:	d913      	bls.n	3c32 <tdc_getRegister+0xae>
		return (uint32_t)( (_spiLine->rxBuffer[1] << 16) | (_spiLine->rxBuffer[2] << 8) | _spiLine->rxBuffer[3] );
    3c0a:	4b0e      	ldr	r3, [pc, #56]	; (3c44 <tdc_getRegister+0xc0>)
    3c0c:	681a      	ldr	r2, [r3, #0]
    3c0e:	230a      	movs	r3, #10
    3c10:	33ff      	adds	r3, #255	; 0xff
    3c12:	5cd3      	ldrb	r3, [r2, r3]
    3c14:	041a      	lsls	r2, r3, #16
    3c16:	4b0b      	ldr	r3, [pc, #44]	; (3c44 <tdc_getRegister+0xc0>)
    3c18:	6819      	ldr	r1, [r3, #0]
    3c1a:	2385      	movs	r3, #133	; 0x85
    3c1c:	005b      	lsls	r3, r3, #1
    3c1e:	5ccb      	ldrb	r3, [r1, r3]
    3c20:	021b      	lsls	r3, r3, #8
    3c22:	431a      	orrs	r2, r3
    3c24:	4b07      	ldr	r3, [pc, #28]	; (3c44 <tdc_getRegister+0xc0>)
    3c26:	6819      	ldr	r1, [r3, #0]
    3c28:	230c      	movs	r3, #12
    3c2a:	33ff      	adds	r3, #255	; 0xff
    3c2c:	5ccb      	ldrb	r3, [r1, r3]
    3c2e:	4313      	orrs	r3, r2
    3c30:	e004      	b.n	3c3c <tdc_getRegister+0xb8>
	else
		return _spiLine->rxBuffer[1];
    3c32:	4b04      	ldr	r3, [pc, #16]	; (3c44 <tdc_getRegister+0xc0>)
    3c34:	681a      	ldr	r2, [r3, #0]
    3c36:	230a      	movs	r3, #10
    3c38:	33ff      	adds	r3, #255	; 0xff
    3c3a:	5cd3      	ldrb	r3, [r2, r3]
}
    3c3c:	0018      	movs	r0, r3
    3c3e:	46bd      	mov	sp, r7
    3c40:	b002      	add	sp, #8
    3c42:	bd80      	pop	{r7, pc}
    3c44:	200008a8 	.word	0x200008a8
    3c48:	00001ac5 	.word	0x00001ac5
    3c4c:	200008ac 	.word	0x200008ac
    3c50:	00003d0d 	.word	0x00003d0d
    3c54:	00001b21 	.word	0x00001b21
    3c58:	00003d85 	.word	0x00003d85

00003c5c <tdc_setRegister>:

static void tdc_setRegister(uint8_t reg, uint8_t val)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b082      	sub	sp, #8
    3c60:	af00      	add	r7, sp, #0
    3c62:	0002      	movs	r2, r0
    3c64:	1dfb      	adds	r3, r7, #7
    3c66:	701a      	strb	r2, [r3, #0]
    3c68:	1dbb      	adds	r3, r7, #6
    3c6a:	1c0a      	adds	r2, r1, #0
    3c6c:	701a      	strb	r2, [r3, #0]
	reg = reg & 0b00111111;
    3c6e:	1dfb      	adds	r3, r7, #7
    3c70:	1dfa      	adds	r2, r7, #7
    3c72:	7812      	ldrb	r2, [r2, #0]
    3c74:	213f      	movs	r1, #63	; 0x3f
    3c76:	400a      	ands	r2, r1
    3c78:	701a      	strb	r2, [r3, #0]
	reg |= 0b01000000;
    3c7a:	1dfb      	adds	r3, r7, #7
    3c7c:	1dfa      	adds	r2, r7, #7
    3c7e:	7812      	ldrb	r2, [r2, #0]
    3c80:	2140      	movs	r1, #64	; 0x40
    3c82:	430a      	orrs	r2, r1
    3c84:	701a      	strb	r2, [r3, #0]

	SPI_TxSendChar(_spiLine, reg, TRUE);
    3c86:	4b13      	ldr	r3, [pc, #76]	; (3cd4 <tdc_setRegister+0x78>)
    3c88:	6818      	ldr	r0, [r3, #0]
    3c8a:	1dfb      	adds	r3, r7, #7
    3c8c:	781b      	ldrb	r3, [r3, #0]
    3c8e:	2201      	movs	r2, #1
    3c90:	0019      	movs	r1, r3
    3c92:	4b11      	ldr	r3, [pc, #68]	; (3cd8 <tdc_setRegister+0x7c>)
    3c94:	4798      	blx	r3
	SPI_TxSendChar(_spiLine, val, FALSE);
    3c96:	4b0f      	ldr	r3, [pc, #60]	; (3cd4 <tdc_setRegister+0x78>)
    3c98:	6818      	ldr	r0, [r3, #0]
    3c9a:	1dbb      	adds	r3, r7, #6
    3c9c:	781b      	ldrb	r3, [r3, #0]
    3c9e:	2200      	movs	r2, #0
    3ca0:	0019      	movs	r1, r3
    3ca2:	4b0d      	ldr	r3, [pc, #52]	; (3cd8 <tdc_setRegister+0x7c>)
    3ca4:	4798      	blx	r3

	_txInProgress = TRUE;
    3ca6:	4b0d      	ldr	r3, [pc, #52]	; (3cdc <tdc_setRegister+0x80>)
    3ca8:	2201      	movs	r2, #1
    3caa:	701a      	strb	r2, [r3, #0]

	//Set Slave Select to 0
	tdc_setSlaveSelect(0);
    3cac:	2000      	movs	r0, #0
    3cae:	4b0c      	ldr	r3, [pc, #48]	; (3ce0 <tdc_setRegister+0x84>)
    3cb0:	4798      	blx	r3

	SPI_TxMasterTransfer(_spiLine);
    3cb2:	4b08      	ldr	r3, [pc, #32]	; (3cd4 <tdc_setRegister+0x78>)
    3cb4:	681b      	ldr	r3, [r3, #0]
    3cb6:	0018      	movs	r0, r3
    3cb8:	4b0a      	ldr	r3, [pc, #40]	; (3ce4 <tdc_setRegister+0x88>)
    3cba:	4798      	blx	r3

	while(_txInProgress)
    3cbc:	e001      	b.n	3cc2 <tdc_setRegister+0x66>
		tdc_taskHandler();
    3cbe:	4b0a      	ldr	r3, [pc, #40]	; (3ce8 <tdc_setRegister+0x8c>)
    3cc0:	4798      	blx	r3
	while(_txInProgress)
    3cc2:	4b06      	ldr	r3, [pc, #24]	; (3cdc <tdc_setRegister+0x80>)
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d1f9      	bne.n	3cbe <tdc_setRegister+0x62>
}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	46bd      	mov	sp, r7
    3cce:	b002      	add	sp, #8
    3cd0:	bd80      	pop	{r7, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	200008a8 	.word	0x200008a8
    3cd8:	00001ac5 	.word	0x00001ac5
    3cdc:	200008ac 	.word	0x200008ac
    3ce0:	00003d0d 	.word	0x00003d0d
    3ce4:	00001b21 	.word	0x00001b21
    3ce8:	00003d85 	.word	0x00003d85

00003cec <tdc_clearInterrupts>:

static void tdc_clearInterrupts(void)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	af00      	add	r7, sp, #0
	tdc_setRegister(TDC_REG_INT_STATUS, 0x1F);
    3cf0:	211f      	movs	r1, #31
    3cf2:	2002      	movs	r0, #2
    3cf4:	4b03      	ldr	r3, [pc, #12]	; (3d04 <tdc_clearInterrupts+0x18>)
    3cf6:	4798      	blx	r3
	INPUT_TaskHandler();
    3cf8:	4b03      	ldr	r3, [pc, #12]	; (3d08 <tdc_clearInterrupts+0x1c>)
    3cfa:	4798      	blx	r3
}
    3cfc:	46c0      	nop			; (mov r8, r8)
    3cfe:	46bd      	mov	sp, r7
    3d00:	bd80      	pop	{r7, pc}
    3d02:	46c0      	nop			; (mov r8, r8)
    3d04:	00003c5d 	.word	0x00003c5d
    3d08:	00000aa1 	.word	0x00000aa1

00003d0c <tdc_setSlaveSelect>:

static void tdc_setSlaveSelect(uint8_t val)
{
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b082      	sub	sp, #8
    3d10:	af00      	add	r7, sp, #0
    3d12:	0002      	movs	r2, r0
    3d14:	1dfb      	adds	r3, r7, #7
    3d16:	701a      	strb	r2, [r3, #0]
	MCU_SetPinState(SPI_TDC_CS_PORT, SPI_TDC_CS_PIN, val);
    3d18:	1dfb      	adds	r3, r7, #7
    3d1a:	781b      	ldrb	r3, [r3, #0]
    3d1c:	001a      	movs	r2, r3
    3d1e:	2104      	movs	r1, #4
    3d20:	2001      	movs	r0, #1
    3d22:	4b03      	ldr	r3, [pc, #12]	; (3d30 <tdc_setSlaveSelect+0x24>)
    3d24:	4798      	blx	r3
}
    3d26:	46c0      	nop			; (mov r8, r8)
    3d28:	46bd      	mov	sp, r7
    3d2a:	b002      	add	sp, #8
    3d2c:	bd80      	pop	{r7, pc}
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	000003a1 	.word	0x000003a1

00003d34 <tdc_interruptHandler>:

static void tdc_interruptHandler(Input_t *input)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b082      	sub	sp, #8
    3d38:	af00      	add	r7, sp, #0
    3d3a:	6078      	str	r0, [r7, #4]
	//DEBUG_WriteNumber("Interrupt Pin State is: ", input->State);

	if(!input->State)
    3d3c:	687b      	ldr	r3, [r7, #4]
    3d3e:	785b      	ldrb	r3, [r3, #1]
    3d40:	2b00      	cmp	r3, #0
    3d42:	d113      	bne.n	3d6c <tdc_interruptHandler+0x38>
	{
		tdc_loadAllValues();
    3d44:	4b0b      	ldr	r3, [pc, #44]	; (3d74 <tdc_interruptHandler+0x40>)
    3d46:	4798      	blx	r3
		tdc_clearInterrupts();
    3d48:	4b0b      	ldr	r3, [pc, #44]	; (3d78 <tdc_interruptHandler+0x44>)
    3d4a:	4798      	blx	r3
		
		if(_tdc.IntStatus != 0x19)
    3d4c:	4b0b      	ldr	r3, [pc, #44]	; (3d7c <tdc_interruptHandler+0x48>)
    3d4e:	78db      	ldrb	r3, [r3, #3]
    3d50:	2b19      	cmp	r3, #25
    3d52:	d003      	beq.n	3d5c <tdc_interruptHandler+0x28>
			_tdc.Status = TDC_ERROR;
    3d54:	4b09      	ldr	r3, [pc, #36]	; (3d7c <tdc_interruptHandler+0x48>)
    3d56:	2202      	movs	r2, #2
    3d58:	701a      	strb	r2, [r3, #0]
    3d5a:	e002      	b.n	3d62 <tdc_interruptHandler+0x2e>
		else
			_tdc.Status = TDC_SUCCESS;
    3d5c:	4b07      	ldr	r3, [pc, #28]	; (3d7c <tdc_interruptHandler+0x48>)
    3d5e:	2203      	movs	r2, #3
    3d60:	701a      	strb	r2, [r3, #0]

		FLOW_TransactionCompleteCallback(_tdc.Status);
    3d62:	4b06      	ldr	r3, [pc, #24]	; (3d7c <tdc_interruptHandler+0x48>)
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	0018      	movs	r0, r3
    3d68:	4b05      	ldr	r3, [pc, #20]	; (3d80 <tdc_interruptHandler+0x4c>)
    3d6a:	4798      	blx	r3
	}
}
    3d6c:	46c0      	nop			; (mov r8, r8)
    3d6e:	46bd      	mov	sp, r7
    3d70:	b002      	add	sp, #8
    3d72:	bd80      	pop	{r7, pc}
    3d74:	00003631 	.word	0x00003631
    3d78:	00003ced 	.word	0x00003ced
    3d7c:	200008b0 	.word	0x200008b0
    3d80:	0000283d 	.word	0x0000283d

00003d84 <tdc_taskHandler>:

//=========================================================================
// TaskHandler
//=========================================================================
static void tdc_taskHandler(void)
{
    3d84:	b580      	push	{r7, lr}
    3d86:	af00      	add	r7, sp, #0
	if(_spiLine->txSize && _spiLine->txIndex >= _spiLine->txSize && _spiLine->rxIndex >= _spiLine->txSize)
    3d88:	4b14      	ldr	r3, [pc, #80]	; (3ddc <tdc_taskHandler+0x58>)
    3d8a:	681b      	ldr	r3, [r3, #0]
    3d8c:	4a14      	ldr	r2, [pc, #80]	; (3de0 <tdc_taskHandler+0x5c>)
    3d8e:	5a9b      	ldrh	r3, [r3, r2]
    3d90:	2b00      	cmp	r3, #0
    3d92:	d01f      	beq.n	3dd4 <tdc_taskHandler+0x50>
    3d94:	4b11      	ldr	r3, [pc, #68]	; (3ddc <tdc_taskHandler+0x58>)
    3d96:	681a      	ldr	r2, [r3, #0]
    3d98:	2381      	movs	r3, #129	; 0x81
    3d9a:	009b      	lsls	r3, r3, #2
    3d9c:	5ad2      	ldrh	r2, [r2, r3]
    3d9e:	4b0f      	ldr	r3, [pc, #60]	; (3ddc <tdc_taskHandler+0x58>)
    3da0:	681b      	ldr	r3, [r3, #0]
    3da2:	490f      	ldr	r1, [pc, #60]	; (3de0 <tdc_taskHandler+0x5c>)
    3da4:	5a5b      	ldrh	r3, [r3, r1]
    3da6:	429a      	cmp	r2, r3
    3da8:	d314      	bcc.n	3dd4 <tdc_taskHandler+0x50>
    3daa:	4b0c      	ldr	r3, [pc, #48]	; (3ddc <tdc_taskHandler+0x58>)
    3dac:	681b      	ldr	r3, [r3, #0]
    3dae:	4a0d      	ldr	r2, [pc, #52]	; (3de4 <tdc_taskHandler+0x60>)
    3db0:	5a9a      	ldrh	r2, [r3, r2]
    3db2:	4b0a      	ldr	r3, [pc, #40]	; (3ddc <tdc_taskHandler+0x58>)
    3db4:	681b      	ldr	r3, [r3, #0]
    3db6:	490a      	ldr	r1, [pc, #40]	; (3de0 <tdc_taskHandler+0x5c>)
    3db8:	5a5b      	ldrh	r3, [r3, r1]
    3dba:	429a      	cmp	r2, r3
    3dbc:	d30a      	bcc.n	3dd4 <tdc_taskHandler+0x50>
	{
		tdc_setSlaveSelect(1);
    3dbe:	2001      	movs	r0, #1
    3dc0:	4b09      	ldr	r3, [pc, #36]	; (3de8 <tdc_taskHandler+0x64>)
    3dc2:	4798      	blx	r3
		_spiLine->txSize = 0;
    3dc4:	4b05      	ldr	r3, [pc, #20]	; (3ddc <tdc_taskHandler+0x58>)
    3dc6:	681b      	ldr	r3, [r3, #0]
    3dc8:	4a05      	ldr	r2, [pc, #20]	; (3de0 <tdc_taskHandler+0x5c>)
    3dca:	2100      	movs	r1, #0
    3dcc:	5299      	strh	r1, [r3, r2]
		_txInProgress = FALSE;
    3dce:	4b07      	ldr	r3, [pc, #28]	; (3dec <tdc_taskHandler+0x68>)
    3dd0:	2200      	movs	r2, #0
    3dd2:	701a      	strb	r2, [r3, #0]
	}
}
    3dd4:	46c0      	nop			; (mov r8, r8)
    3dd6:	46bd      	mov	sp, r7
    3dd8:	bd80      	pop	{r7, pc}
    3dda:	46c0      	nop			; (mov r8, r8)
    3ddc:	200008a8 	.word	0x200008a8
    3de0:	00000202 	.word	0x00000202
    3de4:	00000206 	.word	0x00000206
    3de8:	00003d0d 	.word	0x00003d0d
    3dec:	200008ac 	.word	0x200008ac

00003df0 <main>:

//*************************************************************************
// Main
//*************************************************************************
int main(void)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	af00      	add	r7, sp, #0
	MCU_Init();
    3df4:	4b07      	ldr	r3, [pc, #28]	; (3e14 <main+0x24>)
    3df6:	4798      	blx	r3
	MCU_Set32MhzClk();
    3df8:	4b07      	ldr	r3, [pc, #28]	; (3e18 <main+0x28>)
    3dfa:	4798      	blx	r3
	DEBUG_Init(&_debugLine);
    3dfc:	4b07      	ldr	r3, [pc, #28]	; (3e1c <main+0x2c>)
    3dfe:	0018      	movs	r0, r3
    3e00:	4b07      	ldr	r3, [pc, #28]	; (3e20 <main+0x30>)
    3e02:	4798      	blx	r3
	
	FLOW_Init();
    3e04:	4b07      	ldr	r3, [pc, #28]	; (3e24 <main+0x34>)
    3e06:	4798      	blx	r3
	
	//The Loop
	while(1)
	{
		INPUT_TaskHandler();
    3e08:	4b07      	ldr	r3, [pc, #28]	; (3e28 <main+0x38>)
    3e0a:	4798      	blx	r3
		TIMER_TaskHandler();
    3e0c:	4b07      	ldr	r3, [pc, #28]	; (3e2c <main+0x3c>)
    3e0e:	4798      	blx	r3
		INPUT_TaskHandler();
    3e10:	e7fa      	b.n	3e08 <main+0x18>
    3e12:	46c0      	nop			; (mov r8, r8)
    3e14:	00000109 	.word	0x00000109
    3e18:	00000165 	.word	0x00000165
    3e1c:	20000260 	.word	0x20000260
    3e20:	000004e5 	.word	0x000004e5
    3e24:	000027e1 	.word	0x000027e1
    3e28:	00000aa1 	.word	0x00000aa1
    3e2c:	0000195d 	.word	0x0000195d

00003e30 <__udivsi3>:
    3e30:	2200      	movs	r2, #0
    3e32:	0843      	lsrs	r3, r0, #1
    3e34:	428b      	cmp	r3, r1
    3e36:	d374      	bcc.n	3f22 <__udivsi3+0xf2>
    3e38:	0903      	lsrs	r3, r0, #4
    3e3a:	428b      	cmp	r3, r1
    3e3c:	d35f      	bcc.n	3efe <__udivsi3+0xce>
    3e3e:	0a03      	lsrs	r3, r0, #8
    3e40:	428b      	cmp	r3, r1
    3e42:	d344      	bcc.n	3ece <__udivsi3+0x9e>
    3e44:	0b03      	lsrs	r3, r0, #12
    3e46:	428b      	cmp	r3, r1
    3e48:	d328      	bcc.n	3e9c <__udivsi3+0x6c>
    3e4a:	0c03      	lsrs	r3, r0, #16
    3e4c:	428b      	cmp	r3, r1
    3e4e:	d30d      	bcc.n	3e6c <__udivsi3+0x3c>
    3e50:	22ff      	movs	r2, #255	; 0xff
    3e52:	0209      	lsls	r1, r1, #8
    3e54:	ba12      	rev	r2, r2
    3e56:	0c03      	lsrs	r3, r0, #16
    3e58:	428b      	cmp	r3, r1
    3e5a:	d302      	bcc.n	3e62 <__udivsi3+0x32>
    3e5c:	1212      	asrs	r2, r2, #8
    3e5e:	0209      	lsls	r1, r1, #8
    3e60:	d065      	beq.n	3f2e <__udivsi3+0xfe>
    3e62:	0b03      	lsrs	r3, r0, #12
    3e64:	428b      	cmp	r3, r1
    3e66:	d319      	bcc.n	3e9c <__udivsi3+0x6c>
    3e68:	e000      	b.n	3e6c <__udivsi3+0x3c>
    3e6a:	0a09      	lsrs	r1, r1, #8
    3e6c:	0bc3      	lsrs	r3, r0, #15
    3e6e:	428b      	cmp	r3, r1
    3e70:	d301      	bcc.n	3e76 <__udivsi3+0x46>
    3e72:	03cb      	lsls	r3, r1, #15
    3e74:	1ac0      	subs	r0, r0, r3
    3e76:	4152      	adcs	r2, r2
    3e78:	0b83      	lsrs	r3, r0, #14
    3e7a:	428b      	cmp	r3, r1
    3e7c:	d301      	bcc.n	3e82 <__udivsi3+0x52>
    3e7e:	038b      	lsls	r3, r1, #14
    3e80:	1ac0      	subs	r0, r0, r3
    3e82:	4152      	adcs	r2, r2
    3e84:	0b43      	lsrs	r3, r0, #13
    3e86:	428b      	cmp	r3, r1
    3e88:	d301      	bcc.n	3e8e <__udivsi3+0x5e>
    3e8a:	034b      	lsls	r3, r1, #13
    3e8c:	1ac0      	subs	r0, r0, r3
    3e8e:	4152      	adcs	r2, r2
    3e90:	0b03      	lsrs	r3, r0, #12
    3e92:	428b      	cmp	r3, r1
    3e94:	d301      	bcc.n	3e9a <__udivsi3+0x6a>
    3e96:	030b      	lsls	r3, r1, #12
    3e98:	1ac0      	subs	r0, r0, r3
    3e9a:	4152      	adcs	r2, r2
    3e9c:	0ac3      	lsrs	r3, r0, #11
    3e9e:	428b      	cmp	r3, r1
    3ea0:	d301      	bcc.n	3ea6 <__udivsi3+0x76>
    3ea2:	02cb      	lsls	r3, r1, #11
    3ea4:	1ac0      	subs	r0, r0, r3
    3ea6:	4152      	adcs	r2, r2
    3ea8:	0a83      	lsrs	r3, r0, #10
    3eaa:	428b      	cmp	r3, r1
    3eac:	d301      	bcc.n	3eb2 <__udivsi3+0x82>
    3eae:	028b      	lsls	r3, r1, #10
    3eb0:	1ac0      	subs	r0, r0, r3
    3eb2:	4152      	adcs	r2, r2
    3eb4:	0a43      	lsrs	r3, r0, #9
    3eb6:	428b      	cmp	r3, r1
    3eb8:	d301      	bcc.n	3ebe <__udivsi3+0x8e>
    3eba:	024b      	lsls	r3, r1, #9
    3ebc:	1ac0      	subs	r0, r0, r3
    3ebe:	4152      	adcs	r2, r2
    3ec0:	0a03      	lsrs	r3, r0, #8
    3ec2:	428b      	cmp	r3, r1
    3ec4:	d301      	bcc.n	3eca <__udivsi3+0x9a>
    3ec6:	020b      	lsls	r3, r1, #8
    3ec8:	1ac0      	subs	r0, r0, r3
    3eca:	4152      	adcs	r2, r2
    3ecc:	d2cd      	bcs.n	3e6a <__udivsi3+0x3a>
    3ece:	09c3      	lsrs	r3, r0, #7
    3ed0:	428b      	cmp	r3, r1
    3ed2:	d301      	bcc.n	3ed8 <__udivsi3+0xa8>
    3ed4:	01cb      	lsls	r3, r1, #7
    3ed6:	1ac0      	subs	r0, r0, r3
    3ed8:	4152      	adcs	r2, r2
    3eda:	0983      	lsrs	r3, r0, #6
    3edc:	428b      	cmp	r3, r1
    3ede:	d301      	bcc.n	3ee4 <__udivsi3+0xb4>
    3ee0:	018b      	lsls	r3, r1, #6
    3ee2:	1ac0      	subs	r0, r0, r3
    3ee4:	4152      	adcs	r2, r2
    3ee6:	0943      	lsrs	r3, r0, #5
    3ee8:	428b      	cmp	r3, r1
    3eea:	d301      	bcc.n	3ef0 <__udivsi3+0xc0>
    3eec:	014b      	lsls	r3, r1, #5
    3eee:	1ac0      	subs	r0, r0, r3
    3ef0:	4152      	adcs	r2, r2
    3ef2:	0903      	lsrs	r3, r0, #4
    3ef4:	428b      	cmp	r3, r1
    3ef6:	d301      	bcc.n	3efc <__udivsi3+0xcc>
    3ef8:	010b      	lsls	r3, r1, #4
    3efa:	1ac0      	subs	r0, r0, r3
    3efc:	4152      	adcs	r2, r2
    3efe:	08c3      	lsrs	r3, r0, #3
    3f00:	428b      	cmp	r3, r1
    3f02:	d301      	bcc.n	3f08 <__udivsi3+0xd8>
    3f04:	00cb      	lsls	r3, r1, #3
    3f06:	1ac0      	subs	r0, r0, r3
    3f08:	4152      	adcs	r2, r2
    3f0a:	0883      	lsrs	r3, r0, #2
    3f0c:	428b      	cmp	r3, r1
    3f0e:	d301      	bcc.n	3f14 <__udivsi3+0xe4>
    3f10:	008b      	lsls	r3, r1, #2
    3f12:	1ac0      	subs	r0, r0, r3
    3f14:	4152      	adcs	r2, r2
    3f16:	0843      	lsrs	r3, r0, #1
    3f18:	428b      	cmp	r3, r1
    3f1a:	d301      	bcc.n	3f20 <__udivsi3+0xf0>
    3f1c:	004b      	lsls	r3, r1, #1
    3f1e:	1ac0      	subs	r0, r0, r3
    3f20:	4152      	adcs	r2, r2
    3f22:	1a41      	subs	r1, r0, r1
    3f24:	d200      	bcs.n	3f28 <__udivsi3+0xf8>
    3f26:	4601      	mov	r1, r0
    3f28:	4152      	adcs	r2, r2
    3f2a:	4610      	mov	r0, r2
    3f2c:	4770      	bx	lr
    3f2e:	e7ff      	b.n	3f30 <__udivsi3+0x100>
    3f30:	b501      	push	{r0, lr}
    3f32:	2000      	movs	r0, #0
    3f34:	f000 f806 	bl	3f44 <__aeabi_idiv0>
    3f38:	bd02      	pop	{r1, pc}
    3f3a:	46c0      	nop			; (mov r8, r8)

00003f3c <__aeabi_uidivmod>:
    3f3c:	2900      	cmp	r1, #0
    3f3e:	d0f7      	beq.n	3f30 <__udivsi3+0x100>
    3f40:	e776      	b.n	3e30 <__udivsi3>
    3f42:	4770      	bx	lr

00003f44 <__aeabi_idiv0>:
    3f44:	4770      	bx	lr
    3f46:	46c0      	nop			; (mov r8, r8)

00003f48 <__aeabi_cdrcmple>:
    3f48:	4684      	mov	ip, r0
    3f4a:	1c10      	adds	r0, r2, #0
    3f4c:	4662      	mov	r2, ip
    3f4e:	468c      	mov	ip, r1
    3f50:	1c19      	adds	r1, r3, #0
    3f52:	4663      	mov	r3, ip
    3f54:	e000      	b.n	3f58 <__aeabi_cdcmpeq>
    3f56:	46c0      	nop			; (mov r8, r8)

00003f58 <__aeabi_cdcmpeq>:
    3f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3f5a:	f001 f83d 	bl	4fd8 <__ledf2>
    3f5e:	2800      	cmp	r0, #0
    3f60:	d401      	bmi.n	3f66 <__aeabi_cdcmpeq+0xe>
    3f62:	2100      	movs	r1, #0
    3f64:	42c8      	cmn	r0, r1
    3f66:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003f68 <__aeabi_dcmpeq>:
    3f68:	b510      	push	{r4, lr}
    3f6a:	f000 ff97 	bl	4e9c <__eqdf2>
    3f6e:	4240      	negs	r0, r0
    3f70:	3001      	adds	r0, #1
    3f72:	bd10      	pop	{r4, pc}

00003f74 <__aeabi_dcmplt>:
    3f74:	b510      	push	{r4, lr}
    3f76:	f001 f82f 	bl	4fd8 <__ledf2>
    3f7a:	2800      	cmp	r0, #0
    3f7c:	db01      	blt.n	3f82 <__aeabi_dcmplt+0xe>
    3f7e:	2000      	movs	r0, #0
    3f80:	bd10      	pop	{r4, pc}
    3f82:	2001      	movs	r0, #1
    3f84:	bd10      	pop	{r4, pc}
    3f86:	46c0      	nop			; (mov r8, r8)

00003f88 <__aeabi_dcmple>:
    3f88:	b510      	push	{r4, lr}
    3f8a:	f001 f825 	bl	4fd8 <__ledf2>
    3f8e:	2800      	cmp	r0, #0
    3f90:	dd01      	ble.n	3f96 <__aeabi_dcmple+0xe>
    3f92:	2000      	movs	r0, #0
    3f94:	bd10      	pop	{r4, pc}
    3f96:	2001      	movs	r0, #1
    3f98:	bd10      	pop	{r4, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)

00003f9c <__aeabi_dcmpgt>:
    3f9c:	b510      	push	{r4, lr}
    3f9e:	f000 ffb7 	bl	4f10 <__gedf2>
    3fa2:	2800      	cmp	r0, #0
    3fa4:	dc01      	bgt.n	3faa <__aeabi_dcmpgt+0xe>
    3fa6:	2000      	movs	r0, #0
    3fa8:	bd10      	pop	{r4, pc}
    3faa:	2001      	movs	r0, #1
    3fac:	bd10      	pop	{r4, pc}
    3fae:	46c0      	nop			; (mov r8, r8)

00003fb0 <__aeabi_dcmpge>:
    3fb0:	b510      	push	{r4, lr}
    3fb2:	f000 ffad 	bl	4f10 <__gedf2>
    3fb6:	2800      	cmp	r0, #0
    3fb8:	da01      	bge.n	3fbe <__aeabi_dcmpge+0xe>
    3fba:	2000      	movs	r0, #0
    3fbc:	bd10      	pop	{r4, pc}
    3fbe:	2001      	movs	r0, #1
    3fc0:	bd10      	pop	{r4, pc}
    3fc2:	46c0      	nop			; (mov r8, r8)

00003fc4 <__aeabi_uldivmod>:
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d111      	bne.n	3fec <__aeabi_uldivmod+0x28>
    3fc8:	2a00      	cmp	r2, #0
    3fca:	d10f      	bne.n	3fec <__aeabi_uldivmod+0x28>
    3fcc:	2900      	cmp	r1, #0
    3fce:	d100      	bne.n	3fd2 <__aeabi_uldivmod+0xe>
    3fd0:	2800      	cmp	r0, #0
    3fd2:	d002      	beq.n	3fda <__aeabi_uldivmod+0x16>
    3fd4:	2100      	movs	r1, #0
    3fd6:	43c9      	mvns	r1, r1
    3fd8:	1c08      	adds	r0, r1, #0
    3fda:	b407      	push	{r0, r1, r2}
    3fdc:	4802      	ldr	r0, [pc, #8]	; (3fe8 <__aeabi_uldivmod+0x24>)
    3fde:	a102      	add	r1, pc, #8	; (adr r1, 3fe8 <__aeabi_uldivmod+0x24>)
    3fe0:	1840      	adds	r0, r0, r1
    3fe2:	9002      	str	r0, [sp, #8]
    3fe4:	bd03      	pop	{r0, r1, pc}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	ffffff5d 	.word	0xffffff5d
    3fec:	b403      	push	{r0, r1}
    3fee:	4668      	mov	r0, sp
    3ff0:	b501      	push	{r0, lr}
    3ff2:	9802      	ldr	r0, [sp, #8]
    3ff4:	f000 f84e 	bl	4094 <__udivmoddi4>
    3ff8:	9b01      	ldr	r3, [sp, #4]
    3ffa:	469e      	mov	lr, r3
    3ffc:	b002      	add	sp, #8
    3ffe:	bc0c      	pop	{r2, r3}
    4000:	4770      	bx	lr
    4002:	46c0      	nop			; (mov r8, r8)

00004004 <__aeabi_lmul>:
    4004:	b5f0      	push	{r4, r5, r6, r7, lr}
    4006:	46ce      	mov	lr, r9
    4008:	4647      	mov	r7, r8
    400a:	0415      	lsls	r5, r2, #16
    400c:	0c2d      	lsrs	r5, r5, #16
    400e:	002e      	movs	r6, r5
    4010:	b580      	push	{r7, lr}
    4012:	0407      	lsls	r7, r0, #16
    4014:	0c14      	lsrs	r4, r2, #16
    4016:	0c3f      	lsrs	r7, r7, #16
    4018:	4699      	mov	r9, r3
    401a:	0c03      	lsrs	r3, r0, #16
    401c:	437e      	muls	r6, r7
    401e:	435d      	muls	r5, r3
    4020:	4367      	muls	r7, r4
    4022:	4363      	muls	r3, r4
    4024:	197f      	adds	r7, r7, r5
    4026:	0c34      	lsrs	r4, r6, #16
    4028:	19e4      	adds	r4, r4, r7
    402a:	469c      	mov	ip, r3
    402c:	42a5      	cmp	r5, r4
    402e:	d903      	bls.n	4038 <__aeabi_lmul+0x34>
    4030:	2380      	movs	r3, #128	; 0x80
    4032:	025b      	lsls	r3, r3, #9
    4034:	4698      	mov	r8, r3
    4036:	44c4      	add	ip, r8
    4038:	464b      	mov	r3, r9
    403a:	4351      	muls	r1, r2
    403c:	4343      	muls	r3, r0
    403e:	0436      	lsls	r6, r6, #16
    4040:	0c36      	lsrs	r6, r6, #16
    4042:	0c25      	lsrs	r5, r4, #16
    4044:	0424      	lsls	r4, r4, #16
    4046:	4465      	add	r5, ip
    4048:	19a4      	adds	r4, r4, r6
    404a:	1859      	adds	r1, r3, r1
    404c:	1949      	adds	r1, r1, r5
    404e:	0020      	movs	r0, r4
    4050:	bc0c      	pop	{r2, r3}
    4052:	4690      	mov	r8, r2
    4054:	4699      	mov	r9, r3
    4056:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004058 <__aeabi_d2uiz>:
    4058:	b570      	push	{r4, r5, r6, lr}
    405a:	2200      	movs	r2, #0
    405c:	4b0c      	ldr	r3, [pc, #48]	; (4090 <__aeabi_d2uiz+0x38>)
    405e:	0004      	movs	r4, r0
    4060:	000d      	movs	r5, r1
    4062:	f7ff ffa5 	bl	3fb0 <__aeabi_dcmpge>
    4066:	2800      	cmp	r0, #0
    4068:	d104      	bne.n	4074 <__aeabi_d2uiz+0x1c>
    406a:	0020      	movs	r0, r4
    406c:	0029      	movs	r1, r5
    406e:	f001 fdab 	bl	5bc8 <__aeabi_d2iz>
    4072:	bd70      	pop	{r4, r5, r6, pc}
    4074:	4b06      	ldr	r3, [pc, #24]	; (4090 <__aeabi_d2uiz+0x38>)
    4076:	2200      	movs	r2, #0
    4078:	0020      	movs	r0, r4
    407a:	0029      	movs	r1, r5
    407c:	f001 fa8e 	bl	559c <__aeabi_dsub>
    4080:	f001 fda2 	bl	5bc8 <__aeabi_d2iz>
    4084:	2380      	movs	r3, #128	; 0x80
    4086:	061b      	lsls	r3, r3, #24
    4088:	469c      	mov	ip, r3
    408a:	4460      	add	r0, ip
    408c:	e7f1      	b.n	4072 <__aeabi_d2uiz+0x1a>
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	41e00000 	.word	0x41e00000

00004094 <__udivmoddi4>:
    4094:	b5f0      	push	{r4, r5, r6, r7, lr}
    4096:	4657      	mov	r7, sl
    4098:	464e      	mov	r6, r9
    409a:	4645      	mov	r5, r8
    409c:	46de      	mov	lr, fp
    409e:	b5e0      	push	{r5, r6, r7, lr}
    40a0:	0004      	movs	r4, r0
    40a2:	b083      	sub	sp, #12
    40a4:	000d      	movs	r5, r1
    40a6:	4692      	mov	sl, r2
    40a8:	4699      	mov	r9, r3
    40aa:	428b      	cmp	r3, r1
    40ac:	d82f      	bhi.n	410e <__udivmoddi4+0x7a>
    40ae:	d02c      	beq.n	410a <__udivmoddi4+0x76>
    40b0:	4649      	mov	r1, r9
    40b2:	4650      	mov	r0, sl
    40b4:	f001 fe12 	bl	5cdc <__clzdi2>
    40b8:	0029      	movs	r1, r5
    40ba:	0006      	movs	r6, r0
    40bc:	0020      	movs	r0, r4
    40be:	f001 fe0d 	bl	5cdc <__clzdi2>
    40c2:	1a33      	subs	r3, r6, r0
    40c4:	4698      	mov	r8, r3
    40c6:	3b20      	subs	r3, #32
    40c8:	469b      	mov	fp, r3
    40ca:	d500      	bpl.n	40ce <__udivmoddi4+0x3a>
    40cc:	e074      	b.n	41b8 <__udivmoddi4+0x124>
    40ce:	4653      	mov	r3, sl
    40d0:	465a      	mov	r2, fp
    40d2:	4093      	lsls	r3, r2
    40d4:	001f      	movs	r7, r3
    40d6:	4653      	mov	r3, sl
    40d8:	4642      	mov	r2, r8
    40da:	4093      	lsls	r3, r2
    40dc:	001e      	movs	r6, r3
    40de:	42af      	cmp	r7, r5
    40e0:	d829      	bhi.n	4136 <__udivmoddi4+0xa2>
    40e2:	d026      	beq.n	4132 <__udivmoddi4+0x9e>
    40e4:	465b      	mov	r3, fp
    40e6:	1ba4      	subs	r4, r4, r6
    40e8:	41bd      	sbcs	r5, r7
    40ea:	2b00      	cmp	r3, #0
    40ec:	da00      	bge.n	40f0 <__udivmoddi4+0x5c>
    40ee:	e079      	b.n	41e4 <__udivmoddi4+0x150>
    40f0:	2200      	movs	r2, #0
    40f2:	2300      	movs	r3, #0
    40f4:	9200      	str	r2, [sp, #0]
    40f6:	9301      	str	r3, [sp, #4]
    40f8:	2301      	movs	r3, #1
    40fa:	465a      	mov	r2, fp
    40fc:	4093      	lsls	r3, r2
    40fe:	9301      	str	r3, [sp, #4]
    4100:	2301      	movs	r3, #1
    4102:	4642      	mov	r2, r8
    4104:	4093      	lsls	r3, r2
    4106:	9300      	str	r3, [sp, #0]
    4108:	e019      	b.n	413e <__udivmoddi4+0xaa>
    410a:	4282      	cmp	r2, r0
    410c:	d9d0      	bls.n	40b0 <__udivmoddi4+0x1c>
    410e:	2200      	movs	r2, #0
    4110:	2300      	movs	r3, #0
    4112:	9200      	str	r2, [sp, #0]
    4114:	9301      	str	r3, [sp, #4]
    4116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4118:	2b00      	cmp	r3, #0
    411a:	d001      	beq.n	4120 <__udivmoddi4+0x8c>
    411c:	601c      	str	r4, [r3, #0]
    411e:	605d      	str	r5, [r3, #4]
    4120:	9800      	ldr	r0, [sp, #0]
    4122:	9901      	ldr	r1, [sp, #4]
    4124:	b003      	add	sp, #12
    4126:	bc3c      	pop	{r2, r3, r4, r5}
    4128:	4690      	mov	r8, r2
    412a:	4699      	mov	r9, r3
    412c:	46a2      	mov	sl, r4
    412e:	46ab      	mov	fp, r5
    4130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4132:	42a3      	cmp	r3, r4
    4134:	d9d6      	bls.n	40e4 <__udivmoddi4+0x50>
    4136:	2200      	movs	r2, #0
    4138:	2300      	movs	r3, #0
    413a:	9200      	str	r2, [sp, #0]
    413c:	9301      	str	r3, [sp, #4]
    413e:	4643      	mov	r3, r8
    4140:	2b00      	cmp	r3, #0
    4142:	d0e8      	beq.n	4116 <__udivmoddi4+0x82>
    4144:	07fb      	lsls	r3, r7, #31
    4146:	0872      	lsrs	r2, r6, #1
    4148:	431a      	orrs	r2, r3
    414a:	4646      	mov	r6, r8
    414c:	087b      	lsrs	r3, r7, #1
    414e:	e00e      	b.n	416e <__udivmoddi4+0xda>
    4150:	42ab      	cmp	r3, r5
    4152:	d101      	bne.n	4158 <__udivmoddi4+0xc4>
    4154:	42a2      	cmp	r2, r4
    4156:	d80c      	bhi.n	4172 <__udivmoddi4+0xde>
    4158:	1aa4      	subs	r4, r4, r2
    415a:	419d      	sbcs	r5, r3
    415c:	2001      	movs	r0, #1
    415e:	1924      	adds	r4, r4, r4
    4160:	416d      	adcs	r5, r5
    4162:	2100      	movs	r1, #0
    4164:	3e01      	subs	r6, #1
    4166:	1824      	adds	r4, r4, r0
    4168:	414d      	adcs	r5, r1
    416a:	2e00      	cmp	r6, #0
    416c:	d006      	beq.n	417c <__udivmoddi4+0xe8>
    416e:	42ab      	cmp	r3, r5
    4170:	d9ee      	bls.n	4150 <__udivmoddi4+0xbc>
    4172:	3e01      	subs	r6, #1
    4174:	1924      	adds	r4, r4, r4
    4176:	416d      	adcs	r5, r5
    4178:	2e00      	cmp	r6, #0
    417a:	d1f8      	bne.n	416e <__udivmoddi4+0xda>
    417c:	465b      	mov	r3, fp
    417e:	9800      	ldr	r0, [sp, #0]
    4180:	9901      	ldr	r1, [sp, #4]
    4182:	1900      	adds	r0, r0, r4
    4184:	4169      	adcs	r1, r5
    4186:	2b00      	cmp	r3, #0
    4188:	db22      	blt.n	41d0 <__udivmoddi4+0x13c>
    418a:	002b      	movs	r3, r5
    418c:	465a      	mov	r2, fp
    418e:	40d3      	lsrs	r3, r2
    4190:	002a      	movs	r2, r5
    4192:	4644      	mov	r4, r8
    4194:	40e2      	lsrs	r2, r4
    4196:	001c      	movs	r4, r3
    4198:	465b      	mov	r3, fp
    419a:	0015      	movs	r5, r2
    419c:	2b00      	cmp	r3, #0
    419e:	db2c      	blt.n	41fa <__udivmoddi4+0x166>
    41a0:	0026      	movs	r6, r4
    41a2:	409e      	lsls	r6, r3
    41a4:	0033      	movs	r3, r6
    41a6:	0026      	movs	r6, r4
    41a8:	4647      	mov	r7, r8
    41aa:	40be      	lsls	r6, r7
    41ac:	0032      	movs	r2, r6
    41ae:	1a80      	subs	r0, r0, r2
    41b0:	4199      	sbcs	r1, r3
    41b2:	9000      	str	r0, [sp, #0]
    41b4:	9101      	str	r1, [sp, #4]
    41b6:	e7ae      	b.n	4116 <__udivmoddi4+0x82>
    41b8:	4642      	mov	r2, r8
    41ba:	2320      	movs	r3, #32
    41bc:	1a9b      	subs	r3, r3, r2
    41be:	4652      	mov	r2, sl
    41c0:	40da      	lsrs	r2, r3
    41c2:	4641      	mov	r1, r8
    41c4:	0013      	movs	r3, r2
    41c6:	464a      	mov	r2, r9
    41c8:	408a      	lsls	r2, r1
    41ca:	0017      	movs	r7, r2
    41cc:	431f      	orrs	r7, r3
    41ce:	e782      	b.n	40d6 <__udivmoddi4+0x42>
    41d0:	4642      	mov	r2, r8
    41d2:	2320      	movs	r3, #32
    41d4:	1a9b      	subs	r3, r3, r2
    41d6:	002a      	movs	r2, r5
    41d8:	4646      	mov	r6, r8
    41da:	409a      	lsls	r2, r3
    41dc:	0023      	movs	r3, r4
    41de:	40f3      	lsrs	r3, r6
    41e0:	4313      	orrs	r3, r2
    41e2:	e7d5      	b.n	4190 <__udivmoddi4+0xfc>
    41e4:	4642      	mov	r2, r8
    41e6:	2320      	movs	r3, #32
    41e8:	2100      	movs	r1, #0
    41ea:	1a9b      	subs	r3, r3, r2
    41ec:	2200      	movs	r2, #0
    41ee:	9100      	str	r1, [sp, #0]
    41f0:	9201      	str	r2, [sp, #4]
    41f2:	2201      	movs	r2, #1
    41f4:	40da      	lsrs	r2, r3
    41f6:	9201      	str	r2, [sp, #4]
    41f8:	e782      	b.n	4100 <__udivmoddi4+0x6c>
    41fa:	4642      	mov	r2, r8
    41fc:	2320      	movs	r3, #32
    41fe:	0026      	movs	r6, r4
    4200:	1a9b      	subs	r3, r3, r2
    4202:	40de      	lsrs	r6, r3
    4204:	002f      	movs	r7, r5
    4206:	46b4      	mov	ip, r6
    4208:	4097      	lsls	r7, r2
    420a:	4666      	mov	r6, ip
    420c:	003b      	movs	r3, r7
    420e:	4333      	orrs	r3, r6
    4210:	e7c9      	b.n	41a6 <__udivmoddi4+0x112>
    4212:	46c0      	nop			; (mov r8, r8)

00004214 <__aeabi_dadd>:
    4214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4216:	4645      	mov	r5, r8
    4218:	46de      	mov	lr, fp
    421a:	4657      	mov	r7, sl
    421c:	464e      	mov	r6, r9
    421e:	030c      	lsls	r4, r1, #12
    4220:	b5e0      	push	{r5, r6, r7, lr}
    4222:	004e      	lsls	r6, r1, #1
    4224:	0fc9      	lsrs	r1, r1, #31
    4226:	4688      	mov	r8, r1
    4228:	000d      	movs	r5, r1
    422a:	0a61      	lsrs	r1, r4, #9
    422c:	0f44      	lsrs	r4, r0, #29
    422e:	430c      	orrs	r4, r1
    4230:	00c7      	lsls	r7, r0, #3
    4232:	0319      	lsls	r1, r3, #12
    4234:	0058      	lsls	r0, r3, #1
    4236:	0fdb      	lsrs	r3, r3, #31
    4238:	469b      	mov	fp, r3
    423a:	0a4b      	lsrs	r3, r1, #9
    423c:	0f51      	lsrs	r1, r2, #29
    423e:	430b      	orrs	r3, r1
    4240:	0d76      	lsrs	r6, r6, #21
    4242:	0d40      	lsrs	r0, r0, #21
    4244:	0019      	movs	r1, r3
    4246:	00d2      	lsls	r2, r2, #3
    4248:	45d8      	cmp	r8, fp
    424a:	d100      	bne.n	424e <__aeabi_dadd+0x3a>
    424c:	e0ae      	b.n	43ac <__aeabi_dadd+0x198>
    424e:	1a35      	subs	r5, r6, r0
    4250:	2d00      	cmp	r5, #0
    4252:	dc00      	bgt.n	4256 <__aeabi_dadd+0x42>
    4254:	e0f6      	b.n	4444 <__aeabi_dadd+0x230>
    4256:	2800      	cmp	r0, #0
    4258:	d10f      	bne.n	427a <__aeabi_dadd+0x66>
    425a:	4313      	orrs	r3, r2
    425c:	d100      	bne.n	4260 <__aeabi_dadd+0x4c>
    425e:	e0db      	b.n	4418 <__aeabi_dadd+0x204>
    4260:	1e6b      	subs	r3, r5, #1
    4262:	2b00      	cmp	r3, #0
    4264:	d000      	beq.n	4268 <__aeabi_dadd+0x54>
    4266:	e137      	b.n	44d8 <__aeabi_dadd+0x2c4>
    4268:	1aba      	subs	r2, r7, r2
    426a:	4297      	cmp	r7, r2
    426c:	41bf      	sbcs	r7, r7
    426e:	1a64      	subs	r4, r4, r1
    4270:	427f      	negs	r7, r7
    4272:	1be4      	subs	r4, r4, r7
    4274:	2601      	movs	r6, #1
    4276:	0017      	movs	r7, r2
    4278:	e024      	b.n	42c4 <__aeabi_dadd+0xb0>
    427a:	4bc6      	ldr	r3, [pc, #792]	; (4594 <__aeabi_dadd+0x380>)
    427c:	429e      	cmp	r6, r3
    427e:	d04d      	beq.n	431c <__aeabi_dadd+0x108>
    4280:	2380      	movs	r3, #128	; 0x80
    4282:	041b      	lsls	r3, r3, #16
    4284:	4319      	orrs	r1, r3
    4286:	2d38      	cmp	r5, #56	; 0x38
    4288:	dd00      	ble.n	428c <__aeabi_dadd+0x78>
    428a:	e107      	b.n	449c <__aeabi_dadd+0x288>
    428c:	2d1f      	cmp	r5, #31
    428e:	dd00      	ble.n	4292 <__aeabi_dadd+0x7e>
    4290:	e138      	b.n	4504 <__aeabi_dadd+0x2f0>
    4292:	2020      	movs	r0, #32
    4294:	1b43      	subs	r3, r0, r5
    4296:	469a      	mov	sl, r3
    4298:	000b      	movs	r3, r1
    429a:	4650      	mov	r0, sl
    429c:	4083      	lsls	r3, r0
    429e:	4699      	mov	r9, r3
    42a0:	0013      	movs	r3, r2
    42a2:	4648      	mov	r0, r9
    42a4:	40eb      	lsrs	r3, r5
    42a6:	4318      	orrs	r0, r3
    42a8:	0003      	movs	r3, r0
    42aa:	4650      	mov	r0, sl
    42ac:	4082      	lsls	r2, r0
    42ae:	1e50      	subs	r0, r2, #1
    42b0:	4182      	sbcs	r2, r0
    42b2:	40e9      	lsrs	r1, r5
    42b4:	431a      	orrs	r2, r3
    42b6:	1aba      	subs	r2, r7, r2
    42b8:	1a61      	subs	r1, r4, r1
    42ba:	4297      	cmp	r7, r2
    42bc:	41a4      	sbcs	r4, r4
    42be:	0017      	movs	r7, r2
    42c0:	4264      	negs	r4, r4
    42c2:	1b0c      	subs	r4, r1, r4
    42c4:	0223      	lsls	r3, r4, #8
    42c6:	d562      	bpl.n	438e <__aeabi_dadd+0x17a>
    42c8:	0264      	lsls	r4, r4, #9
    42ca:	0a65      	lsrs	r5, r4, #9
    42cc:	2d00      	cmp	r5, #0
    42ce:	d100      	bne.n	42d2 <__aeabi_dadd+0xbe>
    42d0:	e0df      	b.n	4492 <__aeabi_dadd+0x27e>
    42d2:	0028      	movs	r0, r5
    42d4:	f001 fce4 	bl	5ca0 <__clzsi2>
    42d8:	0003      	movs	r3, r0
    42da:	3b08      	subs	r3, #8
    42dc:	2b1f      	cmp	r3, #31
    42de:	dd00      	ble.n	42e2 <__aeabi_dadd+0xce>
    42e0:	e0d2      	b.n	4488 <__aeabi_dadd+0x274>
    42e2:	2220      	movs	r2, #32
    42e4:	003c      	movs	r4, r7
    42e6:	1ad2      	subs	r2, r2, r3
    42e8:	409d      	lsls	r5, r3
    42ea:	40d4      	lsrs	r4, r2
    42ec:	409f      	lsls	r7, r3
    42ee:	4325      	orrs	r5, r4
    42f0:	429e      	cmp	r6, r3
    42f2:	dd00      	ble.n	42f6 <__aeabi_dadd+0xe2>
    42f4:	e0c4      	b.n	4480 <__aeabi_dadd+0x26c>
    42f6:	1b9e      	subs	r6, r3, r6
    42f8:	1c73      	adds	r3, r6, #1
    42fa:	2b1f      	cmp	r3, #31
    42fc:	dd00      	ble.n	4300 <__aeabi_dadd+0xec>
    42fe:	e0f1      	b.n	44e4 <__aeabi_dadd+0x2d0>
    4300:	2220      	movs	r2, #32
    4302:	0038      	movs	r0, r7
    4304:	0029      	movs	r1, r5
    4306:	1ad2      	subs	r2, r2, r3
    4308:	40d8      	lsrs	r0, r3
    430a:	4091      	lsls	r1, r2
    430c:	4097      	lsls	r7, r2
    430e:	002c      	movs	r4, r5
    4310:	4301      	orrs	r1, r0
    4312:	1e78      	subs	r0, r7, #1
    4314:	4187      	sbcs	r7, r0
    4316:	40dc      	lsrs	r4, r3
    4318:	2600      	movs	r6, #0
    431a:	430f      	orrs	r7, r1
    431c:	077b      	lsls	r3, r7, #29
    431e:	d009      	beq.n	4334 <__aeabi_dadd+0x120>
    4320:	230f      	movs	r3, #15
    4322:	403b      	ands	r3, r7
    4324:	2b04      	cmp	r3, #4
    4326:	d005      	beq.n	4334 <__aeabi_dadd+0x120>
    4328:	1d3b      	adds	r3, r7, #4
    432a:	42bb      	cmp	r3, r7
    432c:	41bf      	sbcs	r7, r7
    432e:	427f      	negs	r7, r7
    4330:	19e4      	adds	r4, r4, r7
    4332:	001f      	movs	r7, r3
    4334:	0223      	lsls	r3, r4, #8
    4336:	d52c      	bpl.n	4392 <__aeabi_dadd+0x17e>
    4338:	4b96      	ldr	r3, [pc, #600]	; (4594 <__aeabi_dadd+0x380>)
    433a:	3601      	adds	r6, #1
    433c:	429e      	cmp	r6, r3
    433e:	d100      	bne.n	4342 <__aeabi_dadd+0x12e>
    4340:	e09a      	b.n	4478 <__aeabi_dadd+0x264>
    4342:	4645      	mov	r5, r8
    4344:	4b94      	ldr	r3, [pc, #592]	; (4598 <__aeabi_dadd+0x384>)
    4346:	08ff      	lsrs	r7, r7, #3
    4348:	401c      	ands	r4, r3
    434a:	0760      	lsls	r0, r4, #29
    434c:	0576      	lsls	r6, r6, #21
    434e:	0264      	lsls	r4, r4, #9
    4350:	4307      	orrs	r7, r0
    4352:	0b24      	lsrs	r4, r4, #12
    4354:	0d76      	lsrs	r6, r6, #21
    4356:	2100      	movs	r1, #0
    4358:	0324      	lsls	r4, r4, #12
    435a:	0b23      	lsrs	r3, r4, #12
    435c:	0d0c      	lsrs	r4, r1, #20
    435e:	4a8f      	ldr	r2, [pc, #572]	; (459c <__aeabi_dadd+0x388>)
    4360:	0524      	lsls	r4, r4, #20
    4362:	431c      	orrs	r4, r3
    4364:	4014      	ands	r4, r2
    4366:	0533      	lsls	r3, r6, #20
    4368:	4323      	orrs	r3, r4
    436a:	005b      	lsls	r3, r3, #1
    436c:	07ed      	lsls	r5, r5, #31
    436e:	085b      	lsrs	r3, r3, #1
    4370:	432b      	orrs	r3, r5
    4372:	0038      	movs	r0, r7
    4374:	0019      	movs	r1, r3
    4376:	bc3c      	pop	{r2, r3, r4, r5}
    4378:	4690      	mov	r8, r2
    437a:	4699      	mov	r9, r3
    437c:	46a2      	mov	sl, r4
    437e:	46ab      	mov	fp, r5
    4380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4382:	4664      	mov	r4, ip
    4384:	4304      	orrs	r4, r0
    4386:	d100      	bne.n	438a <__aeabi_dadd+0x176>
    4388:	e211      	b.n	47ae <__aeabi_dadd+0x59a>
    438a:	0004      	movs	r4, r0
    438c:	4667      	mov	r7, ip
    438e:	077b      	lsls	r3, r7, #29
    4390:	d1c6      	bne.n	4320 <__aeabi_dadd+0x10c>
    4392:	4645      	mov	r5, r8
    4394:	0760      	lsls	r0, r4, #29
    4396:	08ff      	lsrs	r7, r7, #3
    4398:	4307      	orrs	r7, r0
    439a:	08e4      	lsrs	r4, r4, #3
    439c:	4b7d      	ldr	r3, [pc, #500]	; (4594 <__aeabi_dadd+0x380>)
    439e:	429e      	cmp	r6, r3
    43a0:	d030      	beq.n	4404 <__aeabi_dadd+0x1f0>
    43a2:	0324      	lsls	r4, r4, #12
    43a4:	0576      	lsls	r6, r6, #21
    43a6:	0b24      	lsrs	r4, r4, #12
    43a8:	0d76      	lsrs	r6, r6, #21
    43aa:	e7d4      	b.n	4356 <__aeabi_dadd+0x142>
    43ac:	1a33      	subs	r3, r6, r0
    43ae:	469a      	mov	sl, r3
    43b0:	2b00      	cmp	r3, #0
    43b2:	dd78      	ble.n	44a6 <__aeabi_dadd+0x292>
    43b4:	2800      	cmp	r0, #0
    43b6:	d031      	beq.n	441c <__aeabi_dadd+0x208>
    43b8:	4876      	ldr	r0, [pc, #472]	; (4594 <__aeabi_dadd+0x380>)
    43ba:	4286      	cmp	r6, r0
    43bc:	d0ae      	beq.n	431c <__aeabi_dadd+0x108>
    43be:	2080      	movs	r0, #128	; 0x80
    43c0:	0400      	lsls	r0, r0, #16
    43c2:	4301      	orrs	r1, r0
    43c4:	4653      	mov	r3, sl
    43c6:	2b38      	cmp	r3, #56	; 0x38
    43c8:	dc00      	bgt.n	43cc <__aeabi_dadd+0x1b8>
    43ca:	e0e9      	b.n	45a0 <__aeabi_dadd+0x38c>
    43cc:	430a      	orrs	r2, r1
    43ce:	1e51      	subs	r1, r2, #1
    43d0:	418a      	sbcs	r2, r1
    43d2:	2100      	movs	r1, #0
    43d4:	19d2      	adds	r2, r2, r7
    43d6:	42ba      	cmp	r2, r7
    43d8:	41bf      	sbcs	r7, r7
    43da:	1909      	adds	r1, r1, r4
    43dc:	427c      	negs	r4, r7
    43de:	0017      	movs	r7, r2
    43e0:	190c      	adds	r4, r1, r4
    43e2:	0223      	lsls	r3, r4, #8
    43e4:	d5d3      	bpl.n	438e <__aeabi_dadd+0x17a>
    43e6:	4b6b      	ldr	r3, [pc, #428]	; (4594 <__aeabi_dadd+0x380>)
    43e8:	3601      	adds	r6, #1
    43ea:	429e      	cmp	r6, r3
    43ec:	d100      	bne.n	43f0 <__aeabi_dadd+0x1dc>
    43ee:	e13a      	b.n	4666 <__aeabi_dadd+0x452>
    43f0:	2001      	movs	r0, #1
    43f2:	4b69      	ldr	r3, [pc, #420]	; (4598 <__aeabi_dadd+0x384>)
    43f4:	401c      	ands	r4, r3
    43f6:	087b      	lsrs	r3, r7, #1
    43f8:	4007      	ands	r7, r0
    43fa:	431f      	orrs	r7, r3
    43fc:	07e0      	lsls	r0, r4, #31
    43fe:	4307      	orrs	r7, r0
    4400:	0864      	lsrs	r4, r4, #1
    4402:	e78b      	b.n	431c <__aeabi_dadd+0x108>
    4404:	0023      	movs	r3, r4
    4406:	433b      	orrs	r3, r7
    4408:	d100      	bne.n	440c <__aeabi_dadd+0x1f8>
    440a:	e1cb      	b.n	47a4 <__aeabi_dadd+0x590>
    440c:	2280      	movs	r2, #128	; 0x80
    440e:	0312      	lsls	r2, r2, #12
    4410:	4314      	orrs	r4, r2
    4412:	0324      	lsls	r4, r4, #12
    4414:	0b24      	lsrs	r4, r4, #12
    4416:	e79e      	b.n	4356 <__aeabi_dadd+0x142>
    4418:	002e      	movs	r6, r5
    441a:	e77f      	b.n	431c <__aeabi_dadd+0x108>
    441c:	0008      	movs	r0, r1
    441e:	4310      	orrs	r0, r2
    4420:	d100      	bne.n	4424 <__aeabi_dadd+0x210>
    4422:	e0b4      	b.n	458e <__aeabi_dadd+0x37a>
    4424:	1e58      	subs	r0, r3, #1
    4426:	2800      	cmp	r0, #0
    4428:	d000      	beq.n	442c <__aeabi_dadd+0x218>
    442a:	e0de      	b.n	45ea <__aeabi_dadd+0x3d6>
    442c:	18ba      	adds	r2, r7, r2
    442e:	42ba      	cmp	r2, r7
    4430:	419b      	sbcs	r3, r3
    4432:	1864      	adds	r4, r4, r1
    4434:	425b      	negs	r3, r3
    4436:	18e4      	adds	r4, r4, r3
    4438:	0017      	movs	r7, r2
    443a:	2601      	movs	r6, #1
    443c:	0223      	lsls	r3, r4, #8
    443e:	d5a6      	bpl.n	438e <__aeabi_dadd+0x17a>
    4440:	2602      	movs	r6, #2
    4442:	e7d5      	b.n	43f0 <__aeabi_dadd+0x1dc>
    4444:	2d00      	cmp	r5, #0
    4446:	d16e      	bne.n	4526 <__aeabi_dadd+0x312>
    4448:	1c70      	adds	r0, r6, #1
    444a:	0540      	lsls	r0, r0, #21
    444c:	0d40      	lsrs	r0, r0, #21
    444e:	2801      	cmp	r0, #1
    4450:	dc00      	bgt.n	4454 <__aeabi_dadd+0x240>
    4452:	e0f9      	b.n	4648 <__aeabi_dadd+0x434>
    4454:	1ab8      	subs	r0, r7, r2
    4456:	4684      	mov	ip, r0
    4458:	4287      	cmp	r7, r0
    445a:	4180      	sbcs	r0, r0
    445c:	1ae5      	subs	r5, r4, r3
    445e:	4240      	negs	r0, r0
    4460:	1a2d      	subs	r5, r5, r0
    4462:	0228      	lsls	r0, r5, #8
    4464:	d400      	bmi.n	4468 <__aeabi_dadd+0x254>
    4466:	e089      	b.n	457c <__aeabi_dadd+0x368>
    4468:	1bd7      	subs	r7, r2, r7
    446a:	42ba      	cmp	r2, r7
    446c:	4192      	sbcs	r2, r2
    446e:	1b1c      	subs	r4, r3, r4
    4470:	4252      	negs	r2, r2
    4472:	1aa5      	subs	r5, r4, r2
    4474:	46d8      	mov	r8, fp
    4476:	e729      	b.n	42cc <__aeabi_dadd+0xb8>
    4478:	4645      	mov	r5, r8
    447a:	2400      	movs	r4, #0
    447c:	2700      	movs	r7, #0
    447e:	e76a      	b.n	4356 <__aeabi_dadd+0x142>
    4480:	4c45      	ldr	r4, [pc, #276]	; (4598 <__aeabi_dadd+0x384>)
    4482:	1af6      	subs	r6, r6, r3
    4484:	402c      	ands	r4, r5
    4486:	e749      	b.n	431c <__aeabi_dadd+0x108>
    4488:	003d      	movs	r5, r7
    448a:	3828      	subs	r0, #40	; 0x28
    448c:	4085      	lsls	r5, r0
    448e:	2700      	movs	r7, #0
    4490:	e72e      	b.n	42f0 <__aeabi_dadd+0xdc>
    4492:	0038      	movs	r0, r7
    4494:	f001 fc04 	bl	5ca0 <__clzsi2>
    4498:	3020      	adds	r0, #32
    449a:	e71d      	b.n	42d8 <__aeabi_dadd+0xc4>
    449c:	430a      	orrs	r2, r1
    449e:	1e51      	subs	r1, r2, #1
    44a0:	418a      	sbcs	r2, r1
    44a2:	2100      	movs	r1, #0
    44a4:	e707      	b.n	42b6 <__aeabi_dadd+0xa2>
    44a6:	2b00      	cmp	r3, #0
    44a8:	d000      	beq.n	44ac <__aeabi_dadd+0x298>
    44aa:	e0f3      	b.n	4694 <__aeabi_dadd+0x480>
    44ac:	1c70      	adds	r0, r6, #1
    44ae:	0543      	lsls	r3, r0, #21
    44b0:	0d5b      	lsrs	r3, r3, #21
    44b2:	2b01      	cmp	r3, #1
    44b4:	dc00      	bgt.n	44b8 <__aeabi_dadd+0x2a4>
    44b6:	e0ad      	b.n	4614 <__aeabi_dadd+0x400>
    44b8:	4b36      	ldr	r3, [pc, #216]	; (4594 <__aeabi_dadd+0x380>)
    44ba:	4298      	cmp	r0, r3
    44bc:	d100      	bne.n	44c0 <__aeabi_dadd+0x2ac>
    44be:	e0d1      	b.n	4664 <__aeabi_dadd+0x450>
    44c0:	18ba      	adds	r2, r7, r2
    44c2:	42ba      	cmp	r2, r7
    44c4:	41bf      	sbcs	r7, r7
    44c6:	1864      	adds	r4, r4, r1
    44c8:	427f      	negs	r7, r7
    44ca:	19e4      	adds	r4, r4, r7
    44cc:	07e7      	lsls	r7, r4, #31
    44ce:	0852      	lsrs	r2, r2, #1
    44d0:	4317      	orrs	r7, r2
    44d2:	0864      	lsrs	r4, r4, #1
    44d4:	0006      	movs	r6, r0
    44d6:	e721      	b.n	431c <__aeabi_dadd+0x108>
    44d8:	482e      	ldr	r0, [pc, #184]	; (4594 <__aeabi_dadd+0x380>)
    44da:	4285      	cmp	r5, r0
    44dc:	d100      	bne.n	44e0 <__aeabi_dadd+0x2cc>
    44de:	e093      	b.n	4608 <__aeabi_dadd+0x3f4>
    44e0:	001d      	movs	r5, r3
    44e2:	e6d0      	b.n	4286 <__aeabi_dadd+0x72>
    44e4:	0029      	movs	r1, r5
    44e6:	3e1f      	subs	r6, #31
    44e8:	40f1      	lsrs	r1, r6
    44ea:	2b20      	cmp	r3, #32
    44ec:	d100      	bne.n	44f0 <__aeabi_dadd+0x2dc>
    44ee:	e08d      	b.n	460c <__aeabi_dadd+0x3f8>
    44f0:	2240      	movs	r2, #64	; 0x40
    44f2:	1ad3      	subs	r3, r2, r3
    44f4:	409d      	lsls	r5, r3
    44f6:	432f      	orrs	r7, r5
    44f8:	1e7d      	subs	r5, r7, #1
    44fa:	41af      	sbcs	r7, r5
    44fc:	2400      	movs	r4, #0
    44fe:	430f      	orrs	r7, r1
    4500:	2600      	movs	r6, #0
    4502:	e744      	b.n	438e <__aeabi_dadd+0x17a>
    4504:	002b      	movs	r3, r5
    4506:	0008      	movs	r0, r1
    4508:	3b20      	subs	r3, #32
    450a:	40d8      	lsrs	r0, r3
    450c:	0003      	movs	r3, r0
    450e:	2d20      	cmp	r5, #32
    4510:	d100      	bne.n	4514 <__aeabi_dadd+0x300>
    4512:	e07d      	b.n	4610 <__aeabi_dadd+0x3fc>
    4514:	2040      	movs	r0, #64	; 0x40
    4516:	1b45      	subs	r5, r0, r5
    4518:	40a9      	lsls	r1, r5
    451a:	430a      	orrs	r2, r1
    451c:	1e51      	subs	r1, r2, #1
    451e:	418a      	sbcs	r2, r1
    4520:	2100      	movs	r1, #0
    4522:	431a      	orrs	r2, r3
    4524:	e6c7      	b.n	42b6 <__aeabi_dadd+0xa2>
    4526:	2e00      	cmp	r6, #0
    4528:	d050      	beq.n	45cc <__aeabi_dadd+0x3b8>
    452a:	4e1a      	ldr	r6, [pc, #104]	; (4594 <__aeabi_dadd+0x380>)
    452c:	42b0      	cmp	r0, r6
    452e:	d057      	beq.n	45e0 <__aeabi_dadd+0x3cc>
    4530:	2680      	movs	r6, #128	; 0x80
    4532:	426b      	negs	r3, r5
    4534:	4699      	mov	r9, r3
    4536:	0436      	lsls	r6, r6, #16
    4538:	4334      	orrs	r4, r6
    453a:	464b      	mov	r3, r9
    453c:	2b38      	cmp	r3, #56	; 0x38
    453e:	dd00      	ble.n	4542 <__aeabi_dadd+0x32e>
    4540:	e0d6      	b.n	46f0 <__aeabi_dadd+0x4dc>
    4542:	2b1f      	cmp	r3, #31
    4544:	dd00      	ble.n	4548 <__aeabi_dadd+0x334>
    4546:	e135      	b.n	47b4 <__aeabi_dadd+0x5a0>
    4548:	2620      	movs	r6, #32
    454a:	1af5      	subs	r5, r6, r3
    454c:	0026      	movs	r6, r4
    454e:	40ae      	lsls	r6, r5
    4550:	46b2      	mov	sl, r6
    4552:	003e      	movs	r6, r7
    4554:	40de      	lsrs	r6, r3
    4556:	46ac      	mov	ip, r5
    4558:	0035      	movs	r5, r6
    455a:	4656      	mov	r6, sl
    455c:	432e      	orrs	r6, r5
    455e:	4665      	mov	r5, ip
    4560:	40af      	lsls	r7, r5
    4562:	1e7d      	subs	r5, r7, #1
    4564:	41af      	sbcs	r7, r5
    4566:	40dc      	lsrs	r4, r3
    4568:	4337      	orrs	r7, r6
    456a:	1bd7      	subs	r7, r2, r7
    456c:	42ba      	cmp	r2, r7
    456e:	4192      	sbcs	r2, r2
    4570:	1b0c      	subs	r4, r1, r4
    4572:	4252      	negs	r2, r2
    4574:	1aa4      	subs	r4, r4, r2
    4576:	0006      	movs	r6, r0
    4578:	46d8      	mov	r8, fp
    457a:	e6a3      	b.n	42c4 <__aeabi_dadd+0xb0>
    457c:	4664      	mov	r4, ip
    457e:	4667      	mov	r7, ip
    4580:	432c      	orrs	r4, r5
    4582:	d000      	beq.n	4586 <__aeabi_dadd+0x372>
    4584:	e6a2      	b.n	42cc <__aeabi_dadd+0xb8>
    4586:	2500      	movs	r5, #0
    4588:	2600      	movs	r6, #0
    458a:	2700      	movs	r7, #0
    458c:	e706      	b.n	439c <__aeabi_dadd+0x188>
    458e:	001e      	movs	r6, r3
    4590:	e6c4      	b.n	431c <__aeabi_dadd+0x108>
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	000007ff 	.word	0x000007ff
    4598:	ff7fffff 	.word	0xff7fffff
    459c:	800fffff 	.word	0x800fffff
    45a0:	2b1f      	cmp	r3, #31
    45a2:	dc63      	bgt.n	466c <__aeabi_dadd+0x458>
    45a4:	2020      	movs	r0, #32
    45a6:	1ac3      	subs	r3, r0, r3
    45a8:	0008      	movs	r0, r1
    45aa:	4098      	lsls	r0, r3
    45ac:	469c      	mov	ip, r3
    45ae:	4683      	mov	fp, r0
    45b0:	4653      	mov	r3, sl
    45b2:	0010      	movs	r0, r2
    45b4:	40d8      	lsrs	r0, r3
    45b6:	0003      	movs	r3, r0
    45b8:	4658      	mov	r0, fp
    45ba:	4318      	orrs	r0, r3
    45bc:	4663      	mov	r3, ip
    45be:	409a      	lsls	r2, r3
    45c0:	1e53      	subs	r3, r2, #1
    45c2:	419a      	sbcs	r2, r3
    45c4:	4653      	mov	r3, sl
    45c6:	4302      	orrs	r2, r0
    45c8:	40d9      	lsrs	r1, r3
    45ca:	e703      	b.n	43d4 <__aeabi_dadd+0x1c0>
    45cc:	0026      	movs	r6, r4
    45ce:	433e      	orrs	r6, r7
    45d0:	d006      	beq.n	45e0 <__aeabi_dadd+0x3cc>
    45d2:	43eb      	mvns	r3, r5
    45d4:	4699      	mov	r9, r3
    45d6:	2b00      	cmp	r3, #0
    45d8:	d0c7      	beq.n	456a <__aeabi_dadd+0x356>
    45da:	4e94      	ldr	r6, [pc, #592]	; (482c <__aeabi_dadd+0x618>)
    45dc:	42b0      	cmp	r0, r6
    45de:	d1ac      	bne.n	453a <__aeabi_dadd+0x326>
    45e0:	000c      	movs	r4, r1
    45e2:	0017      	movs	r7, r2
    45e4:	0006      	movs	r6, r0
    45e6:	46d8      	mov	r8, fp
    45e8:	e698      	b.n	431c <__aeabi_dadd+0x108>
    45ea:	4b90      	ldr	r3, [pc, #576]	; (482c <__aeabi_dadd+0x618>)
    45ec:	459a      	cmp	sl, r3
    45ee:	d00b      	beq.n	4608 <__aeabi_dadd+0x3f4>
    45f0:	4682      	mov	sl, r0
    45f2:	e6e7      	b.n	43c4 <__aeabi_dadd+0x1b0>
    45f4:	2800      	cmp	r0, #0
    45f6:	d000      	beq.n	45fa <__aeabi_dadd+0x3e6>
    45f8:	e09e      	b.n	4738 <__aeabi_dadd+0x524>
    45fa:	0018      	movs	r0, r3
    45fc:	4310      	orrs	r0, r2
    45fe:	d100      	bne.n	4602 <__aeabi_dadd+0x3ee>
    4600:	e0e9      	b.n	47d6 <__aeabi_dadd+0x5c2>
    4602:	001c      	movs	r4, r3
    4604:	0017      	movs	r7, r2
    4606:	46d8      	mov	r8, fp
    4608:	4e88      	ldr	r6, [pc, #544]	; (482c <__aeabi_dadd+0x618>)
    460a:	e687      	b.n	431c <__aeabi_dadd+0x108>
    460c:	2500      	movs	r5, #0
    460e:	e772      	b.n	44f6 <__aeabi_dadd+0x2e2>
    4610:	2100      	movs	r1, #0
    4612:	e782      	b.n	451a <__aeabi_dadd+0x306>
    4614:	0023      	movs	r3, r4
    4616:	433b      	orrs	r3, r7
    4618:	2e00      	cmp	r6, #0
    461a:	d000      	beq.n	461e <__aeabi_dadd+0x40a>
    461c:	e0ab      	b.n	4776 <__aeabi_dadd+0x562>
    461e:	2b00      	cmp	r3, #0
    4620:	d100      	bne.n	4624 <__aeabi_dadd+0x410>
    4622:	e0e7      	b.n	47f4 <__aeabi_dadd+0x5e0>
    4624:	000b      	movs	r3, r1
    4626:	4313      	orrs	r3, r2
    4628:	d100      	bne.n	462c <__aeabi_dadd+0x418>
    462a:	e677      	b.n	431c <__aeabi_dadd+0x108>
    462c:	18ba      	adds	r2, r7, r2
    462e:	42ba      	cmp	r2, r7
    4630:	41bf      	sbcs	r7, r7
    4632:	1864      	adds	r4, r4, r1
    4634:	427f      	negs	r7, r7
    4636:	19e4      	adds	r4, r4, r7
    4638:	0223      	lsls	r3, r4, #8
    463a:	d400      	bmi.n	463e <__aeabi_dadd+0x42a>
    463c:	e0f2      	b.n	4824 <__aeabi_dadd+0x610>
    463e:	4b7c      	ldr	r3, [pc, #496]	; (4830 <__aeabi_dadd+0x61c>)
    4640:	0017      	movs	r7, r2
    4642:	401c      	ands	r4, r3
    4644:	0006      	movs	r6, r0
    4646:	e669      	b.n	431c <__aeabi_dadd+0x108>
    4648:	0020      	movs	r0, r4
    464a:	4338      	orrs	r0, r7
    464c:	2e00      	cmp	r6, #0
    464e:	d1d1      	bne.n	45f4 <__aeabi_dadd+0x3e0>
    4650:	2800      	cmp	r0, #0
    4652:	d15b      	bne.n	470c <__aeabi_dadd+0x4f8>
    4654:	001c      	movs	r4, r3
    4656:	4314      	orrs	r4, r2
    4658:	d100      	bne.n	465c <__aeabi_dadd+0x448>
    465a:	e0a8      	b.n	47ae <__aeabi_dadd+0x59a>
    465c:	001c      	movs	r4, r3
    465e:	0017      	movs	r7, r2
    4660:	46d8      	mov	r8, fp
    4662:	e65b      	b.n	431c <__aeabi_dadd+0x108>
    4664:	0006      	movs	r6, r0
    4666:	2400      	movs	r4, #0
    4668:	2700      	movs	r7, #0
    466a:	e697      	b.n	439c <__aeabi_dadd+0x188>
    466c:	4650      	mov	r0, sl
    466e:	000b      	movs	r3, r1
    4670:	3820      	subs	r0, #32
    4672:	40c3      	lsrs	r3, r0
    4674:	4699      	mov	r9, r3
    4676:	4653      	mov	r3, sl
    4678:	2b20      	cmp	r3, #32
    467a:	d100      	bne.n	467e <__aeabi_dadd+0x46a>
    467c:	e095      	b.n	47aa <__aeabi_dadd+0x596>
    467e:	2340      	movs	r3, #64	; 0x40
    4680:	4650      	mov	r0, sl
    4682:	1a1b      	subs	r3, r3, r0
    4684:	4099      	lsls	r1, r3
    4686:	430a      	orrs	r2, r1
    4688:	1e51      	subs	r1, r2, #1
    468a:	418a      	sbcs	r2, r1
    468c:	464b      	mov	r3, r9
    468e:	2100      	movs	r1, #0
    4690:	431a      	orrs	r2, r3
    4692:	e69f      	b.n	43d4 <__aeabi_dadd+0x1c0>
    4694:	2e00      	cmp	r6, #0
    4696:	d130      	bne.n	46fa <__aeabi_dadd+0x4e6>
    4698:	0026      	movs	r6, r4
    469a:	433e      	orrs	r6, r7
    469c:	d067      	beq.n	476e <__aeabi_dadd+0x55a>
    469e:	43db      	mvns	r3, r3
    46a0:	469a      	mov	sl, r3
    46a2:	2b00      	cmp	r3, #0
    46a4:	d01c      	beq.n	46e0 <__aeabi_dadd+0x4cc>
    46a6:	4e61      	ldr	r6, [pc, #388]	; (482c <__aeabi_dadd+0x618>)
    46a8:	42b0      	cmp	r0, r6
    46aa:	d060      	beq.n	476e <__aeabi_dadd+0x55a>
    46ac:	4653      	mov	r3, sl
    46ae:	2b38      	cmp	r3, #56	; 0x38
    46b0:	dd00      	ble.n	46b4 <__aeabi_dadd+0x4a0>
    46b2:	e096      	b.n	47e2 <__aeabi_dadd+0x5ce>
    46b4:	2b1f      	cmp	r3, #31
    46b6:	dd00      	ble.n	46ba <__aeabi_dadd+0x4a6>
    46b8:	e09f      	b.n	47fa <__aeabi_dadd+0x5e6>
    46ba:	2620      	movs	r6, #32
    46bc:	1af3      	subs	r3, r6, r3
    46be:	0026      	movs	r6, r4
    46c0:	409e      	lsls	r6, r3
    46c2:	469c      	mov	ip, r3
    46c4:	46b3      	mov	fp, r6
    46c6:	4653      	mov	r3, sl
    46c8:	003e      	movs	r6, r7
    46ca:	40de      	lsrs	r6, r3
    46cc:	0033      	movs	r3, r6
    46ce:	465e      	mov	r6, fp
    46d0:	431e      	orrs	r6, r3
    46d2:	4663      	mov	r3, ip
    46d4:	409f      	lsls	r7, r3
    46d6:	1e7b      	subs	r3, r7, #1
    46d8:	419f      	sbcs	r7, r3
    46da:	4653      	mov	r3, sl
    46dc:	40dc      	lsrs	r4, r3
    46de:	4337      	orrs	r7, r6
    46e0:	18bf      	adds	r7, r7, r2
    46e2:	4297      	cmp	r7, r2
    46e4:	4192      	sbcs	r2, r2
    46e6:	1864      	adds	r4, r4, r1
    46e8:	4252      	negs	r2, r2
    46ea:	18a4      	adds	r4, r4, r2
    46ec:	0006      	movs	r6, r0
    46ee:	e678      	b.n	43e2 <__aeabi_dadd+0x1ce>
    46f0:	4327      	orrs	r7, r4
    46f2:	1e7c      	subs	r4, r7, #1
    46f4:	41a7      	sbcs	r7, r4
    46f6:	2400      	movs	r4, #0
    46f8:	e737      	b.n	456a <__aeabi_dadd+0x356>
    46fa:	4e4c      	ldr	r6, [pc, #304]	; (482c <__aeabi_dadd+0x618>)
    46fc:	42b0      	cmp	r0, r6
    46fe:	d036      	beq.n	476e <__aeabi_dadd+0x55a>
    4700:	2680      	movs	r6, #128	; 0x80
    4702:	425b      	negs	r3, r3
    4704:	0436      	lsls	r6, r6, #16
    4706:	469a      	mov	sl, r3
    4708:	4334      	orrs	r4, r6
    470a:	e7cf      	b.n	46ac <__aeabi_dadd+0x498>
    470c:	0018      	movs	r0, r3
    470e:	4310      	orrs	r0, r2
    4710:	d100      	bne.n	4714 <__aeabi_dadd+0x500>
    4712:	e603      	b.n	431c <__aeabi_dadd+0x108>
    4714:	1ab8      	subs	r0, r7, r2
    4716:	4684      	mov	ip, r0
    4718:	4567      	cmp	r7, ip
    471a:	41ad      	sbcs	r5, r5
    471c:	1ae0      	subs	r0, r4, r3
    471e:	426d      	negs	r5, r5
    4720:	1b40      	subs	r0, r0, r5
    4722:	0205      	lsls	r5, r0, #8
    4724:	d400      	bmi.n	4728 <__aeabi_dadd+0x514>
    4726:	e62c      	b.n	4382 <__aeabi_dadd+0x16e>
    4728:	1bd7      	subs	r7, r2, r7
    472a:	42ba      	cmp	r2, r7
    472c:	4192      	sbcs	r2, r2
    472e:	1b1c      	subs	r4, r3, r4
    4730:	4252      	negs	r2, r2
    4732:	1aa4      	subs	r4, r4, r2
    4734:	46d8      	mov	r8, fp
    4736:	e5f1      	b.n	431c <__aeabi_dadd+0x108>
    4738:	0018      	movs	r0, r3
    473a:	4310      	orrs	r0, r2
    473c:	d100      	bne.n	4740 <__aeabi_dadd+0x52c>
    473e:	e763      	b.n	4608 <__aeabi_dadd+0x3f4>
    4740:	08f8      	lsrs	r0, r7, #3
    4742:	0767      	lsls	r7, r4, #29
    4744:	4307      	orrs	r7, r0
    4746:	2080      	movs	r0, #128	; 0x80
    4748:	08e4      	lsrs	r4, r4, #3
    474a:	0300      	lsls	r0, r0, #12
    474c:	4204      	tst	r4, r0
    474e:	d008      	beq.n	4762 <__aeabi_dadd+0x54e>
    4750:	08dd      	lsrs	r5, r3, #3
    4752:	4205      	tst	r5, r0
    4754:	d105      	bne.n	4762 <__aeabi_dadd+0x54e>
    4756:	08d2      	lsrs	r2, r2, #3
    4758:	0759      	lsls	r1, r3, #29
    475a:	4311      	orrs	r1, r2
    475c:	000f      	movs	r7, r1
    475e:	002c      	movs	r4, r5
    4760:	46d8      	mov	r8, fp
    4762:	0f7b      	lsrs	r3, r7, #29
    4764:	00e4      	lsls	r4, r4, #3
    4766:	431c      	orrs	r4, r3
    4768:	00ff      	lsls	r7, r7, #3
    476a:	4e30      	ldr	r6, [pc, #192]	; (482c <__aeabi_dadd+0x618>)
    476c:	e5d6      	b.n	431c <__aeabi_dadd+0x108>
    476e:	000c      	movs	r4, r1
    4770:	0017      	movs	r7, r2
    4772:	0006      	movs	r6, r0
    4774:	e5d2      	b.n	431c <__aeabi_dadd+0x108>
    4776:	2b00      	cmp	r3, #0
    4778:	d038      	beq.n	47ec <__aeabi_dadd+0x5d8>
    477a:	000b      	movs	r3, r1
    477c:	4313      	orrs	r3, r2
    477e:	d100      	bne.n	4782 <__aeabi_dadd+0x56e>
    4780:	e742      	b.n	4608 <__aeabi_dadd+0x3f4>
    4782:	08f8      	lsrs	r0, r7, #3
    4784:	0767      	lsls	r7, r4, #29
    4786:	4307      	orrs	r7, r0
    4788:	2080      	movs	r0, #128	; 0x80
    478a:	08e4      	lsrs	r4, r4, #3
    478c:	0300      	lsls	r0, r0, #12
    478e:	4204      	tst	r4, r0
    4790:	d0e7      	beq.n	4762 <__aeabi_dadd+0x54e>
    4792:	08cb      	lsrs	r3, r1, #3
    4794:	4203      	tst	r3, r0
    4796:	d1e4      	bne.n	4762 <__aeabi_dadd+0x54e>
    4798:	08d2      	lsrs	r2, r2, #3
    479a:	0749      	lsls	r1, r1, #29
    479c:	4311      	orrs	r1, r2
    479e:	000f      	movs	r7, r1
    47a0:	001c      	movs	r4, r3
    47a2:	e7de      	b.n	4762 <__aeabi_dadd+0x54e>
    47a4:	2700      	movs	r7, #0
    47a6:	2400      	movs	r4, #0
    47a8:	e5d5      	b.n	4356 <__aeabi_dadd+0x142>
    47aa:	2100      	movs	r1, #0
    47ac:	e76b      	b.n	4686 <__aeabi_dadd+0x472>
    47ae:	2500      	movs	r5, #0
    47b0:	2700      	movs	r7, #0
    47b2:	e5f3      	b.n	439c <__aeabi_dadd+0x188>
    47b4:	464e      	mov	r6, r9
    47b6:	0025      	movs	r5, r4
    47b8:	3e20      	subs	r6, #32
    47ba:	40f5      	lsrs	r5, r6
    47bc:	464b      	mov	r3, r9
    47be:	002e      	movs	r6, r5
    47c0:	2b20      	cmp	r3, #32
    47c2:	d02d      	beq.n	4820 <__aeabi_dadd+0x60c>
    47c4:	2540      	movs	r5, #64	; 0x40
    47c6:	1aed      	subs	r5, r5, r3
    47c8:	40ac      	lsls	r4, r5
    47ca:	4327      	orrs	r7, r4
    47cc:	1e7c      	subs	r4, r7, #1
    47ce:	41a7      	sbcs	r7, r4
    47d0:	2400      	movs	r4, #0
    47d2:	4337      	orrs	r7, r6
    47d4:	e6c9      	b.n	456a <__aeabi_dadd+0x356>
    47d6:	2480      	movs	r4, #128	; 0x80
    47d8:	2500      	movs	r5, #0
    47da:	0324      	lsls	r4, r4, #12
    47dc:	4e13      	ldr	r6, [pc, #76]	; (482c <__aeabi_dadd+0x618>)
    47de:	2700      	movs	r7, #0
    47e0:	e5dc      	b.n	439c <__aeabi_dadd+0x188>
    47e2:	4327      	orrs	r7, r4
    47e4:	1e7c      	subs	r4, r7, #1
    47e6:	41a7      	sbcs	r7, r4
    47e8:	2400      	movs	r4, #0
    47ea:	e779      	b.n	46e0 <__aeabi_dadd+0x4cc>
    47ec:	000c      	movs	r4, r1
    47ee:	0017      	movs	r7, r2
    47f0:	4e0e      	ldr	r6, [pc, #56]	; (482c <__aeabi_dadd+0x618>)
    47f2:	e593      	b.n	431c <__aeabi_dadd+0x108>
    47f4:	000c      	movs	r4, r1
    47f6:	0017      	movs	r7, r2
    47f8:	e590      	b.n	431c <__aeabi_dadd+0x108>
    47fa:	4656      	mov	r6, sl
    47fc:	0023      	movs	r3, r4
    47fe:	3e20      	subs	r6, #32
    4800:	40f3      	lsrs	r3, r6
    4802:	4699      	mov	r9, r3
    4804:	4653      	mov	r3, sl
    4806:	2b20      	cmp	r3, #32
    4808:	d00e      	beq.n	4828 <__aeabi_dadd+0x614>
    480a:	2340      	movs	r3, #64	; 0x40
    480c:	4656      	mov	r6, sl
    480e:	1b9b      	subs	r3, r3, r6
    4810:	409c      	lsls	r4, r3
    4812:	4327      	orrs	r7, r4
    4814:	1e7c      	subs	r4, r7, #1
    4816:	41a7      	sbcs	r7, r4
    4818:	464b      	mov	r3, r9
    481a:	2400      	movs	r4, #0
    481c:	431f      	orrs	r7, r3
    481e:	e75f      	b.n	46e0 <__aeabi_dadd+0x4cc>
    4820:	2400      	movs	r4, #0
    4822:	e7d2      	b.n	47ca <__aeabi_dadd+0x5b6>
    4824:	0017      	movs	r7, r2
    4826:	e5b2      	b.n	438e <__aeabi_dadd+0x17a>
    4828:	2400      	movs	r4, #0
    482a:	e7f2      	b.n	4812 <__aeabi_dadd+0x5fe>
    482c:	000007ff 	.word	0x000007ff
    4830:	ff7fffff 	.word	0xff7fffff

00004834 <__aeabi_ddiv>:
    4834:	b5f0      	push	{r4, r5, r6, r7, lr}
    4836:	4657      	mov	r7, sl
    4838:	4645      	mov	r5, r8
    483a:	46de      	mov	lr, fp
    483c:	464e      	mov	r6, r9
    483e:	b5e0      	push	{r5, r6, r7, lr}
    4840:	004c      	lsls	r4, r1, #1
    4842:	030e      	lsls	r6, r1, #12
    4844:	b087      	sub	sp, #28
    4846:	4683      	mov	fp, r0
    4848:	4692      	mov	sl, r2
    484a:	001d      	movs	r5, r3
    484c:	4680      	mov	r8, r0
    484e:	0b36      	lsrs	r6, r6, #12
    4850:	0d64      	lsrs	r4, r4, #21
    4852:	0fcf      	lsrs	r7, r1, #31
    4854:	2c00      	cmp	r4, #0
    4856:	d04f      	beq.n	48f8 <__aeabi_ddiv+0xc4>
    4858:	4b6f      	ldr	r3, [pc, #444]	; (4a18 <__aeabi_ddiv+0x1e4>)
    485a:	429c      	cmp	r4, r3
    485c:	d035      	beq.n	48ca <__aeabi_ddiv+0x96>
    485e:	2380      	movs	r3, #128	; 0x80
    4860:	0f42      	lsrs	r2, r0, #29
    4862:	041b      	lsls	r3, r3, #16
    4864:	00f6      	lsls	r6, r6, #3
    4866:	4313      	orrs	r3, r2
    4868:	4333      	orrs	r3, r6
    486a:	4699      	mov	r9, r3
    486c:	00c3      	lsls	r3, r0, #3
    486e:	4698      	mov	r8, r3
    4870:	4b6a      	ldr	r3, [pc, #424]	; (4a1c <__aeabi_ddiv+0x1e8>)
    4872:	2600      	movs	r6, #0
    4874:	469c      	mov	ip, r3
    4876:	2300      	movs	r3, #0
    4878:	4464      	add	r4, ip
    487a:	9303      	str	r3, [sp, #12]
    487c:	032b      	lsls	r3, r5, #12
    487e:	0b1b      	lsrs	r3, r3, #12
    4880:	469b      	mov	fp, r3
    4882:	006b      	lsls	r3, r5, #1
    4884:	0fed      	lsrs	r5, r5, #31
    4886:	4650      	mov	r0, sl
    4888:	0d5b      	lsrs	r3, r3, #21
    488a:	9501      	str	r5, [sp, #4]
    488c:	d05e      	beq.n	494c <__aeabi_ddiv+0x118>
    488e:	4a62      	ldr	r2, [pc, #392]	; (4a18 <__aeabi_ddiv+0x1e4>)
    4890:	4293      	cmp	r3, r2
    4892:	d053      	beq.n	493c <__aeabi_ddiv+0x108>
    4894:	465a      	mov	r2, fp
    4896:	00d1      	lsls	r1, r2, #3
    4898:	2280      	movs	r2, #128	; 0x80
    489a:	0f40      	lsrs	r0, r0, #29
    489c:	0412      	lsls	r2, r2, #16
    489e:	4302      	orrs	r2, r0
    48a0:	430a      	orrs	r2, r1
    48a2:	4693      	mov	fp, r2
    48a4:	4652      	mov	r2, sl
    48a6:	00d1      	lsls	r1, r2, #3
    48a8:	4a5c      	ldr	r2, [pc, #368]	; (4a1c <__aeabi_ddiv+0x1e8>)
    48aa:	4694      	mov	ip, r2
    48ac:	2200      	movs	r2, #0
    48ae:	4463      	add	r3, ip
    48b0:	0038      	movs	r0, r7
    48b2:	4068      	eors	r0, r5
    48b4:	4684      	mov	ip, r0
    48b6:	9002      	str	r0, [sp, #8]
    48b8:	1ae4      	subs	r4, r4, r3
    48ba:	4316      	orrs	r6, r2
    48bc:	2e0f      	cmp	r6, #15
    48be:	d900      	bls.n	48c2 <__aeabi_ddiv+0x8e>
    48c0:	e0b4      	b.n	4a2c <__aeabi_ddiv+0x1f8>
    48c2:	4b57      	ldr	r3, [pc, #348]	; (4a20 <__aeabi_ddiv+0x1ec>)
    48c4:	00b6      	lsls	r6, r6, #2
    48c6:	599b      	ldr	r3, [r3, r6]
    48c8:	469f      	mov	pc, r3
    48ca:	0003      	movs	r3, r0
    48cc:	4333      	orrs	r3, r6
    48ce:	4699      	mov	r9, r3
    48d0:	d16c      	bne.n	49ac <__aeabi_ddiv+0x178>
    48d2:	2300      	movs	r3, #0
    48d4:	4698      	mov	r8, r3
    48d6:	3302      	adds	r3, #2
    48d8:	2608      	movs	r6, #8
    48da:	9303      	str	r3, [sp, #12]
    48dc:	e7ce      	b.n	487c <__aeabi_ddiv+0x48>
    48de:	46cb      	mov	fp, r9
    48e0:	4641      	mov	r1, r8
    48e2:	9a03      	ldr	r2, [sp, #12]
    48e4:	9701      	str	r7, [sp, #4]
    48e6:	2a02      	cmp	r2, #2
    48e8:	d165      	bne.n	49b6 <__aeabi_ddiv+0x182>
    48ea:	9b01      	ldr	r3, [sp, #4]
    48ec:	4c4a      	ldr	r4, [pc, #296]	; (4a18 <__aeabi_ddiv+0x1e4>)
    48ee:	469c      	mov	ip, r3
    48f0:	2300      	movs	r3, #0
    48f2:	2200      	movs	r2, #0
    48f4:	4698      	mov	r8, r3
    48f6:	e06b      	b.n	49d0 <__aeabi_ddiv+0x19c>
    48f8:	0003      	movs	r3, r0
    48fa:	4333      	orrs	r3, r6
    48fc:	4699      	mov	r9, r3
    48fe:	d04e      	beq.n	499e <__aeabi_ddiv+0x16a>
    4900:	2e00      	cmp	r6, #0
    4902:	d100      	bne.n	4906 <__aeabi_ddiv+0xd2>
    4904:	e1bc      	b.n	4c80 <__aeabi_ddiv+0x44c>
    4906:	0030      	movs	r0, r6
    4908:	f001 f9ca 	bl	5ca0 <__clzsi2>
    490c:	0003      	movs	r3, r0
    490e:	3b0b      	subs	r3, #11
    4910:	2b1c      	cmp	r3, #28
    4912:	dd00      	ble.n	4916 <__aeabi_ddiv+0xe2>
    4914:	e1ac      	b.n	4c70 <__aeabi_ddiv+0x43c>
    4916:	221d      	movs	r2, #29
    4918:	1ad3      	subs	r3, r2, r3
    491a:	465a      	mov	r2, fp
    491c:	0001      	movs	r1, r0
    491e:	40da      	lsrs	r2, r3
    4920:	3908      	subs	r1, #8
    4922:	408e      	lsls	r6, r1
    4924:	0013      	movs	r3, r2
    4926:	4333      	orrs	r3, r6
    4928:	4699      	mov	r9, r3
    492a:	465b      	mov	r3, fp
    492c:	408b      	lsls	r3, r1
    492e:	4698      	mov	r8, r3
    4930:	2300      	movs	r3, #0
    4932:	4c3c      	ldr	r4, [pc, #240]	; (4a24 <__aeabi_ddiv+0x1f0>)
    4934:	2600      	movs	r6, #0
    4936:	1a24      	subs	r4, r4, r0
    4938:	9303      	str	r3, [sp, #12]
    493a:	e79f      	b.n	487c <__aeabi_ddiv+0x48>
    493c:	4651      	mov	r1, sl
    493e:	465a      	mov	r2, fp
    4940:	4311      	orrs	r1, r2
    4942:	d129      	bne.n	4998 <__aeabi_ddiv+0x164>
    4944:	2200      	movs	r2, #0
    4946:	4693      	mov	fp, r2
    4948:	3202      	adds	r2, #2
    494a:	e7b1      	b.n	48b0 <__aeabi_ddiv+0x7c>
    494c:	4659      	mov	r1, fp
    494e:	4301      	orrs	r1, r0
    4950:	d01e      	beq.n	4990 <__aeabi_ddiv+0x15c>
    4952:	465b      	mov	r3, fp
    4954:	2b00      	cmp	r3, #0
    4956:	d100      	bne.n	495a <__aeabi_ddiv+0x126>
    4958:	e19e      	b.n	4c98 <__aeabi_ddiv+0x464>
    495a:	4658      	mov	r0, fp
    495c:	f001 f9a0 	bl	5ca0 <__clzsi2>
    4960:	0003      	movs	r3, r0
    4962:	3b0b      	subs	r3, #11
    4964:	2b1c      	cmp	r3, #28
    4966:	dd00      	ble.n	496a <__aeabi_ddiv+0x136>
    4968:	e18f      	b.n	4c8a <__aeabi_ddiv+0x456>
    496a:	0002      	movs	r2, r0
    496c:	4659      	mov	r1, fp
    496e:	3a08      	subs	r2, #8
    4970:	4091      	lsls	r1, r2
    4972:	468b      	mov	fp, r1
    4974:	211d      	movs	r1, #29
    4976:	1acb      	subs	r3, r1, r3
    4978:	4651      	mov	r1, sl
    497a:	40d9      	lsrs	r1, r3
    497c:	000b      	movs	r3, r1
    497e:	4659      	mov	r1, fp
    4980:	430b      	orrs	r3, r1
    4982:	4651      	mov	r1, sl
    4984:	469b      	mov	fp, r3
    4986:	4091      	lsls	r1, r2
    4988:	4b26      	ldr	r3, [pc, #152]	; (4a24 <__aeabi_ddiv+0x1f0>)
    498a:	2200      	movs	r2, #0
    498c:	1a1b      	subs	r3, r3, r0
    498e:	e78f      	b.n	48b0 <__aeabi_ddiv+0x7c>
    4990:	2300      	movs	r3, #0
    4992:	2201      	movs	r2, #1
    4994:	469b      	mov	fp, r3
    4996:	e78b      	b.n	48b0 <__aeabi_ddiv+0x7c>
    4998:	4651      	mov	r1, sl
    499a:	2203      	movs	r2, #3
    499c:	e788      	b.n	48b0 <__aeabi_ddiv+0x7c>
    499e:	2300      	movs	r3, #0
    49a0:	4698      	mov	r8, r3
    49a2:	3301      	adds	r3, #1
    49a4:	2604      	movs	r6, #4
    49a6:	2400      	movs	r4, #0
    49a8:	9303      	str	r3, [sp, #12]
    49aa:	e767      	b.n	487c <__aeabi_ddiv+0x48>
    49ac:	2303      	movs	r3, #3
    49ae:	46b1      	mov	r9, r6
    49b0:	9303      	str	r3, [sp, #12]
    49b2:	260c      	movs	r6, #12
    49b4:	e762      	b.n	487c <__aeabi_ddiv+0x48>
    49b6:	2a03      	cmp	r2, #3
    49b8:	d100      	bne.n	49bc <__aeabi_ddiv+0x188>
    49ba:	e25c      	b.n	4e76 <__aeabi_ddiv+0x642>
    49bc:	9b01      	ldr	r3, [sp, #4]
    49be:	2a01      	cmp	r2, #1
    49c0:	d000      	beq.n	49c4 <__aeabi_ddiv+0x190>
    49c2:	e1e4      	b.n	4d8e <__aeabi_ddiv+0x55a>
    49c4:	4013      	ands	r3, r2
    49c6:	469c      	mov	ip, r3
    49c8:	2300      	movs	r3, #0
    49ca:	2400      	movs	r4, #0
    49cc:	2200      	movs	r2, #0
    49ce:	4698      	mov	r8, r3
    49d0:	2100      	movs	r1, #0
    49d2:	0312      	lsls	r2, r2, #12
    49d4:	0b13      	lsrs	r3, r2, #12
    49d6:	0d0a      	lsrs	r2, r1, #20
    49d8:	0512      	lsls	r2, r2, #20
    49da:	431a      	orrs	r2, r3
    49dc:	0523      	lsls	r3, r4, #20
    49de:	4c12      	ldr	r4, [pc, #72]	; (4a28 <__aeabi_ddiv+0x1f4>)
    49e0:	4640      	mov	r0, r8
    49e2:	4022      	ands	r2, r4
    49e4:	4313      	orrs	r3, r2
    49e6:	4662      	mov	r2, ip
    49e8:	005b      	lsls	r3, r3, #1
    49ea:	07d2      	lsls	r2, r2, #31
    49ec:	085b      	lsrs	r3, r3, #1
    49ee:	4313      	orrs	r3, r2
    49f0:	0019      	movs	r1, r3
    49f2:	b007      	add	sp, #28
    49f4:	bc3c      	pop	{r2, r3, r4, r5}
    49f6:	4690      	mov	r8, r2
    49f8:	4699      	mov	r9, r3
    49fa:	46a2      	mov	sl, r4
    49fc:	46ab      	mov	fp, r5
    49fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a00:	2300      	movs	r3, #0
    4a02:	2280      	movs	r2, #128	; 0x80
    4a04:	469c      	mov	ip, r3
    4a06:	0312      	lsls	r2, r2, #12
    4a08:	4698      	mov	r8, r3
    4a0a:	4c03      	ldr	r4, [pc, #12]	; (4a18 <__aeabi_ddiv+0x1e4>)
    4a0c:	e7e0      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4a0e:	2300      	movs	r3, #0
    4a10:	4c01      	ldr	r4, [pc, #4]	; (4a18 <__aeabi_ddiv+0x1e4>)
    4a12:	2200      	movs	r2, #0
    4a14:	4698      	mov	r8, r3
    4a16:	e7db      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4a18:	000007ff 	.word	0x000007ff
    4a1c:	fffffc01 	.word	0xfffffc01
    4a20:	00006124 	.word	0x00006124
    4a24:	fffffc0d 	.word	0xfffffc0d
    4a28:	800fffff 	.word	0x800fffff
    4a2c:	45d9      	cmp	r9, fp
    4a2e:	d900      	bls.n	4a32 <__aeabi_ddiv+0x1fe>
    4a30:	e139      	b.n	4ca6 <__aeabi_ddiv+0x472>
    4a32:	d100      	bne.n	4a36 <__aeabi_ddiv+0x202>
    4a34:	e134      	b.n	4ca0 <__aeabi_ddiv+0x46c>
    4a36:	2300      	movs	r3, #0
    4a38:	4646      	mov	r6, r8
    4a3a:	464d      	mov	r5, r9
    4a3c:	469a      	mov	sl, r3
    4a3e:	3c01      	subs	r4, #1
    4a40:	465b      	mov	r3, fp
    4a42:	0e0a      	lsrs	r2, r1, #24
    4a44:	021b      	lsls	r3, r3, #8
    4a46:	431a      	orrs	r2, r3
    4a48:	020b      	lsls	r3, r1, #8
    4a4a:	0c17      	lsrs	r7, r2, #16
    4a4c:	9303      	str	r3, [sp, #12]
    4a4e:	0413      	lsls	r3, r2, #16
    4a50:	0c1b      	lsrs	r3, r3, #16
    4a52:	0039      	movs	r1, r7
    4a54:	0028      	movs	r0, r5
    4a56:	4690      	mov	r8, r2
    4a58:	9301      	str	r3, [sp, #4]
    4a5a:	f7ff f9e9 	bl	3e30 <__udivsi3>
    4a5e:	0002      	movs	r2, r0
    4a60:	9b01      	ldr	r3, [sp, #4]
    4a62:	4683      	mov	fp, r0
    4a64:	435a      	muls	r2, r3
    4a66:	0028      	movs	r0, r5
    4a68:	0039      	movs	r1, r7
    4a6a:	4691      	mov	r9, r2
    4a6c:	f7ff fa66 	bl	3f3c <__aeabi_uidivmod>
    4a70:	0c35      	lsrs	r5, r6, #16
    4a72:	0409      	lsls	r1, r1, #16
    4a74:	430d      	orrs	r5, r1
    4a76:	45a9      	cmp	r9, r5
    4a78:	d90d      	bls.n	4a96 <__aeabi_ddiv+0x262>
    4a7a:	465b      	mov	r3, fp
    4a7c:	4445      	add	r5, r8
    4a7e:	3b01      	subs	r3, #1
    4a80:	45a8      	cmp	r8, r5
    4a82:	d900      	bls.n	4a86 <__aeabi_ddiv+0x252>
    4a84:	e13a      	b.n	4cfc <__aeabi_ddiv+0x4c8>
    4a86:	45a9      	cmp	r9, r5
    4a88:	d800      	bhi.n	4a8c <__aeabi_ddiv+0x258>
    4a8a:	e137      	b.n	4cfc <__aeabi_ddiv+0x4c8>
    4a8c:	2302      	movs	r3, #2
    4a8e:	425b      	negs	r3, r3
    4a90:	469c      	mov	ip, r3
    4a92:	4445      	add	r5, r8
    4a94:	44e3      	add	fp, ip
    4a96:	464b      	mov	r3, r9
    4a98:	1aeb      	subs	r3, r5, r3
    4a9a:	0039      	movs	r1, r7
    4a9c:	0018      	movs	r0, r3
    4a9e:	9304      	str	r3, [sp, #16]
    4aa0:	f7ff f9c6 	bl	3e30 <__udivsi3>
    4aa4:	9b01      	ldr	r3, [sp, #4]
    4aa6:	0005      	movs	r5, r0
    4aa8:	4343      	muls	r3, r0
    4aaa:	0039      	movs	r1, r7
    4aac:	9804      	ldr	r0, [sp, #16]
    4aae:	4699      	mov	r9, r3
    4ab0:	f7ff fa44 	bl	3f3c <__aeabi_uidivmod>
    4ab4:	0433      	lsls	r3, r6, #16
    4ab6:	0409      	lsls	r1, r1, #16
    4ab8:	0c1b      	lsrs	r3, r3, #16
    4aba:	430b      	orrs	r3, r1
    4abc:	4599      	cmp	r9, r3
    4abe:	d909      	bls.n	4ad4 <__aeabi_ddiv+0x2a0>
    4ac0:	4443      	add	r3, r8
    4ac2:	1e6a      	subs	r2, r5, #1
    4ac4:	4598      	cmp	r8, r3
    4ac6:	d900      	bls.n	4aca <__aeabi_ddiv+0x296>
    4ac8:	e11a      	b.n	4d00 <__aeabi_ddiv+0x4cc>
    4aca:	4599      	cmp	r9, r3
    4acc:	d800      	bhi.n	4ad0 <__aeabi_ddiv+0x29c>
    4ace:	e117      	b.n	4d00 <__aeabi_ddiv+0x4cc>
    4ad0:	3d02      	subs	r5, #2
    4ad2:	4443      	add	r3, r8
    4ad4:	464a      	mov	r2, r9
    4ad6:	1a9b      	subs	r3, r3, r2
    4ad8:	465a      	mov	r2, fp
    4ada:	0412      	lsls	r2, r2, #16
    4adc:	432a      	orrs	r2, r5
    4ade:	9903      	ldr	r1, [sp, #12]
    4ae0:	4693      	mov	fp, r2
    4ae2:	0c10      	lsrs	r0, r2, #16
    4ae4:	0c0a      	lsrs	r2, r1, #16
    4ae6:	4691      	mov	r9, r2
    4ae8:	0409      	lsls	r1, r1, #16
    4aea:	465a      	mov	r2, fp
    4aec:	0c09      	lsrs	r1, r1, #16
    4aee:	464e      	mov	r6, r9
    4af0:	000d      	movs	r5, r1
    4af2:	0412      	lsls	r2, r2, #16
    4af4:	0c12      	lsrs	r2, r2, #16
    4af6:	4345      	muls	r5, r0
    4af8:	9105      	str	r1, [sp, #20]
    4afa:	4351      	muls	r1, r2
    4afc:	4372      	muls	r2, r6
    4afe:	4370      	muls	r0, r6
    4b00:	1952      	adds	r2, r2, r5
    4b02:	0c0e      	lsrs	r6, r1, #16
    4b04:	18b2      	adds	r2, r6, r2
    4b06:	4295      	cmp	r5, r2
    4b08:	d903      	bls.n	4b12 <__aeabi_ddiv+0x2de>
    4b0a:	2580      	movs	r5, #128	; 0x80
    4b0c:	026d      	lsls	r5, r5, #9
    4b0e:	46ac      	mov	ip, r5
    4b10:	4460      	add	r0, ip
    4b12:	0c15      	lsrs	r5, r2, #16
    4b14:	0409      	lsls	r1, r1, #16
    4b16:	0412      	lsls	r2, r2, #16
    4b18:	0c09      	lsrs	r1, r1, #16
    4b1a:	1828      	adds	r0, r5, r0
    4b1c:	1852      	adds	r2, r2, r1
    4b1e:	4283      	cmp	r3, r0
    4b20:	d200      	bcs.n	4b24 <__aeabi_ddiv+0x2f0>
    4b22:	e0ce      	b.n	4cc2 <__aeabi_ddiv+0x48e>
    4b24:	d100      	bne.n	4b28 <__aeabi_ddiv+0x2f4>
    4b26:	e0c8      	b.n	4cba <__aeabi_ddiv+0x486>
    4b28:	1a1d      	subs	r5, r3, r0
    4b2a:	4653      	mov	r3, sl
    4b2c:	1a9e      	subs	r6, r3, r2
    4b2e:	45b2      	cmp	sl, r6
    4b30:	4192      	sbcs	r2, r2
    4b32:	4252      	negs	r2, r2
    4b34:	1aab      	subs	r3, r5, r2
    4b36:	469a      	mov	sl, r3
    4b38:	4598      	cmp	r8, r3
    4b3a:	d100      	bne.n	4b3e <__aeabi_ddiv+0x30a>
    4b3c:	e117      	b.n	4d6e <__aeabi_ddiv+0x53a>
    4b3e:	0039      	movs	r1, r7
    4b40:	0018      	movs	r0, r3
    4b42:	f7ff f975 	bl	3e30 <__udivsi3>
    4b46:	9b01      	ldr	r3, [sp, #4]
    4b48:	0005      	movs	r5, r0
    4b4a:	4343      	muls	r3, r0
    4b4c:	0039      	movs	r1, r7
    4b4e:	4650      	mov	r0, sl
    4b50:	9304      	str	r3, [sp, #16]
    4b52:	f7ff f9f3 	bl	3f3c <__aeabi_uidivmod>
    4b56:	9804      	ldr	r0, [sp, #16]
    4b58:	040b      	lsls	r3, r1, #16
    4b5a:	0c31      	lsrs	r1, r6, #16
    4b5c:	4319      	orrs	r1, r3
    4b5e:	4288      	cmp	r0, r1
    4b60:	d909      	bls.n	4b76 <__aeabi_ddiv+0x342>
    4b62:	4441      	add	r1, r8
    4b64:	1e6b      	subs	r3, r5, #1
    4b66:	4588      	cmp	r8, r1
    4b68:	d900      	bls.n	4b6c <__aeabi_ddiv+0x338>
    4b6a:	e107      	b.n	4d7c <__aeabi_ddiv+0x548>
    4b6c:	4288      	cmp	r0, r1
    4b6e:	d800      	bhi.n	4b72 <__aeabi_ddiv+0x33e>
    4b70:	e104      	b.n	4d7c <__aeabi_ddiv+0x548>
    4b72:	3d02      	subs	r5, #2
    4b74:	4441      	add	r1, r8
    4b76:	9b04      	ldr	r3, [sp, #16]
    4b78:	1acb      	subs	r3, r1, r3
    4b7a:	0018      	movs	r0, r3
    4b7c:	0039      	movs	r1, r7
    4b7e:	9304      	str	r3, [sp, #16]
    4b80:	f7ff f956 	bl	3e30 <__udivsi3>
    4b84:	9b01      	ldr	r3, [sp, #4]
    4b86:	4682      	mov	sl, r0
    4b88:	4343      	muls	r3, r0
    4b8a:	0039      	movs	r1, r7
    4b8c:	9804      	ldr	r0, [sp, #16]
    4b8e:	9301      	str	r3, [sp, #4]
    4b90:	f7ff f9d4 	bl	3f3c <__aeabi_uidivmod>
    4b94:	9801      	ldr	r0, [sp, #4]
    4b96:	040b      	lsls	r3, r1, #16
    4b98:	0431      	lsls	r1, r6, #16
    4b9a:	0c09      	lsrs	r1, r1, #16
    4b9c:	4319      	orrs	r1, r3
    4b9e:	4288      	cmp	r0, r1
    4ba0:	d90d      	bls.n	4bbe <__aeabi_ddiv+0x38a>
    4ba2:	4653      	mov	r3, sl
    4ba4:	4441      	add	r1, r8
    4ba6:	3b01      	subs	r3, #1
    4ba8:	4588      	cmp	r8, r1
    4baa:	d900      	bls.n	4bae <__aeabi_ddiv+0x37a>
    4bac:	e0e8      	b.n	4d80 <__aeabi_ddiv+0x54c>
    4bae:	4288      	cmp	r0, r1
    4bb0:	d800      	bhi.n	4bb4 <__aeabi_ddiv+0x380>
    4bb2:	e0e5      	b.n	4d80 <__aeabi_ddiv+0x54c>
    4bb4:	2302      	movs	r3, #2
    4bb6:	425b      	negs	r3, r3
    4bb8:	469c      	mov	ip, r3
    4bba:	4441      	add	r1, r8
    4bbc:	44e2      	add	sl, ip
    4bbe:	9b01      	ldr	r3, [sp, #4]
    4bc0:	042d      	lsls	r5, r5, #16
    4bc2:	1ace      	subs	r6, r1, r3
    4bc4:	4651      	mov	r1, sl
    4bc6:	4329      	orrs	r1, r5
    4bc8:	9d05      	ldr	r5, [sp, #20]
    4bca:	464f      	mov	r7, r9
    4bcc:	002a      	movs	r2, r5
    4bce:	040b      	lsls	r3, r1, #16
    4bd0:	0c08      	lsrs	r0, r1, #16
    4bd2:	0c1b      	lsrs	r3, r3, #16
    4bd4:	435a      	muls	r2, r3
    4bd6:	4345      	muls	r5, r0
    4bd8:	437b      	muls	r3, r7
    4bda:	4378      	muls	r0, r7
    4bdc:	195b      	adds	r3, r3, r5
    4bde:	0c17      	lsrs	r7, r2, #16
    4be0:	18fb      	adds	r3, r7, r3
    4be2:	429d      	cmp	r5, r3
    4be4:	d903      	bls.n	4bee <__aeabi_ddiv+0x3ba>
    4be6:	2580      	movs	r5, #128	; 0x80
    4be8:	026d      	lsls	r5, r5, #9
    4bea:	46ac      	mov	ip, r5
    4bec:	4460      	add	r0, ip
    4bee:	0c1d      	lsrs	r5, r3, #16
    4bf0:	0412      	lsls	r2, r2, #16
    4bf2:	041b      	lsls	r3, r3, #16
    4bf4:	0c12      	lsrs	r2, r2, #16
    4bf6:	1828      	adds	r0, r5, r0
    4bf8:	189b      	adds	r3, r3, r2
    4bfa:	4286      	cmp	r6, r0
    4bfc:	d200      	bcs.n	4c00 <__aeabi_ddiv+0x3cc>
    4bfe:	e093      	b.n	4d28 <__aeabi_ddiv+0x4f4>
    4c00:	d100      	bne.n	4c04 <__aeabi_ddiv+0x3d0>
    4c02:	e08e      	b.n	4d22 <__aeabi_ddiv+0x4ee>
    4c04:	2301      	movs	r3, #1
    4c06:	4319      	orrs	r1, r3
    4c08:	4ba0      	ldr	r3, [pc, #640]	; (4e8c <__aeabi_ddiv+0x658>)
    4c0a:	18e3      	adds	r3, r4, r3
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	dc00      	bgt.n	4c12 <__aeabi_ddiv+0x3de>
    4c10:	e099      	b.n	4d46 <__aeabi_ddiv+0x512>
    4c12:	074a      	lsls	r2, r1, #29
    4c14:	d000      	beq.n	4c18 <__aeabi_ddiv+0x3e4>
    4c16:	e09e      	b.n	4d56 <__aeabi_ddiv+0x522>
    4c18:	465a      	mov	r2, fp
    4c1a:	01d2      	lsls	r2, r2, #7
    4c1c:	d506      	bpl.n	4c2c <__aeabi_ddiv+0x3f8>
    4c1e:	465a      	mov	r2, fp
    4c20:	4b9b      	ldr	r3, [pc, #620]	; (4e90 <__aeabi_ddiv+0x65c>)
    4c22:	401a      	ands	r2, r3
    4c24:	2380      	movs	r3, #128	; 0x80
    4c26:	4693      	mov	fp, r2
    4c28:	00db      	lsls	r3, r3, #3
    4c2a:	18e3      	adds	r3, r4, r3
    4c2c:	4a99      	ldr	r2, [pc, #612]	; (4e94 <__aeabi_ddiv+0x660>)
    4c2e:	4293      	cmp	r3, r2
    4c30:	dd68      	ble.n	4d04 <__aeabi_ddiv+0x4d0>
    4c32:	2301      	movs	r3, #1
    4c34:	9a02      	ldr	r2, [sp, #8]
    4c36:	4c98      	ldr	r4, [pc, #608]	; (4e98 <__aeabi_ddiv+0x664>)
    4c38:	401a      	ands	r2, r3
    4c3a:	2300      	movs	r3, #0
    4c3c:	4694      	mov	ip, r2
    4c3e:	4698      	mov	r8, r3
    4c40:	2200      	movs	r2, #0
    4c42:	e6c5      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4c44:	2280      	movs	r2, #128	; 0x80
    4c46:	464b      	mov	r3, r9
    4c48:	0312      	lsls	r2, r2, #12
    4c4a:	4213      	tst	r3, r2
    4c4c:	d00a      	beq.n	4c64 <__aeabi_ddiv+0x430>
    4c4e:	465b      	mov	r3, fp
    4c50:	4213      	tst	r3, r2
    4c52:	d106      	bne.n	4c62 <__aeabi_ddiv+0x42e>
    4c54:	431a      	orrs	r2, r3
    4c56:	0312      	lsls	r2, r2, #12
    4c58:	0b12      	lsrs	r2, r2, #12
    4c5a:	46ac      	mov	ip, r5
    4c5c:	4688      	mov	r8, r1
    4c5e:	4c8e      	ldr	r4, [pc, #568]	; (4e98 <__aeabi_ddiv+0x664>)
    4c60:	e6b6      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4c62:	464b      	mov	r3, r9
    4c64:	431a      	orrs	r2, r3
    4c66:	0312      	lsls	r2, r2, #12
    4c68:	0b12      	lsrs	r2, r2, #12
    4c6a:	46bc      	mov	ip, r7
    4c6c:	4c8a      	ldr	r4, [pc, #552]	; (4e98 <__aeabi_ddiv+0x664>)
    4c6e:	e6af      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4c70:	0003      	movs	r3, r0
    4c72:	465a      	mov	r2, fp
    4c74:	3b28      	subs	r3, #40	; 0x28
    4c76:	409a      	lsls	r2, r3
    4c78:	2300      	movs	r3, #0
    4c7a:	4691      	mov	r9, r2
    4c7c:	4698      	mov	r8, r3
    4c7e:	e657      	b.n	4930 <__aeabi_ddiv+0xfc>
    4c80:	4658      	mov	r0, fp
    4c82:	f001 f80d 	bl	5ca0 <__clzsi2>
    4c86:	3020      	adds	r0, #32
    4c88:	e640      	b.n	490c <__aeabi_ddiv+0xd8>
    4c8a:	0003      	movs	r3, r0
    4c8c:	4652      	mov	r2, sl
    4c8e:	3b28      	subs	r3, #40	; 0x28
    4c90:	409a      	lsls	r2, r3
    4c92:	2100      	movs	r1, #0
    4c94:	4693      	mov	fp, r2
    4c96:	e677      	b.n	4988 <__aeabi_ddiv+0x154>
    4c98:	f001 f802 	bl	5ca0 <__clzsi2>
    4c9c:	3020      	adds	r0, #32
    4c9e:	e65f      	b.n	4960 <__aeabi_ddiv+0x12c>
    4ca0:	4588      	cmp	r8, r1
    4ca2:	d200      	bcs.n	4ca6 <__aeabi_ddiv+0x472>
    4ca4:	e6c7      	b.n	4a36 <__aeabi_ddiv+0x202>
    4ca6:	464b      	mov	r3, r9
    4ca8:	07de      	lsls	r6, r3, #31
    4caa:	085d      	lsrs	r5, r3, #1
    4cac:	4643      	mov	r3, r8
    4cae:	085b      	lsrs	r3, r3, #1
    4cb0:	431e      	orrs	r6, r3
    4cb2:	4643      	mov	r3, r8
    4cb4:	07db      	lsls	r3, r3, #31
    4cb6:	469a      	mov	sl, r3
    4cb8:	e6c2      	b.n	4a40 <__aeabi_ddiv+0x20c>
    4cba:	2500      	movs	r5, #0
    4cbc:	4592      	cmp	sl, r2
    4cbe:	d300      	bcc.n	4cc2 <__aeabi_ddiv+0x48e>
    4cc0:	e733      	b.n	4b2a <__aeabi_ddiv+0x2f6>
    4cc2:	9e03      	ldr	r6, [sp, #12]
    4cc4:	4659      	mov	r1, fp
    4cc6:	46b4      	mov	ip, r6
    4cc8:	44e2      	add	sl, ip
    4cca:	45b2      	cmp	sl, r6
    4ccc:	41ad      	sbcs	r5, r5
    4cce:	426d      	negs	r5, r5
    4cd0:	4445      	add	r5, r8
    4cd2:	18eb      	adds	r3, r5, r3
    4cd4:	3901      	subs	r1, #1
    4cd6:	4598      	cmp	r8, r3
    4cd8:	d207      	bcs.n	4cea <__aeabi_ddiv+0x4b6>
    4cda:	4298      	cmp	r0, r3
    4cdc:	d900      	bls.n	4ce0 <__aeabi_ddiv+0x4ac>
    4cde:	e07f      	b.n	4de0 <__aeabi_ddiv+0x5ac>
    4ce0:	d100      	bne.n	4ce4 <__aeabi_ddiv+0x4b0>
    4ce2:	e0bc      	b.n	4e5e <__aeabi_ddiv+0x62a>
    4ce4:	1a1d      	subs	r5, r3, r0
    4ce6:	468b      	mov	fp, r1
    4ce8:	e71f      	b.n	4b2a <__aeabi_ddiv+0x2f6>
    4cea:	4598      	cmp	r8, r3
    4cec:	d1fa      	bne.n	4ce4 <__aeabi_ddiv+0x4b0>
    4cee:	9d03      	ldr	r5, [sp, #12]
    4cf0:	4555      	cmp	r5, sl
    4cf2:	d9f2      	bls.n	4cda <__aeabi_ddiv+0x4a6>
    4cf4:	4643      	mov	r3, r8
    4cf6:	468b      	mov	fp, r1
    4cf8:	1a1d      	subs	r5, r3, r0
    4cfa:	e716      	b.n	4b2a <__aeabi_ddiv+0x2f6>
    4cfc:	469b      	mov	fp, r3
    4cfe:	e6ca      	b.n	4a96 <__aeabi_ddiv+0x262>
    4d00:	0015      	movs	r5, r2
    4d02:	e6e7      	b.n	4ad4 <__aeabi_ddiv+0x2a0>
    4d04:	465a      	mov	r2, fp
    4d06:	08c9      	lsrs	r1, r1, #3
    4d08:	0752      	lsls	r2, r2, #29
    4d0a:	430a      	orrs	r2, r1
    4d0c:	055b      	lsls	r3, r3, #21
    4d0e:	4690      	mov	r8, r2
    4d10:	0d5c      	lsrs	r4, r3, #21
    4d12:	465a      	mov	r2, fp
    4d14:	2301      	movs	r3, #1
    4d16:	9902      	ldr	r1, [sp, #8]
    4d18:	0252      	lsls	r2, r2, #9
    4d1a:	4019      	ands	r1, r3
    4d1c:	0b12      	lsrs	r2, r2, #12
    4d1e:	468c      	mov	ip, r1
    4d20:	e656      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4d22:	2b00      	cmp	r3, #0
    4d24:	d100      	bne.n	4d28 <__aeabi_ddiv+0x4f4>
    4d26:	e76f      	b.n	4c08 <__aeabi_ddiv+0x3d4>
    4d28:	4446      	add	r6, r8
    4d2a:	1e4a      	subs	r2, r1, #1
    4d2c:	45b0      	cmp	r8, r6
    4d2e:	d929      	bls.n	4d84 <__aeabi_ddiv+0x550>
    4d30:	0011      	movs	r1, r2
    4d32:	4286      	cmp	r6, r0
    4d34:	d000      	beq.n	4d38 <__aeabi_ddiv+0x504>
    4d36:	e765      	b.n	4c04 <__aeabi_ddiv+0x3d0>
    4d38:	9a03      	ldr	r2, [sp, #12]
    4d3a:	4293      	cmp	r3, r2
    4d3c:	d000      	beq.n	4d40 <__aeabi_ddiv+0x50c>
    4d3e:	e761      	b.n	4c04 <__aeabi_ddiv+0x3d0>
    4d40:	e762      	b.n	4c08 <__aeabi_ddiv+0x3d4>
    4d42:	2101      	movs	r1, #1
    4d44:	4249      	negs	r1, r1
    4d46:	2001      	movs	r0, #1
    4d48:	1ac2      	subs	r2, r0, r3
    4d4a:	2a38      	cmp	r2, #56	; 0x38
    4d4c:	dd21      	ble.n	4d92 <__aeabi_ddiv+0x55e>
    4d4e:	9b02      	ldr	r3, [sp, #8]
    4d50:	4003      	ands	r3, r0
    4d52:	469c      	mov	ip, r3
    4d54:	e638      	b.n	49c8 <__aeabi_ddiv+0x194>
    4d56:	220f      	movs	r2, #15
    4d58:	400a      	ands	r2, r1
    4d5a:	2a04      	cmp	r2, #4
    4d5c:	d100      	bne.n	4d60 <__aeabi_ddiv+0x52c>
    4d5e:	e75b      	b.n	4c18 <__aeabi_ddiv+0x3e4>
    4d60:	000a      	movs	r2, r1
    4d62:	1d11      	adds	r1, r2, #4
    4d64:	4291      	cmp	r1, r2
    4d66:	4192      	sbcs	r2, r2
    4d68:	4252      	negs	r2, r2
    4d6a:	4493      	add	fp, r2
    4d6c:	e754      	b.n	4c18 <__aeabi_ddiv+0x3e4>
    4d6e:	4b47      	ldr	r3, [pc, #284]	; (4e8c <__aeabi_ddiv+0x658>)
    4d70:	18e3      	adds	r3, r4, r3
    4d72:	2b00      	cmp	r3, #0
    4d74:	dde5      	ble.n	4d42 <__aeabi_ddiv+0x50e>
    4d76:	2201      	movs	r2, #1
    4d78:	4252      	negs	r2, r2
    4d7a:	e7f2      	b.n	4d62 <__aeabi_ddiv+0x52e>
    4d7c:	001d      	movs	r5, r3
    4d7e:	e6fa      	b.n	4b76 <__aeabi_ddiv+0x342>
    4d80:	469a      	mov	sl, r3
    4d82:	e71c      	b.n	4bbe <__aeabi_ddiv+0x38a>
    4d84:	42b0      	cmp	r0, r6
    4d86:	d839      	bhi.n	4dfc <__aeabi_ddiv+0x5c8>
    4d88:	d06e      	beq.n	4e68 <__aeabi_ddiv+0x634>
    4d8a:	0011      	movs	r1, r2
    4d8c:	e73a      	b.n	4c04 <__aeabi_ddiv+0x3d0>
    4d8e:	9302      	str	r3, [sp, #8]
    4d90:	e73a      	b.n	4c08 <__aeabi_ddiv+0x3d4>
    4d92:	2a1f      	cmp	r2, #31
    4d94:	dc3c      	bgt.n	4e10 <__aeabi_ddiv+0x5dc>
    4d96:	2320      	movs	r3, #32
    4d98:	1a9b      	subs	r3, r3, r2
    4d9a:	000c      	movs	r4, r1
    4d9c:	4658      	mov	r0, fp
    4d9e:	4099      	lsls	r1, r3
    4da0:	4098      	lsls	r0, r3
    4da2:	1e4b      	subs	r3, r1, #1
    4da4:	4199      	sbcs	r1, r3
    4da6:	465b      	mov	r3, fp
    4da8:	40d4      	lsrs	r4, r2
    4daa:	40d3      	lsrs	r3, r2
    4dac:	4320      	orrs	r0, r4
    4dae:	4308      	orrs	r0, r1
    4db0:	001a      	movs	r2, r3
    4db2:	0743      	lsls	r3, r0, #29
    4db4:	d009      	beq.n	4dca <__aeabi_ddiv+0x596>
    4db6:	230f      	movs	r3, #15
    4db8:	4003      	ands	r3, r0
    4dba:	2b04      	cmp	r3, #4
    4dbc:	d005      	beq.n	4dca <__aeabi_ddiv+0x596>
    4dbe:	0001      	movs	r1, r0
    4dc0:	1d08      	adds	r0, r1, #4
    4dc2:	4288      	cmp	r0, r1
    4dc4:	419b      	sbcs	r3, r3
    4dc6:	425b      	negs	r3, r3
    4dc8:	18d2      	adds	r2, r2, r3
    4dca:	0213      	lsls	r3, r2, #8
    4dcc:	d53a      	bpl.n	4e44 <__aeabi_ddiv+0x610>
    4dce:	2301      	movs	r3, #1
    4dd0:	9a02      	ldr	r2, [sp, #8]
    4dd2:	2401      	movs	r4, #1
    4dd4:	401a      	ands	r2, r3
    4dd6:	2300      	movs	r3, #0
    4dd8:	4694      	mov	ip, r2
    4dda:	4698      	mov	r8, r3
    4ddc:	2200      	movs	r2, #0
    4dde:	e5f7      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4de0:	2102      	movs	r1, #2
    4de2:	4249      	negs	r1, r1
    4de4:	468c      	mov	ip, r1
    4de6:	9d03      	ldr	r5, [sp, #12]
    4de8:	44e3      	add	fp, ip
    4dea:	46ac      	mov	ip, r5
    4dec:	44e2      	add	sl, ip
    4dee:	45aa      	cmp	sl, r5
    4df0:	41ad      	sbcs	r5, r5
    4df2:	426d      	negs	r5, r5
    4df4:	4445      	add	r5, r8
    4df6:	18ed      	adds	r5, r5, r3
    4df8:	1a2d      	subs	r5, r5, r0
    4dfa:	e696      	b.n	4b2a <__aeabi_ddiv+0x2f6>
    4dfc:	1e8a      	subs	r2, r1, #2
    4dfe:	9903      	ldr	r1, [sp, #12]
    4e00:	004d      	lsls	r5, r1, #1
    4e02:	428d      	cmp	r5, r1
    4e04:	4189      	sbcs	r1, r1
    4e06:	4249      	negs	r1, r1
    4e08:	4441      	add	r1, r8
    4e0a:	1876      	adds	r6, r6, r1
    4e0c:	9503      	str	r5, [sp, #12]
    4e0e:	e78f      	b.n	4d30 <__aeabi_ddiv+0x4fc>
    4e10:	201f      	movs	r0, #31
    4e12:	4240      	negs	r0, r0
    4e14:	1ac3      	subs	r3, r0, r3
    4e16:	4658      	mov	r0, fp
    4e18:	40d8      	lsrs	r0, r3
    4e1a:	0003      	movs	r3, r0
    4e1c:	2a20      	cmp	r2, #32
    4e1e:	d028      	beq.n	4e72 <__aeabi_ddiv+0x63e>
    4e20:	2040      	movs	r0, #64	; 0x40
    4e22:	465d      	mov	r5, fp
    4e24:	1a82      	subs	r2, r0, r2
    4e26:	4095      	lsls	r5, r2
    4e28:	4329      	orrs	r1, r5
    4e2a:	1e4a      	subs	r2, r1, #1
    4e2c:	4191      	sbcs	r1, r2
    4e2e:	4319      	orrs	r1, r3
    4e30:	2307      	movs	r3, #7
    4e32:	2200      	movs	r2, #0
    4e34:	400b      	ands	r3, r1
    4e36:	d009      	beq.n	4e4c <__aeabi_ddiv+0x618>
    4e38:	230f      	movs	r3, #15
    4e3a:	2200      	movs	r2, #0
    4e3c:	400b      	ands	r3, r1
    4e3e:	0008      	movs	r0, r1
    4e40:	2b04      	cmp	r3, #4
    4e42:	d1bd      	bne.n	4dc0 <__aeabi_ddiv+0x58c>
    4e44:	0001      	movs	r1, r0
    4e46:	0753      	lsls	r3, r2, #29
    4e48:	0252      	lsls	r2, r2, #9
    4e4a:	0b12      	lsrs	r2, r2, #12
    4e4c:	08c9      	lsrs	r1, r1, #3
    4e4e:	4319      	orrs	r1, r3
    4e50:	2301      	movs	r3, #1
    4e52:	4688      	mov	r8, r1
    4e54:	9902      	ldr	r1, [sp, #8]
    4e56:	2400      	movs	r4, #0
    4e58:	4019      	ands	r1, r3
    4e5a:	468c      	mov	ip, r1
    4e5c:	e5b8      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4e5e:	4552      	cmp	r2, sl
    4e60:	d8be      	bhi.n	4de0 <__aeabi_ddiv+0x5ac>
    4e62:	468b      	mov	fp, r1
    4e64:	2500      	movs	r5, #0
    4e66:	e660      	b.n	4b2a <__aeabi_ddiv+0x2f6>
    4e68:	9d03      	ldr	r5, [sp, #12]
    4e6a:	429d      	cmp	r5, r3
    4e6c:	d3c6      	bcc.n	4dfc <__aeabi_ddiv+0x5c8>
    4e6e:	0011      	movs	r1, r2
    4e70:	e762      	b.n	4d38 <__aeabi_ddiv+0x504>
    4e72:	2500      	movs	r5, #0
    4e74:	e7d8      	b.n	4e28 <__aeabi_ddiv+0x5f4>
    4e76:	2280      	movs	r2, #128	; 0x80
    4e78:	465b      	mov	r3, fp
    4e7a:	0312      	lsls	r2, r2, #12
    4e7c:	431a      	orrs	r2, r3
    4e7e:	9b01      	ldr	r3, [sp, #4]
    4e80:	0312      	lsls	r2, r2, #12
    4e82:	0b12      	lsrs	r2, r2, #12
    4e84:	469c      	mov	ip, r3
    4e86:	4688      	mov	r8, r1
    4e88:	4c03      	ldr	r4, [pc, #12]	; (4e98 <__aeabi_ddiv+0x664>)
    4e8a:	e5a1      	b.n	49d0 <__aeabi_ddiv+0x19c>
    4e8c:	000003ff 	.word	0x000003ff
    4e90:	feffffff 	.word	0xfeffffff
    4e94:	000007fe 	.word	0x000007fe
    4e98:	000007ff 	.word	0x000007ff

00004e9c <__eqdf2>:
    4e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e9e:	464f      	mov	r7, r9
    4ea0:	4646      	mov	r6, r8
    4ea2:	46d6      	mov	lr, sl
    4ea4:	005c      	lsls	r4, r3, #1
    4ea6:	b5c0      	push	{r6, r7, lr}
    4ea8:	031f      	lsls	r7, r3, #12
    4eaa:	0fdb      	lsrs	r3, r3, #31
    4eac:	469a      	mov	sl, r3
    4eae:	4b17      	ldr	r3, [pc, #92]	; (4f0c <__eqdf2+0x70>)
    4eb0:	030e      	lsls	r6, r1, #12
    4eb2:	004d      	lsls	r5, r1, #1
    4eb4:	4684      	mov	ip, r0
    4eb6:	4680      	mov	r8, r0
    4eb8:	0b36      	lsrs	r6, r6, #12
    4eba:	0d6d      	lsrs	r5, r5, #21
    4ebc:	0fc9      	lsrs	r1, r1, #31
    4ebe:	4691      	mov	r9, r2
    4ec0:	0b3f      	lsrs	r7, r7, #12
    4ec2:	0d64      	lsrs	r4, r4, #21
    4ec4:	2001      	movs	r0, #1
    4ec6:	429d      	cmp	r5, r3
    4ec8:	d008      	beq.n	4edc <__eqdf2+0x40>
    4eca:	429c      	cmp	r4, r3
    4ecc:	d001      	beq.n	4ed2 <__eqdf2+0x36>
    4ece:	42a5      	cmp	r5, r4
    4ed0:	d00b      	beq.n	4eea <__eqdf2+0x4e>
    4ed2:	bc1c      	pop	{r2, r3, r4}
    4ed4:	4690      	mov	r8, r2
    4ed6:	4699      	mov	r9, r3
    4ed8:	46a2      	mov	sl, r4
    4eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4edc:	4663      	mov	r3, ip
    4ede:	4333      	orrs	r3, r6
    4ee0:	d1f7      	bne.n	4ed2 <__eqdf2+0x36>
    4ee2:	42ac      	cmp	r4, r5
    4ee4:	d1f5      	bne.n	4ed2 <__eqdf2+0x36>
    4ee6:	433a      	orrs	r2, r7
    4ee8:	d1f3      	bne.n	4ed2 <__eqdf2+0x36>
    4eea:	2001      	movs	r0, #1
    4eec:	42be      	cmp	r6, r7
    4eee:	d1f0      	bne.n	4ed2 <__eqdf2+0x36>
    4ef0:	45c8      	cmp	r8, r9
    4ef2:	d1ee      	bne.n	4ed2 <__eqdf2+0x36>
    4ef4:	4551      	cmp	r1, sl
    4ef6:	d007      	beq.n	4f08 <__eqdf2+0x6c>
    4ef8:	2d00      	cmp	r5, #0
    4efa:	d1ea      	bne.n	4ed2 <__eqdf2+0x36>
    4efc:	4663      	mov	r3, ip
    4efe:	431e      	orrs	r6, r3
    4f00:	0030      	movs	r0, r6
    4f02:	1e46      	subs	r6, r0, #1
    4f04:	41b0      	sbcs	r0, r6
    4f06:	e7e4      	b.n	4ed2 <__eqdf2+0x36>
    4f08:	2000      	movs	r0, #0
    4f0a:	e7e2      	b.n	4ed2 <__eqdf2+0x36>
    4f0c:	000007ff 	.word	0x000007ff

00004f10 <__gedf2>:
    4f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f12:	4645      	mov	r5, r8
    4f14:	46de      	mov	lr, fp
    4f16:	4657      	mov	r7, sl
    4f18:	464e      	mov	r6, r9
    4f1a:	b5e0      	push	{r5, r6, r7, lr}
    4f1c:	031f      	lsls	r7, r3, #12
    4f1e:	0b3d      	lsrs	r5, r7, #12
    4f20:	4f2c      	ldr	r7, [pc, #176]	; (4fd4 <__gedf2+0xc4>)
    4f22:	030e      	lsls	r6, r1, #12
    4f24:	004c      	lsls	r4, r1, #1
    4f26:	46ab      	mov	fp, r5
    4f28:	005d      	lsls	r5, r3, #1
    4f2a:	4684      	mov	ip, r0
    4f2c:	0b36      	lsrs	r6, r6, #12
    4f2e:	0d64      	lsrs	r4, r4, #21
    4f30:	0fc9      	lsrs	r1, r1, #31
    4f32:	4690      	mov	r8, r2
    4f34:	0d6d      	lsrs	r5, r5, #21
    4f36:	0fdb      	lsrs	r3, r3, #31
    4f38:	42bc      	cmp	r4, r7
    4f3a:	d02a      	beq.n	4f92 <__gedf2+0x82>
    4f3c:	4f25      	ldr	r7, [pc, #148]	; (4fd4 <__gedf2+0xc4>)
    4f3e:	42bd      	cmp	r5, r7
    4f40:	d02d      	beq.n	4f9e <__gedf2+0x8e>
    4f42:	2c00      	cmp	r4, #0
    4f44:	d10f      	bne.n	4f66 <__gedf2+0x56>
    4f46:	4330      	orrs	r0, r6
    4f48:	0007      	movs	r7, r0
    4f4a:	4681      	mov	r9, r0
    4f4c:	4278      	negs	r0, r7
    4f4e:	4178      	adcs	r0, r7
    4f50:	b2c0      	uxtb	r0, r0
    4f52:	2d00      	cmp	r5, #0
    4f54:	d117      	bne.n	4f86 <__gedf2+0x76>
    4f56:	465f      	mov	r7, fp
    4f58:	433a      	orrs	r2, r7
    4f5a:	d114      	bne.n	4f86 <__gedf2+0x76>
    4f5c:	464b      	mov	r3, r9
    4f5e:	2000      	movs	r0, #0
    4f60:	2b00      	cmp	r3, #0
    4f62:	d00a      	beq.n	4f7a <__gedf2+0x6a>
    4f64:	e006      	b.n	4f74 <__gedf2+0x64>
    4f66:	2d00      	cmp	r5, #0
    4f68:	d102      	bne.n	4f70 <__gedf2+0x60>
    4f6a:	4658      	mov	r0, fp
    4f6c:	4302      	orrs	r2, r0
    4f6e:	d001      	beq.n	4f74 <__gedf2+0x64>
    4f70:	4299      	cmp	r1, r3
    4f72:	d018      	beq.n	4fa6 <__gedf2+0x96>
    4f74:	4248      	negs	r0, r1
    4f76:	2101      	movs	r1, #1
    4f78:	4308      	orrs	r0, r1
    4f7a:	bc3c      	pop	{r2, r3, r4, r5}
    4f7c:	4690      	mov	r8, r2
    4f7e:	4699      	mov	r9, r3
    4f80:	46a2      	mov	sl, r4
    4f82:	46ab      	mov	fp, r5
    4f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f86:	2800      	cmp	r0, #0
    4f88:	d0f2      	beq.n	4f70 <__gedf2+0x60>
    4f8a:	2001      	movs	r0, #1
    4f8c:	3b01      	subs	r3, #1
    4f8e:	4318      	orrs	r0, r3
    4f90:	e7f3      	b.n	4f7a <__gedf2+0x6a>
    4f92:	0037      	movs	r7, r6
    4f94:	4307      	orrs	r7, r0
    4f96:	d0d1      	beq.n	4f3c <__gedf2+0x2c>
    4f98:	2002      	movs	r0, #2
    4f9a:	4240      	negs	r0, r0
    4f9c:	e7ed      	b.n	4f7a <__gedf2+0x6a>
    4f9e:	465f      	mov	r7, fp
    4fa0:	4317      	orrs	r7, r2
    4fa2:	d0ce      	beq.n	4f42 <__gedf2+0x32>
    4fa4:	e7f8      	b.n	4f98 <__gedf2+0x88>
    4fa6:	42ac      	cmp	r4, r5
    4fa8:	dce4      	bgt.n	4f74 <__gedf2+0x64>
    4faa:	da03      	bge.n	4fb4 <__gedf2+0xa4>
    4fac:	1e48      	subs	r0, r1, #1
    4fae:	2101      	movs	r1, #1
    4fb0:	4308      	orrs	r0, r1
    4fb2:	e7e2      	b.n	4f7a <__gedf2+0x6a>
    4fb4:	455e      	cmp	r6, fp
    4fb6:	d8dd      	bhi.n	4f74 <__gedf2+0x64>
    4fb8:	d006      	beq.n	4fc8 <__gedf2+0xb8>
    4fba:	2000      	movs	r0, #0
    4fbc:	455e      	cmp	r6, fp
    4fbe:	d2dc      	bcs.n	4f7a <__gedf2+0x6a>
    4fc0:	2301      	movs	r3, #1
    4fc2:	1e48      	subs	r0, r1, #1
    4fc4:	4318      	orrs	r0, r3
    4fc6:	e7d8      	b.n	4f7a <__gedf2+0x6a>
    4fc8:	45c4      	cmp	ip, r8
    4fca:	d8d3      	bhi.n	4f74 <__gedf2+0x64>
    4fcc:	2000      	movs	r0, #0
    4fce:	45c4      	cmp	ip, r8
    4fd0:	d3f6      	bcc.n	4fc0 <__gedf2+0xb0>
    4fd2:	e7d2      	b.n	4f7a <__gedf2+0x6a>
    4fd4:	000007ff 	.word	0x000007ff

00004fd8 <__ledf2>:
    4fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fda:	464e      	mov	r6, r9
    4fdc:	4645      	mov	r5, r8
    4fde:	46de      	mov	lr, fp
    4fe0:	4657      	mov	r7, sl
    4fe2:	005c      	lsls	r4, r3, #1
    4fe4:	b5e0      	push	{r5, r6, r7, lr}
    4fe6:	031f      	lsls	r7, r3, #12
    4fe8:	0fdb      	lsrs	r3, r3, #31
    4fea:	4699      	mov	r9, r3
    4fec:	4b2a      	ldr	r3, [pc, #168]	; (5098 <__ledf2+0xc0>)
    4fee:	030e      	lsls	r6, r1, #12
    4ff0:	004d      	lsls	r5, r1, #1
    4ff2:	0fc9      	lsrs	r1, r1, #31
    4ff4:	4684      	mov	ip, r0
    4ff6:	0b36      	lsrs	r6, r6, #12
    4ff8:	0d6d      	lsrs	r5, r5, #21
    4ffa:	468b      	mov	fp, r1
    4ffc:	4690      	mov	r8, r2
    4ffe:	0b3f      	lsrs	r7, r7, #12
    5000:	0d64      	lsrs	r4, r4, #21
    5002:	429d      	cmp	r5, r3
    5004:	d020      	beq.n	5048 <__ledf2+0x70>
    5006:	4b24      	ldr	r3, [pc, #144]	; (5098 <__ledf2+0xc0>)
    5008:	429c      	cmp	r4, r3
    500a:	d022      	beq.n	5052 <__ledf2+0x7a>
    500c:	2d00      	cmp	r5, #0
    500e:	d112      	bne.n	5036 <__ledf2+0x5e>
    5010:	4330      	orrs	r0, r6
    5012:	4243      	negs	r3, r0
    5014:	4143      	adcs	r3, r0
    5016:	b2db      	uxtb	r3, r3
    5018:	2c00      	cmp	r4, #0
    501a:	d01f      	beq.n	505c <__ledf2+0x84>
    501c:	2b00      	cmp	r3, #0
    501e:	d00c      	beq.n	503a <__ledf2+0x62>
    5020:	464b      	mov	r3, r9
    5022:	2001      	movs	r0, #1
    5024:	3b01      	subs	r3, #1
    5026:	4303      	orrs	r3, r0
    5028:	0018      	movs	r0, r3
    502a:	bc3c      	pop	{r2, r3, r4, r5}
    502c:	4690      	mov	r8, r2
    502e:	4699      	mov	r9, r3
    5030:	46a2      	mov	sl, r4
    5032:	46ab      	mov	fp, r5
    5034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5036:	2c00      	cmp	r4, #0
    5038:	d016      	beq.n	5068 <__ledf2+0x90>
    503a:	45cb      	cmp	fp, r9
    503c:	d017      	beq.n	506e <__ledf2+0x96>
    503e:	465b      	mov	r3, fp
    5040:	4259      	negs	r1, r3
    5042:	2301      	movs	r3, #1
    5044:	430b      	orrs	r3, r1
    5046:	e7ef      	b.n	5028 <__ledf2+0x50>
    5048:	0031      	movs	r1, r6
    504a:	2302      	movs	r3, #2
    504c:	4301      	orrs	r1, r0
    504e:	d1eb      	bne.n	5028 <__ledf2+0x50>
    5050:	e7d9      	b.n	5006 <__ledf2+0x2e>
    5052:	0039      	movs	r1, r7
    5054:	2302      	movs	r3, #2
    5056:	4311      	orrs	r1, r2
    5058:	d1e6      	bne.n	5028 <__ledf2+0x50>
    505a:	e7d7      	b.n	500c <__ledf2+0x34>
    505c:	433a      	orrs	r2, r7
    505e:	d1dd      	bne.n	501c <__ledf2+0x44>
    5060:	2300      	movs	r3, #0
    5062:	2800      	cmp	r0, #0
    5064:	d0e0      	beq.n	5028 <__ledf2+0x50>
    5066:	e7ea      	b.n	503e <__ledf2+0x66>
    5068:	433a      	orrs	r2, r7
    506a:	d1e6      	bne.n	503a <__ledf2+0x62>
    506c:	e7e7      	b.n	503e <__ledf2+0x66>
    506e:	42a5      	cmp	r5, r4
    5070:	dce5      	bgt.n	503e <__ledf2+0x66>
    5072:	db05      	blt.n	5080 <__ledf2+0xa8>
    5074:	42be      	cmp	r6, r7
    5076:	d8e2      	bhi.n	503e <__ledf2+0x66>
    5078:	d007      	beq.n	508a <__ledf2+0xb2>
    507a:	2300      	movs	r3, #0
    507c:	42be      	cmp	r6, r7
    507e:	d2d3      	bcs.n	5028 <__ledf2+0x50>
    5080:	4659      	mov	r1, fp
    5082:	2301      	movs	r3, #1
    5084:	3901      	subs	r1, #1
    5086:	430b      	orrs	r3, r1
    5088:	e7ce      	b.n	5028 <__ledf2+0x50>
    508a:	45c4      	cmp	ip, r8
    508c:	d8d7      	bhi.n	503e <__ledf2+0x66>
    508e:	2300      	movs	r3, #0
    5090:	45c4      	cmp	ip, r8
    5092:	d3f5      	bcc.n	5080 <__ledf2+0xa8>
    5094:	e7c8      	b.n	5028 <__ledf2+0x50>
    5096:	46c0      	nop			; (mov r8, r8)
    5098:	000007ff 	.word	0x000007ff

0000509c <__aeabi_dmul>:
    509c:	b5f0      	push	{r4, r5, r6, r7, lr}
    509e:	4657      	mov	r7, sl
    50a0:	4645      	mov	r5, r8
    50a2:	46de      	mov	lr, fp
    50a4:	464e      	mov	r6, r9
    50a6:	b5e0      	push	{r5, r6, r7, lr}
    50a8:	030c      	lsls	r4, r1, #12
    50aa:	4698      	mov	r8, r3
    50ac:	004e      	lsls	r6, r1, #1
    50ae:	0b23      	lsrs	r3, r4, #12
    50b0:	b087      	sub	sp, #28
    50b2:	0007      	movs	r7, r0
    50b4:	4692      	mov	sl, r2
    50b6:	469b      	mov	fp, r3
    50b8:	0d76      	lsrs	r6, r6, #21
    50ba:	0fcd      	lsrs	r5, r1, #31
    50bc:	2e00      	cmp	r6, #0
    50be:	d06b      	beq.n	5198 <__aeabi_dmul+0xfc>
    50c0:	4b6d      	ldr	r3, [pc, #436]	; (5278 <__aeabi_dmul+0x1dc>)
    50c2:	429e      	cmp	r6, r3
    50c4:	d035      	beq.n	5132 <__aeabi_dmul+0x96>
    50c6:	2480      	movs	r4, #128	; 0x80
    50c8:	465b      	mov	r3, fp
    50ca:	0f42      	lsrs	r2, r0, #29
    50cc:	0424      	lsls	r4, r4, #16
    50ce:	00db      	lsls	r3, r3, #3
    50d0:	4314      	orrs	r4, r2
    50d2:	431c      	orrs	r4, r3
    50d4:	00c3      	lsls	r3, r0, #3
    50d6:	4699      	mov	r9, r3
    50d8:	4b68      	ldr	r3, [pc, #416]	; (527c <__aeabi_dmul+0x1e0>)
    50da:	46a3      	mov	fp, r4
    50dc:	469c      	mov	ip, r3
    50de:	2300      	movs	r3, #0
    50e0:	2700      	movs	r7, #0
    50e2:	4466      	add	r6, ip
    50e4:	9302      	str	r3, [sp, #8]
    50e6:	4643      	mov	r3, r8
    50e8:	031c      	lsls	r4, r3, #12
    50ea:	005a      	lsls	r2, r3, #1
    50ec:	0fdb      	lsrs	r3, r3, #31
    50ee:	4650      	mov	r0, sl
    50f0:	0b24      	lsrs	r4, r4, #12
    50f2:	0d52      	lsrs	r2, r2, #21
    50f4:	4698      	mov	r8, r3
    50f6:	d100      	bne.n	50fa <__aeabi_dmul+0x5e>
    50f8:	e076      	b.n	51e8 <__aeabi_dmul+0x14c>
    50fa:	4b5f      	ldr	r3, [pc, #380]	; (5278 <__aeabi_dmul+0x1dc>)
    50fc:	429a      	cmp	r2, r3
    50fe:	d06d      	beq.n	51dc <__aeabi_dmul+0x140>
    5100:	2380      	movs	r3, #128	; 0x80
    5102:	0f41      	lsrs	r1, r0, #29
    5104:	041b      	lsls	r3, r3, #16
    5106:	430b      	orrs	r3, r1
    5108:	495c      	ldr	r1, [pc, #368]	; (527c <__aeabi_dmul+0x1e0>)
    510a:	00e4      	lsls	r4, r4, #3
    510c:	468c      	mov	ip, r1
    510e:	431c      	orrs	r4, r3
    5110:	00c3      	lsls	r3, r0, #3
    5112:	2000      	movs	r0, #0
    5114:	4462      	add	r2, ip
    5116:	4641      	mov	r1, r8
    5118:	18b6      	adds	r6, r6, r2
    511a:	4069      	eors	r1, r5
    511c:	1c72      	adds	r2, r6, #1
    511e:	9101      	str	r1, [sp, #4]
    5120:	4694      	mov	ip, r2
    5122:	4307      	orrs	r7, r0
    5124:	2f0f      	cmp	r7, #15
    5126:	d900      	bls.n	512a <__aeabi_dmul+0x8e>
    5128:	e0b0      	b.n	528c <__aeabi_dmul+0x1f0>
    512a:	4a55      	ldr	r2, [pc, #340]	; (5280 <__aeabi_dmul+0x1e4>)
    512c:	00bf      	lsls	r7, r7, #2
    512e:	59d2      	ldr	r2, [r2, r7]
    5130:	4697      	mov	pc, r2
    5132:	465b      	mov	r3, fp
    5134:	4303      	orrs	r3, r0
    5136:	4699      	mov	r9, r3
    5138:	d000      	beq.n	513c <__aeabi_dmul+0xa0>
    513a:	e087      	b.n	524c <__aeabi_dmul+0x1b0>
    513c:	2300      	movs	r3, #0
    513e:	469b      	mov	fp, r3
    5140:	3302      	adds	r3, #2
    5142:	2708      	movs	r7, #8
    5144:	9302      	str	r3, [sp, #8]
    5146:	e7ce      	b.n	50e6 <__aeabi_dmul+0x4a>
    5148:	4642      	mov	r2, r8
    514a:	9201      	str	r2, [sp, #4]
    514c:	2802      	cmp	r0, #2
    514e:	d067      	beq.n	5220 <__aeabi_dmul+0x184>
    5150:	2803      	cmp	r0, #3
    5152:	d100      	bne.n	5156 <__aeabi_dmul+0xba>
    5154:	e20e      	b.n	5574 <__aeabi_dmul+0x4d8>
    5156:	2801      	cmp	r0, #1
    5158:	d000      	beq.n	515c <__aeabi_dmul+0xc0>
    515a:	e162      	b.n	5422 <__aeabi_dmul+0x386>
    515c:	2300      	movs	r3, #0
    515e:	2400      	movs	r4, #0
    5160:	2200      	movs	r2, #0
    5162:	4699      	mov	r9, r3
    5164:	9901      	ldr	r1, [sp, #4]
    5166:	4001      	ands	r1, r0
    5168:	b2cd      	uxtb	r5, r1
    516a:	2100      	movs	r1, #0
    516c:	0312      	lsls	r2, r2, #12
    516e:	0d0b      	lsrs	r3, r1, #20
    5170:	0b12      	lsrs	r2, r2, #12
    5172:	051b      	lsls	r3, r3, #20
    5174:	4313      	orrs	r3, r2
    5176:	4a43      	ldr	r2, [pc, #268]	; (5284 <__aeabi_dmul+0x1e8>)
    5178:	0524      	lsls	r4, r4, #20
    517a:	4013      	ands	r3, r2
    517c:	431c      	orrs	r4, r3
    517e:	0064      	lsls	r4, r4, #1
    5180:	07ed      	lsls	r5, r5, #31
    5182:	0864      	lsrs	r4, r4, #1
    5184:	432c      	orrs	r4, r5
    5186:	4648      	mov	r0, r9
    5188:	0021      	movs	r1, r4
    518a:	b007      	add	sp, #28
    518c:	bc3c      	pop	{r2, r3, r4, r5}
    518e:	4690      	mov	r8, r2
    5190:	4699      	mov	r9, r3
    5192:	46a2      	mov	sl, r4
    5194:	46ab      	mov	fp, r5
    5196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5198:	4303      	orrs	r3, r0
    519a:	4699      	mov	r9, r3
    519c:	d04f      	beq.n	523e <__aeabi_dmul+0x1a2>
    519e:	465b      	mov	r3, fp
    51a0:	2b00      	cmp	r3, #0
    51a2:	d100      	bne.n	51a6 <__aeabi_dmul+0x10a>
    51a4:	e189      	b.n	54ba <__aeabi_dmul+0x41e>
    51a6:	4658      	mov	r0, fp
    51a8:	f000 fd7a 	bl	5ca0 <__clzsi2>
    51ac:	0003      	movs	r3, r0
    51ae:	3b0b      	subs	r3, #11
    51b0:	2b1c      	cmp	r3, #28
    51b2:	dd00      	ble.n	51b6 <__aeabi_dmul+0x11a>
    51b4:	e17a      	b.n	54ac <__aeabi_dmul+0x410>
    51b6:	221d      	movs	r2, #29
    51b8:	1ad3      	subs	r3, r2, r3
    51ba:	003a      	movs	r2, r7
    51bc:	0001      	movs	r1, r0
    51be:	465c      	mov	r4, fp
    51c0:	40da      	lsrs	r2, r3
    51c2:	3908      	subs	r1, #8
    51c4:	408c      	lsls	r4, r1
    51c6:	0013      	movs	r3, r2
    51c8:	408f      	lsls	r7, r1
    51ca:	4323      	orrs	r3, r4
    51cc:	469b      	mov	fp, r3
    51ce:	46b9      	mov	r9, r7
    51d0:	2300      	movs	r3, #0
    51d2:	4e2d      	ldr	r6, [pc, #180]	; (5288 <__aeabi_dmul+0x1ec>)
    51d4:	2700      	movs	r7, #0
    51d6:	1a36      	subs	r6, r6, r0
    51d8:	9302      	str	r3, [sp, #8]
    51da:	e784      	b.n	50e6 <__aeabi_dmul+0x4a>
    51dc:	4653      	mov	r3, sl
    51de:	4323      	orrs	r3, r4
    51e0:	d12a      	bne.n	5238 <__aeabi_dmul+0x19c>
    51e2:	2400      	movs	r4, #0
    51e4:	2002      	movs	r0, #2
    51e6:	e796      	b.n	5116 <__aeabi_dmul+0x7a>
    51e8:	4653      	mov	r3, sl
    51ea:	4323      	orrs	r3, r4
    51ec:	d020      	beq.n	5230 <__aeabi_dmul+0x194>
    51ee:	2c00      	cmp	r4, #0
    51f0:	d100      	bne.n	51f4 <__aeabi_dmul+0x158>
    51f2:	e157      	b.n	54a4 <__aeabi_dmul+0x408>
    51f4:	0020      	movs	r0, r4
    51f6:	f000 fd53 	bl	5ca0 <__clzsi2>
    51fa:	0003      	movs	r3, r0
    51fc:	3b0b      	subs	r3, #11
    51fe:	2b1c      	cmp	r3, #28
    5200:	dd00      	ble.n	5204 <__aeabi_dmul+0x168>
    5202:	e149      	b.n	5498 <__aeabi_dmul+0x3fc>
    5204:	211d      	movs	r1, #29
    5206:	1acb      	subs	r3, r1, r3
    5208:	4651      	mov	r1, sl
    520a:	0002      	movs	r2, r0
    520c:	40d9      	lsrs	r1, r3
    520e:	4653      	mov	r3, sl
    5210:	3a08      	subs	r2, #8
    5212:	4094      	lsls	r4, r2
    5214:	4093      	lsls	r3, r2
    5216:	430c      	orrs	r4, r1
    5218:	4a1b      	ldr	r2, [pc, #108]	; (5288 <__aeabi_dmul+0x1ec>)
    521a:	1a12      	subs	r2, r2, r0
    521c:	2000      	movs	r0, #0
    521e:	e77a      	b.n	5116 <__aeabi_dmul+0x7a>
    5220:	2501      	movs	r5, #1
    5222:	9b01      	ldr	r3, [sp, #4]
    5224:	4c14      	ldr	r4, [pc, #80]	; (5278 <__aeabi_dmul+0x1dc>)
    5226:	401d      	ands	r5, r3
    5228:	2300      	movs	r3, #0
    522a:	2200      	movs	r2, #0
    522c:	4699      	mov	r9, r3
    522e:	e79c      	b.n	516a <__aeabi_dmul+0xce>
    5230:	2400      	movs	r4, #0
    5232:	2200      	movs	r2, #0
    5234:	2001      	movs	r0, #1
    5236:	e76e      	b.n	5116 <__aeabi_dmul+0x7a>
    5238:	4653      	mov	r3, sl
    523a:	2003      	movs	r0, #3
    523c:	e76b      	b.n	5116 <__aeabi_dmul+0x7a>
    523e:	2300      	movs	r3, #0
    5240:	469b      	mov	fp, r3
    5242:	3301      	adds	r3, #1
    5244:	2704      	movs	r7, #4
    5246:	2600      	movs	r6, #0
    5248:	9302      	str	r3, [sp, #8]
    524a:	e74c      	b.n	50e6 <__aeabi_dmul+0x4a>
    524c:	2303      	movs	r3, #3
    524e:	4681      	mov	r9, r0
    5250:	270c      	movs	r7, #12
    5252:	9302      	str	r3, [sp, #8]
    5254:	e747      	b.n	50e6 <__aeabi_dmul+0x4a>
    5256:	2280      	movs	r2, #128	; 0x80
    5258:	2300      	movs	r3, #0
    525a:	2500      	movs	r5, #0
    525c:	0312      	lsls	r2, r2, #12
    525e:	4699      	mov	r9, r3
    5260:	4c05      	ldr	r4, [pc, #20]	; (5278 <__aeabi_dmul+0x1dc>)
    5262:	e782      	b.n	516a <__aeabi_dmul+0xce>
    5264:	465c      	mov	r4, fp
    5266:	464b      	mov	r3, r9
    5268:	9802      	ldr	r0, [sp, #8]
    526a:	e76f      	b.n	514c <__aeabi_dmul+0xb0>
    526c:	465c      	mov	r4, fp
    526e:	464b      	mov	r3, r9
    5270:	9501      	str	r5, [sp, #4]
    5272:	9802      	ldr	r0, [sp, #8]
    5274:	e76a      	b.n	514c <__aeabi_dmul+0xb0>
    5276:	46c0      	nop			; (mov r8, r8)
    5278:	000007ff 	.word	0x000007ff
    527c:	fffffc01 	.word	0xfffffc01
    5280:	00006164 	.word	0x00006164
    5284:	800fffff 	.word	0x800fffff
    5288:	fffffc0d 	.word	0xfffffc0d
    528c:	464a      	mov	r2, r9
    528e:	4649      	mov	r1, r9
    5290:	0c17      	lsrs	r7, r2, #16
    5292:	0c1a      	lsrs	r2, r3, #16
    5294:	041b      	lsls	r3, r3, #16
    5296:	0c1b      	lsrs	r3, r3, #16
    5298:	0408      	lsls	r0, r1, #16
    529a:	0019      	movs	r1, r3
    529c:	0c00      	lsrs	r0, r0, #16
    529e:	4341      	muls	r1, r0
    52a0:	0015      	movs	r5, r2
    52a2:	4688      	mov	r8, r1
    52a4:	0019      	movs	r1, r3
    52a6:	437d      	muls	r5, r7
    52a8:	4379      	muls	r1, r7
    52aa:	9503      	str	r5, [sp, #12]
    52ac:	4689      	mov	r9, r1
    52ae:	0029      	movs	r1, r5
    52b0:	0015      	movs	r5, r2
    52b2:	4345      	muls	r5, r0
    52b4:	444d      	add	r5, r9
    52b6:	9502      	str	r5, [sp, #8]
    52b8:	4645      	mov	r5, r8
    52ba:	0c2d      	lsrs	r5, r5, #16
    52bc:	46aa      	mov	sl, r5
    52be:	9d02      	ldr	r5, [sp, #8]
    52c0:	4455      	add	r5, sl
    52c2:	45a9      	cmp	r9, r5
    52c4:	d906      	bls.n	52d4 <__aeabi_dmul+0x238>
    52c6:	468a      	mov	sl, r1
    52c8:	2180      	movs	r1, #128	; 0x80
    52ca:	0249      	lsls	r1, r1, #9
    52cc:	4689      	mov	r9, r1
    52ce:	44ca      	add	sl, r9
    52d0:	4651      	mov	r1, sl
    52d2:	9103      	str	r1, [sp, #12]
    52d4:	0c29      	lsrs	r1, r5, #16
    52d6:	9104      	str	r1, [sp, #16]
    52d8:	4641      	mov	r1, r8
    52da:	0409      	lsls	r1, r1, #16
    52dc:	042d      	lsls	r5, r5, #16
    52de:	0c09      	lsrs	r1, r1, #16
    52e0:	4688      	mov	r8, r1
    52e2:	0029      	movs	r1, r5
    52e4:	0c25      	lsrs	r5, r4, #16
    52e6:	0424      	lsls	r4, r4, #16
    52e8:	4441      	add	r1, r8
    52ea:	0c24      	lsrs	r4, r4, #16
    52ec:	9105      	str	r1, [sp, #20]
    52ee:	0021      	movs	r1, r4
    52f0:	4341      	muls	r1, r0
    52f2:	4688      	mov	r8, r1
    52f4:	0021      	movs	r1, r4
    52f6:	4379      	muls	r1, r7
    52f8:	468a      	mov	sl, r1
    52fa:	4368      	muls	r0, r5
    52fc:	4641      	mov	r1, r8
    52fe:	4450      	add	r0, sl
    5300:	4681      	mov	r9, r0
    5302:	0c08      	lsrs	r0, r1, #16
    5304:	4448      	add	r0, r9
    5306:	436f      	muls	r7, r5
    5308:	4582      	cmp	sl, r0
    530a:	d903      	bls.n	5314 <__aeabi_dmul+0x278>
    530c:	2180      	movs	r1, #128	; 0x80
    530e:	0249      	lsls	r1, r1, #9
    5310:	4689      	mov	r9, r1
    5312:	444f      	add	r7, r9
    5314:	0c01      	lsrs	r1, r0, #16
    5316:	4689      	mov	r9, r1
    5318:	0039      	movs	r1, r7
    531a:	4449      	add	r1, r9
    531c:	9102      	str	r1, [sp, #8]
    531e:	4641      	mov	r1, r8
    5320:	040f      	lsls	r7, r1, #16
    5322:	9904      	ldr	r1, [sp, #16]
    5324:	0c3f      	lsrs	r7, r7, #16
    5326:	4688      	mov	r8, r1
    5328:	0400      	lsls	r0, r0, #16
    532a:	19c0      	adds	r0, r0, r7
    532c:	4480      	add	r8, r0
    532e:	4641      	mov	r1, r8
    5330:	9104      	str	r1, [sp, #16]
    5332:	4659      	mov	r1, fp
    5334:	0c0f      	lsrs	r7, r1, #16
    5336:	0409      	lsls	r1, r1, #16
    5338:	0c09      	lsrs	r1, r1, #16
    533a:	4688      	mov	r8, r1
    533c:	4359      	muls	r1, r3
    533e:	468a      	mov	sl, r1
    5340:	0039      	movs	r1, r7
    5342:	4351      	muls	r1, r2
    5344:	4689      	mov	r9, r1
    5346:	4641      	mov	r1, r8
    5348:	434a      	muls	r2, r1
    534a:	4651      	mov	r1, sl
    534c:	0c09      	lsrs	r1, r1, #16
    534e:	468b      	mov	fp, r1
    5350:	437b      	muls	r3, r7
    5352:	18d2      	adds	r2, r2, r3
    5354:	445a      	add	r2, fp
    5356:	4293      	cmp	r3, r2
    5358:	d903      	bls.n	5362 <__aeabi_dmul+0x2c6>
    535a:	2380      	movs	r3, #128	; 0x80
    535c:	025b      	lsls	r3, r3, #9
    535e:	469b      	mov	fp, r3
    5360:	44d9      	add	r9, fp
    5362:	4651      	mov	r1, sl
    5364:	0409      	lsls	r1, r1, #16
    5366:	0c09      	lsrs	r1, r1, #16
    5368:	468a      	mov	sl, r1
    536a:	4641      	mov	r1, r8
    536c:	4361      	muls	r1, r4
    536e:	437c      	muls	r4, r7
    5370:	0c13      	lsrs	r3, r2, #16
    5372:	0412      	lsls	r2, r2, #16
    5374:	444b      	add	r3, r9
    5376:	4452      	add	r2, sl
    5378:	46a1      	mov	r9, r4
    537a:	468a      	mov	sl, r1
    537c:	003c      	movs	r4, r7
    537e:	4641      	mov	r1, r8
    5380:	436c      	muls	r4, r5
    5382:	434d      	muls	r5, r1
    5384:	4651      	mov	r1, sl
    5386:	444d      	add	r5, r9
    5388:	0c0f      	lsrs	r7, r1, #16
    538a:	197d      	adds	r5, r7, r5
    538c:	45a9      	cmp	r9, r5
    538e:	d903      	bls.n	5398 <__aeabi_dmul+0x2fc>
    5390:	2180      	movs	r1, #128	; 0x80
    5392:	0249      	lsls	r1, r1, #9
    5394:	4688      	mov	r8, r1
    5396:	4444      	add	r4, r8
    5398:	9f04      	ldr	r7, [sp, #16]
    539a:	9903      	ldr	r1, [sp, #12]
    539c:	46b8      	mov	r8, r7
    539e:	4441      	add	r1, r8
    53a0:	468b      	mov	fp, r1
    53a2:	4583      	cmp	fp, r0
    53a4:	4180      	sbcs	r0, r0
    53a6:	4241      	negs	r1, r0
    53a8:	4688      	mov	r8, r1
    53aa:	4651      	mov	r1, sl
    53ac:	0408      	lsls	r0, r1, #16
    53ae:	042f      	lsls	r7, r5, #16
    53b0:	0c00      	lsrs	r0, r0, #16
    53b2:	183f      	adds	r7, r7, r0
    53b4:	4658      	mov	r0, fp
    53b6:	9902      	ldr	r1, [sp, #8]
    53b8:	1810      	adds	r0, r2, r0
    53ba:	4689      	mov	r9, r1
    53bc:	4290      	cmp	r0, r2
    53be:	4192      	sbcs	r2, r2
    53c0:	444f      	add	r7, r9
    53c2:	46ba      	mov	sl, r7
    53c4:	4252      	negs	r2, r2
    53c6:	4699      	mov	r9, r3
    53c8:	4693      	mov	fp, r2
    53ca:	44c2      	add	sl, r8
    53cc:	44d1      	add	r9, sl
    53ce:	44cb      	add	fp, r9
    53d0:	428f      	cmp	r7, r1
    53d2:	41bf      	sbcs	r7, r7
    53d4:	45c2      	cmp	sl, r8
    53d6:	4189      	sbcs	r1, r1
    53d8:	4599      	cmp	r9, r3
    53da:	419b      	sbcs	r3, r3
    53dc:	4593      	cmp	fp, r2
    53de:	4192      	sbcs	r2, r2
    53e0:	427f      	negs	r7, r7
    53e2:	4249      	negs	r1, r1
    53e4:	0c2d      	lsrs	r5, r5, #16
    53e6:	4252      	negs	r2, r2
    53e8:	430f      	orrs	r7, r1
    53ea:	425b      	negs	r3, r3
    53ec:	4313      	orrs	r3, r2
    53ee:	197f      	adds	r7, r7, r5
    53f0:	18ff      	adds	r7, r7, r3
    53f2:	465b      	mov	r3, fp
    53f4:	193c      	adds	r4, r7, r4
    53f6:	0ddb      	lsrs	r3, r3, #23
    53f8:	9a05      	ldr	r2, [sp, #20]
    53fa:	0264      	lsls	r4, r4, #9
    53fc:	431c      	orrs	r4, r3
    53fe:	0243      	lsls	r3, r0, #9
    5400:	4313      	orrs	r3, r2
    5402:	1e5d      	subs	r5, r3, #1
    5404:	41ab      	sbcs	r3, r5
    5406:	465a      	mov	r2, fp
    5408:	0dc0      	lsrs	r0, r0, #23
    540a:	4303      	orrs	r3, r0
    540c:	0252      	lsls	r2, r2, #9
    540e:	4313      	orrs	r3, r2
    5410:	01e2      	lsls	r2, r4, #7
    5412:	d556      	bpl.n	54c2 <__aeabi_dmul+0x426>
    5414:	2001      	movs	r0, #1
    5416:	085a      	lsrs	r2, r3, #1
    5418:	4003      	ands	r3, r0
    541a:	4313      	orrs	r3, r2
    541c:	07e2      	lsls	r2, r4, #31
    541e:	4313      	orrs	r3, r2
    5420:	0864      	lsrs	r4, r4, #1
    5422:	485a      	ldr	r0, [pc, #360]	; (558c <__aeabi_dmul+0x4f0>)
    5424:	4460      	add	r0, ip
    5426:	2800      	cmp	r0, #0
    5428:	dd4d      	ble.n	54c6 <__aeabi_dmul+0x42a>
    542a:	075a      	lsls	r2, r3, #29
    542c:	d009      	beq.n	5442 <__aeabi_dmul+0x3a6>
    542e:	220f      	movs	r2, #15
    5430:	401a      	ands	r2, r3
    5432:	2a04      	cmp	r2, #4
    5434:	d005      	beq.n	5442 <__aeabi_dmul+0x3a6>
    5436:	1d1a      	adds	r2, r3, #4
    5438:	429a      	cmp	r2, r3
    543a:	419b      	sbcs	r3, r3
    543c:	425b      	negs	r3, r3
    543e:	18e4      	adds	r4, r4, r3
    5440:	0013      	movs	r3, r2
    5442:	01e2      	lsls	r2, r4, #7
    5444:	d504      	bpl.n	5450 <__aeabi_dmul+0x3b4>
    5446:	2080      	movs	r0, #128	; 0x80
    5448:	4a51      	ldr	r2, [pc, #324]	; (5590 <__aeabi_dmul+0x4f4>)
    544a:	00c0      	lsls	r0, r0, #3
    544c:	4014      	ands	r4, r2
    544e:	4460      	add	r0, ip
    5450:	4a50      	ldr	r2, [pc, #320]	; (5594 <__aeabi_dmul+0x4f8>)
    5452:	4290      	cmp	r0, r2
    5454:	dd00      	ble.n	5458 <__aeabi_dmul+0x3bc>
    5456:	e6e3      	b.n	5220 <__aeabi_dmul+0x184>
    5458:	2501      	movs	r5, #1
    545a:	08db      	lsrs	r3, r3, #3
    545c:	0762      	lsls	r2, r4, #29
    545e:	431a      	orrs	r2, r3
    5460:	0264      	lsls	r4, r4, #9
    5462:	9b01      	ldr	r3, [sp, #4]
    5464:	4691      	mov	r9, r2
    5466:	0b22      	lsrs	r2, r4, #12
    5468:	0544      	lsls	r4, r0, #21
    546a:	0d64      	lsrs	r4, r4, #21
    546c:	401d      	ands	r5, r3
    546e:	e67c      	b.n	516a <__aeabi_dmul+0xce>
    5470:	2280      	movs	r2, #128	; 0x80
    5472:	4659      	mov	r1, fp
    5474:	0312      	lsls	r2, r2, #12
    5476:	4211      	tst	r1, r2
    5478:	d008      	beq.n	548c <__aeabi_dmul+0x3f0>
    547a:	4214      	tst	r4, r2
    547c:	d106      	bne.n	548c <__aeabi_dmul+0x3f0>
    547e:	4322      	orrs	r2, r4
    5480:	0312      	lsls	r2, r2, #12
    5482:	0b12      	lsrs	r2, r2, #12
    5484:	4645      	mov	r5, r8
    5486:	4699      	mov	r9, r3
    5488:	4c43      	ldr	r4, [pc, #268]	; (5598 <__aeabi_dmul+0x4fc>)
    548a:	e66e      	b.n	516a <__aeabi_dmul+0xce>
    548c:	465b      	mov	r3, fp
    548e:	431a      	orrs	r2, r3
    5490:	0312      	lsls	r2, r2, #12
    5492:	0b12      	lsrs	r2, r2, #12
    5494:	4c40      	ldr	r4, [pc, #256]	; (5598 <__aeabi_dmul+0x4fc>)
    5496:	e668      	b.n	516a <__aeabi_dmul+0xce>
    5498:	0003      	movs	r3, r0
    549a:	4654      	mov	r4, sl
    549c:	3b28      	subs	r3, #40	; 0x28
    549e:	409c      	lsls	r4, r3
    54a0:	2300      	movs	r3, #0
    54a2:	e6b9      	b.n	5218 <__aeabi_dmul+0x17c>
    54a4:	f000 fbfc 	bl	5ca0 <__clzsi2>
    54a8:	3020      	adds	r0, #32
    54aa:	e6a6      	b.n	51fa <__aeabi_dmul+0x15e>
    54ac:	0003      	movs	r3, r0
    54ae:	3b28      	subs	r3, #40	; 0x28
    54b0:	409f      	lsls	r7, r3
    54b2:	2300      	movs	r3, #0
    54b4:	46bb      	mov	fp, r7
    54b6:	4699      	mov	r9, r3
    54b8:	e68a      	b.n	51d0 <__aeabi_dmul+0x134>
    54ba:	f000 fbf1 	bl	5ca0 <__clzsi2>
    54be:	3020      	adds	r0, #32
    54c0:	e674      	b.n	51ac <__aeabi_dmul+0x110>
    54c2:	46b4      	mov	ip, r6
    54c4:	e7ad      	b.n	5422 <__aeabi_dmul+0x386>
    54c6:	2501      	movs	r5, #1
    54c8:	1a2a      	subs	r2, r5, r0
    54ca:	2a38      	cmp	r2, #56	; 0x38
    54cc:	dd06      	ble.n	54dc <__aeabi_dmul+0x440>
    54ce:	9b01      	ldr	r3, [sp, #4]
    54d0:	2400      	movs	r4, #0
    54d2:	401d      	ands	r5, r3
    54d4:	2300      	movs	r3, #0
    54d6:	2200      	movs	r2, #0
    54d8:	4699      	mov	r9, r3
    54da:	e646      	b.n	516a <__aeabi_dmul+0xce>
    54dc:	2a1f      	cmp	r2, #31
    54de:	dc21      	bgt.n	5524 <__aeabi_dmul+0x488>
    54e0:	2520      	movs	r5, #32
    54e2:	0020      	movs	r0, r4
    54e4:	1aad      	subs	r5, r5, r2
    54e6:	001e      	movs	r6, r3
    54e8:	40ab      	lsls	r3, r5
    54ea:	40a8      	lsls	r0, r5
    54ec:	40d6      	lsrs	r6, r2
    54ee:	1e5d      	subs	r5, r3, #1
    54f0:	41ab      	sbcs	r3, r5
    54f2:	4330      	orrs	r0, r6
    54f4:	4318      	orrs	r0, r3
    54f6:	40d4      	lsrs	r4, r2
    54f8:	0743      	lsls	r3, r0, #29
    54fa:	d009      	beq.n	5510 <__aeabi_dmul+0x474>
    54fc:	230f      	movs	r3, #15
    54fe:	4003      	ands	r3, r0
    5500:	2b04      	cmp	r3, #4
    5502:	d005      	beq.n	5510 <__aeabi_dmul+0x474>
    5504:	0003      	movs	r3, r0
    5506:	1d18      	adds	r0, r3, #4
    5508:	4298      	cmp	r0, r3
    550a:	419b      	sbcs	r3, r3
    550c:	425b      	negs	r3, r3
    550e:	18e4      	adds	r4, r4, r3
    5510:	0223      	lsls	r3, r4, #8
    5512:	d521      	bpl.n	5558 <__aeabi_dmul+0x4bc>
    5514:	2501      	movs	r5, #1
    5516:	9b01      	ldr	r3, [sp, #4]
    5518:	2401      	movs	r4, #1
    551a:	401d      	ands	r5, r3
    551c:	2300      	movs	r3, #0
    551e:	2200      	movs	r2, #0
    5520:	4699      	mov	r9, r3
    5522:	e622      	b.n	516a <__aeabi_dmul+0xce>
    5524:	251f      	movs	r5, #31
    5526:	0021      	movs	r1, r4
    5528:	426d      	negs	r5, r5
    552a:	1a28      	subs	r0, r5, r0
    552c:	40c1      	lsrs	r1, r0
    552e:	0008      	movs	r0, r1
    5530:	2a20      	cmp	r2, #32
    5532:	d01d      	beq.n	5570 <__aeabi_dmul+0x4d4>
    5534:	355f      	adds	r5, #95	; 0x5f
    5536:	1aaa      	subs	r2, r5, r2
    5538:	4094      	lsls	r4, r2
    553a:	4323      	orrs	r3, r4
    553c:	1e5c      	subs	r4, r3, #1
    553e:	41a3      	sbcs	r3, r4
    5540:	2507      	movs	r5, #7
    5542:	4303      	orrs	r3, r0
    5544:	401d      	ands	r5, r3
    5546:	2200      	movs	r2, #0
    5548:	2d00      	cmp	r5, #0
    554a:	d009      	beq.n	5560 <__aeabi_dmul+0x4c4>
    554c:	220f      	movs	r2, #15
    554e:	2400      	movs	r4, #0
    5550:	401a      	ands	r2, r3
    5552:	0018      	movs	r0, r3
    5554:	2a04      	cmp	r2, #4
    5556:	d1d6      	bne.n	5506 <__aeabi_dmul+0x46a>
    5558:	0003      	movs	r3, r0
    555a:	0765      	lsls	r5, r4, #29
    555c:	0264      	lsls	r4, r4, #9
    555e:	0b22      	lsrs	r2, r4, #12
    5560:	08db      	lsrs	r3, r3, #3
    5562:	432b      	orrs	r3, r5
    5564:	2501      	movs	r5, #1
    5566:	4699      	mov	r9, r3
    5568:	9b01      	ldr	r3, [sp, #4]
    556a:	2400      	movs	r4, #0
    556c:	401d      	ands	r5, r3
    556e:	e5fc      	b.n	516a <__aeabi_dmul+0xce>
    5570:	2400      	movs	r4, #0
    5572:	e7e2      	b.n	553a <__aeabi_dmul+0x49e>
    5574:	2280      	movs	r2, #128	; 0x80
    5576:	2501      	movs	r5, #1
    5578:	0312      	lsls	r2, r2, #12
    557a:	4322      	orrs	r2, r4
    557c:	9901      	ldr	r1, [sp, #4]
    557e:	0312      	lsls	r2, r2, #12
    5580:	0b12      	lsrs	r2, r2, #12
    5582:	400d      	ands	r5, r1
    5584:	4699      	mov	r9, r3
    5586:	4c04      	ldr	r4, [pc, #16]	; (5598 <__aeabi_dmul+0x4fc>)
    5588:	e5ef      	b.n	516a <__aeabi_dmul+0xce>
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	000003ff 	.word	0x000003ff
    5590:	feffffff 	.word	0xfeffffff
    5594:	000007fe 	.word	0x000007fe
    5598:	000007ff 	.word	0x000007ff

0000559c <__aeabi_dsub>:
    559c:	b5f0      	push	{r4, r5, r6, r7, lr}
    559e:	4646      	mov	r6, r8
    55a0:	46d6      	mov	lr, sl
    55a2:	464f      	mov	r7, r9
    55a4:	030c      	lsls	r4, r1, #12
    55a6:	b5c0      	push	{r6, r7, lr}
    55a8:	0fcd      	lsrs	r5, r1, #31
    55aa:	004e      	lsls	r6, r1, #1
    55ac:	0a61      	lsrs	r1, r4, #9
    55ae:	0f44      	lsrs	r4, r0, #29
    55b0:	430c      	orrs	r4, r1
    55b2:	00c1      	lsls	r1, r0, #3
    55b4:	0058      	lsls	r0, r3, #1
    55b6:	0d40      	lsrs	r0, r0, #21
    55b8:	4684      	mov	ip, r0
    55ba:	468a      	mov	sl, r1
    55bc:	000f      	movs	r7, r1
    55be:	0319      	lsls	r1, r3, #12
    55c0:	0f50      	lsrs	r0, r2, #29
    55c2:	0a49      	lsrs	r1, r1, #9
    55c4:	4301      	orrs	r1, r0
    55c6:	48c6      	ldr	r0, [pc, #792]	; (58e0 <__aeabi_dsub+0x344>)
    55c8:	0d76      	lsrs	r6, r6, #21
    55ca:	46a8      	mov	r8, r5
    55cc:	0fdb      	lsrs	r3, r3, #31
    55ce:	00d2      	lsls	r2, r2, #3
    55d0:	4584      	cmp	ip, r0
    55d2:	d100      	bne.n	55d6 <__aeabi_dsub+0x3a>
    55d4:	e0d8      	b.n	5788 <__aeabi_dsub+0x1ec>
    55d6:	2001      	movs	r0, #1
    55d8:	4043      	eors	r3, r0
    55da:	42ab      	cmp	r3, r5
    55dc:	d100      	bne.n	55e0 <__aeabi_dsub+0x44>
    55de:	e0a6      	b.n	572e <__aeabi_dsub+0x192>
    55e0:	4660      	mov	r0, ip
    55e2:	1a35      	subs	r5, r6, r0
    55e4:	2d00      	cmp	r5, #0
    55e6:	dc00      	bgt.n	55ea <__aeabi_dsub+0x4e>
    55e8:	e105      	b.n	57f6 <__aeabi_dsub+0x25a>
    55ea:	2800      	cmp	r0, #0
    55ec:	d110      	bne.n	5610 <__aeabi_dsub+0x74>
    55ee:	000b      	movs	r3, r1
    55f0:	4313      	orrs	r3, r2
    55f2:	d100      	bne.n	55f6 <__aeabi_dsub+0x5a>
    55f4:	e0d7      	b.n	57a6 <__aeabi_dsub+0x20a>
    55f6:	1e6b      	subs	r3, r5, #1
    55f8:	2b00      	cmp	r3, #0
    55fa:	d000      	beq.n	55fe <__aeabi_dsub+0x62>
    55fc:	e14b      	b.n	5896 <__aeabi_dsub+0x2fa>
    55fe:	4653      	mov	r3, sl
    5600:	1a9f      	subs	r7, r3, r2
    5602:	45ba      	cmp	sl, r7
    5604:	4180      	sbcs	r0, r0
    5606:	1a64      	subs	r4, r4, r1
    5608:	4240      	negs	r0, r0
    560a:	1a24      	subs	r4, r4, r0
    560c:	2601      	movs	r6, #1
    560e:	e01e      	b.n	564e <__aeabi_dsub+0xb2>
    5610:	4bb3      	ldr	r3, [pc, #716]	; (58e0 <__aeabi_dsub+0x344>)
    5612:	429e      	cmp	r6, r3
    5614:	d048      	beq.n	56a8 <__aeabi_dsub+0x10c>
    5616:	2380      	movs	r3, #128	; 0x80
    5618:	041b      	lsls	r3, r3, #16
    561a:	4319      	orrs	r1, r3
    561c:	2d38      	cmp	r5, #56	; 0x38
    561e:	dd00      	ble.n	5622 <__aeabi_dsub+0x86>
    5620:	e119      	b.n	5856 <__aeabi_dsub+0x2ba>
    5622:	2d1f      	cmp	r5, #31
    5624:	dd00      	ble.n	5628 <__aeabi_dsub+0x8c>
    5626:	e14c      	b.n	58c2 <__aeabi_dsub+0x326>
    5628:	2320      	movs	r3, #32
    562a:	000f      	movs	r7, r1
    562c:	1b5b      	subs	r3, r3, r5
    562e:	0010      	movs	r0, r2
    5630:	409a      	lsls	r2, r3
    5632:	409f      	lsls	r7, r3
    5634:	40e8      	lsrs	r0, r5
    5636:	1e53      	subs	r3, r2, #1
    5638:	419a      	sbcs	r2, r3
    563a:	40e9      	lsrs	r1, r5
    563c:	4307      	orrs	r7, r0
    563e:	4317      	orrs	r7, r2
    5640:	4653      	mov	r3, sl
    5642:	1bdf      	subs	r7, r3, r7
    5644:	1a61      	subs	r1, r4, r1
    5646:	45ba      	cmp	sl, r7
    5648:	41a4      	sbcs	r4, r4
    564a:	4264      	negs	r4, r4
    564c:	1b0c      	subs	r4, r1, r4
    564e:	0223      	lsls	r3, r4, #8
    5650:	d400      	bmi.n	5654 <__aeabi_dsub+0xb8>
    5652:	e0c5      	b.n	57e0 <__aeabi_dsub+0x244>
    5654:	0264      	lsls	r4, r4, #9
    5656:	0a65      	lsrs	r5, r4, #9
    5658:	2d00      	cmp	r5, #0
    565a:	d100      	bne.n	565e <__aeabi_dsub+0xc2>
    565c:	e0f6      	b.n	584c <__aeabi_dsub+0x2b0>
    565e:	0028      	movs	r0, r5
    5660:	f000 fb1e 	bl	5ca0 <__clzsi2>
    5664:	0003      	movs	r3, r0
    5666:	3b08      	subs	r3, #8
    5668:	2b1f      	cmp	r3, #31
    566a:	dd00      	ble.n	566e <__aeabi_dsub+0xd2>
    566c:	e0e9      	b.n	5842 <__aeabi_dsub+0x2a6>
    566e:	2220      	movs	r2, #32
    5670:	003c      	movs	r4, r7
    5672:	1ad2      	subs	r2, r2, r3
    5674:	409d      	lsls	r5, r3
    5676:	40d4      	lsrs	r4, r2
    5678:	409f      	lsls	r7, r3
    567a:	4325      	orrs	r5, r4
    567c:	429e      	cmp	r6, r3
    567e:	dd00      	ble.n	5682 <__aeabi_dsub+0xe6>
    5680:	e0db      	b.n	583a <__aeabi_dsub+0x29e>
    5682:	1b9e      	subs	r6, r3, r6
    5684:	1c73      	adds	r3, r6, #1
    5686:	2b1f      	cmp	r3, #31
    5688:	dd00      	ble.n	568c <__aeabi_dsub+0xf0>
    568a:	e10a      	b.n	58a2 <__aeabi_dsub+0x306>
    568c:	2220      	movs	r2, #32
    568e:	0038      	movs	r0, r7
    5690:	1ad2      	subs	r2, r2, r3
    5692:	0029      	movs	r1, r5
    5694:	4097      	lsls	r7, r2
    5696:	002c      	movs	r4, r5
    5698:	4091      	lsls	r1, r2
    569a:	40d8      	lsrs	r0, r3
    569c:	1e7a      	subs	r2, r7, #1
    569e:	4197      	sbcs	r7, r2
    56a0:	40dc      	lsrs	r4, r3
    56a2:	2600      	movs	r6, #0
    56a4:	4301      	orrs	r1, r0
    56a6:	430f      	orrs	r7, r1
    56a8:	077b      	lsls	r3, r7, #29
    56aa:	d009      	beq.n	56c0 <__aeabi_dsub+0x124>
    56ac:	230f      	movs	r3, #15
    56ae:	403b      	ands	r3, r7
    56b0:	2b04      	cmp	r3, #4
    56b2:	d005      	beq.n	56c0 <__aeabi_dsub+0x124>
    56b4:	1d3b      	adds	r3, r7, #4
    56b6:	42bb      	cmp	r3, r7
    56b8:	41bf      	sbcs	r7, r7
    56ba:	427f      	negs	r7, r7
    56bc:	19e4      	adds	r4, r4, r7
    56be:	001f      	movs	r7, r3
    56c0:	0223      	lsls	r3, r4, #8
    56c2:	d525      	bpl.n	5710 <__aeabi_dsub+0x174>
    56c4:	4b86      	ldr	r3, [pc, #536]	; (58e0 <__aeabi_dsub+0x344>)
    56c6:	3601      	adds	r6, #1
    56c8:	429e      	cmp	r6, r3
    56ca:	d100      	bne.n	56ce <__aeabi_dsub+0x132>
    56cc:	e0af      	b.n	582e <__aeabi_dsub+0x292>
    56ce:	4b85      	ldr	r3, [pc, #532]	; (58e4 <__aeabi_dsub+0x348>)
    56d0:	2501      	movs	r5, #1
    56d2:	401c      	ands	r4, r3
    56d4:	4643      	mov	r3, r8
    56d6:	0762      	lsls	r2, r4, #29
    56d8:	08ff      	lsrs	r7, r7, #3
    56da:	0264      	lsls	r4, r4, #9
    56dc:	0576      	lsls	r6, r6, #21
    56de:	4317      	orrs	r7, r2
    56e0:	0b24      	lsrs	r4, r4, #12
    56e2:	0d76      	lsrs	r6, r6, #21
    56e4:	401d      	ands	r5, r3
    56e6:	2100      	movs	r1, #0
    56e8:	0324      	lsls	r4, r4, #12
    56ea:	0b23      	lsrs	r3, r4, #12
    56ec:	0d0c      	lsrs	r4, r1, #20
    56ee:	4a7e      	ldr	r2, [pc, #504]	; (58e8 <__aeabi_dsub+0x34c>)
    56f0:	0524      	lsls	r4, r4, #20
    56f2:	431c      	orrs	r4, r3
    56f4:	4014      	ands	r4, r2
    56f6:	0533      	lsls	r3, r6, #20
    56f8:	4323      	orrs	r3, r4
    56fa:	005b      	lsls	r3, r3, #1
    56fc:	07ed      	lsls	r5, r5, #31
    56fe:	085b      	lsrs	r3, r3, #1
    5700:	432b      	orrs	r3, r5
    5702:	0038      	movs	r0, r7
    5704:	0019      	movs	r1, r3
    5706:	bc1c      	pop	{r2, r3, r4}
    5708:	4690      	mov	r8, r2
    570a:	4699      	mov	r9, r3
    570c:	46a2      	mov	sl, r4
    570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5710:	2501      	movs	r5, #1
    5712:	4643      	mov	r3, r8
    5714:	0762      	lsls	r2, r4, #29
    5716:	08ff      	lsrs	r7, r7, #3
    5718:	4317      	orrs	r7, r2
    571a:	08e4      	lsrs	r4, r4, #3
    571c:	401d      	ands	r5, r3
    571e:	4b70      	ldr	r3, [pc, #448]	; (58e0 <__aeabi_dsub+0x344>)
    5720:	429e      	cmp	r6, r3
    5722:	d036      	beq.n	5792 <__aeabi_dsub+0x1f6>
    5724:	0324      	lsls	r4, r4, #12
    5726:	0576      	lsls	r6, r6, #21
    5728:	0b24      	lsrs	r4, r4, #12
    572a:	0d76      	lsrs	r6, r6, #21
    572c:	e7db      	b.n	56e6 <__aeabi_dsub+0x14a>
    572e:	4663      	mov	r3, ip
    5730:	1af3      	subs	r3, r6, r3
    5732:	2b00      	cmp	r3, #0
    5734:	dc00      	bgt.n	5738 <__aeabi_dsub+0x19c>
    5736:	e094      	b.n	5862 <__aeabi_dsub+0x2c6>
    5738:	4660      	mov	r0, ip
    573a:	2800      	cmp	r0, #0
    573c:	d035      	beq.n	57aa <__aeabi_dsub+0x20e>
    573e:	4868      	ldr	r0, [pc, #416]	; (58e0 <__aeabi_dsub+0x344>)
    5740:	4286      	cmp	r6, r0
    5742:	d0b1      	beq.n	56a8 <__aeabi_dsub+0x10c>
    5744:	2780      	movs	r7, #128	; 0x80
    5746:	043f      	lsls	r7, r7, #16
    5748:	4339      	orrs	r1, r7
    574a:	2b38      	cmp	r3, #56	; 0x38
    574c:	dc00      	bgt.n	5750 <__aeabi_dsub+0x1b4>
    574e:	e0fd      	b.n	594c <__aeabi_dsub+0x3b0>
    5750:	430a      	orrs	r2, r1
    5752:	0017      	movs	r7, r2
    5754:	2100      	movs	r1, #0
    5756:	1e7a      	subs	r2, r7, #1
    5758:	4197      	sbcs	r7, r2
    575a:	4457      	add	r7, sl
    575c:	4557      	cmp	r7, sl
    575e:	4180      	sbcs	r0, r0
    5760:	1909      	adds	r1, r1, r4
    5762:	4244      	negs	r4, r0
    5764:	190c      	adds	r4, r1, r4
    5766:	0223      	lsls	r3, r4, #8
    5768:	d53a      	bpl.n	57e0 <__aeabi_dsub+0x244>
    576a:	4b5d      	ldr	r3, [pc, #372]	; (58e0 <__aeabi_dsub+0x344>)
    576c:	3601      	adds	r6, #1
    576e:	429e      	cmp	r6, r3
    5770:	d100      	bne.n	5774 <__aeabi_dsub+0x1d8>
    5772:	e14b      	b.n	5a0c <__aeabi_dsub+0x470>
    5774:	2201      	movs	r2, #1
    5776:	4b5b      	ldr	r3, [pc, #364]	; (58e4 <__aeabi_dsub+0x348>)
    5778:	401c      	ands	r4, r3
    577a:	087b      	lsrs	r3, r7, #1
    577c:	4017      	ands	r7, r2
    577e:	431f      	orrs	r7, r3
    5780:	07e2      	lsls	r2, r4, #31
    5782:	4317      	orrs	r7, r2
    5784:	0864      	lsrs	r4, r4, #1
    5786:	e78f      	b.n	56a8 <__aeabi_dsub+0x10c>
    5788:	0008      	movs	r0, r1
    578a:	4310      	orrs	r0, r2
    578c:	d000      	beq.n	5790 <__aeabi_dsub+0x1f4>
    578e:	e724      	b.n	55da <__aeabi_dsub+0x3e>
    5790:	e721      	b.n	55d6 <__aeabi_dsub+0x3a>
    5792:	0023      	movs	r3, r4
    5794:	433b      	orrs	r3, r7
    5796:	d100      	bne.n	579a <__aeabi_dsub+0x1fe>
    5798:	e1b9      	b.n	5b0e <__aeabi_dsub+0x572>
    579a:	2280      	movs	r2, #128	; 0x80
    579c:	0312      	lsls	r2, r2, #12
    579e:	4314      	orrs	r4, r2
    57a0:	0324      	lsls	r4, r4, #12
    57a2:	0b24      	lsrs	r4, r4, #12
    57a4:	e79f      	b.n	56e6 <__aeabi_dsub+0x14a>
    57a6:	002e      	movs	r6, r5
    57a8:	e77e      	b.n	56a8 <__aeabi_dsub+0x10c>
    57aa:	0008      	movs	r0, r1
    57ac:	4310      	orrs	r0, r2
    57ae:	d100      	bne.n	57b2 <__aeabi_dsub+0x216>
    57b0:	e0ca      	b.n	5948 <__aeabi_dsub+0x3ac>
    57b2:	1e58      	subs	r0, r3, #1
    57b4:	4684      	mov	ip, r0
    57b6:	2800      	cmp	r0, #0
    57b8:	d000      	beq.n	57bc <__aeabi_dsub+0x220>
    57ba:	e0e7      	b.n	598c <__aeabi_dsub+0x3f0>
    57bc:	4452      	add	r2, sl
    57be:	4552      	cmp	r2, sl
    57c0:	4180      	sbcs	r0, r0
    57c2:	1864      	adds	r4, r4, r1
    57c4:	4240      	negs	r0, r0
    57c6:	1824      	adds	r4, r4, r0
    57c8:	0017      	movs	r7, r2
    57ca:	2601      	movs	r6, #1
    57cc:	0223      	lsls	r3, r4, #8
    57ce:	d507      	bpl.n	57e0 <__aeabi_dsub+0x244>
    57d0:	2602      	movs	r6, #2
    57d2:	e7cf      	b.n	5774 <__aeabi_dsub+0x1d8>
    57d4:	4664      	mov	r4, ip
    57d6:	432c      	orrs	r4, r5
    57d8:	d100      	bne.n	57dc <__aeabi_dsub+0x240>
    57da:	e1b3      	b.n	5b44 <__aeabi_dsub+0x5a8>
    57dc:	002c      	movs	r4, r5
    57de:	4667      	mov	r7, ip
    57e0:	077b      	lsls	r3, r7, #29
    57e2:	d000      	beq.n	57e6 <__aeabi_dsub+0x24a>
    57e4:	e762      	b.n	56ac <__aeabi_dsub+0x110>
    57e6:	0763      	lsls	r3, r4, #29
    57e8:	08ff      	lsrs	r7, r7, #3
    57ea:	431f      	orrs	r7, r3
    57ec:	2501      	movs	r5, #1
    57ee:	4643      	mov	r3, r8
    57f0:	08e4      	lsrs	r4, r4, #3
    57f2:	401d      	ands	r5, r3
    57f4:	e793      	b.n	571e <__aeabi_dsub+0x182>
    57f6:	2d00      	cmp	r5, #0
    57f8:	d178      	bne.n	58ec <__aeabi_dsub+0x350>
    57fa:	1c75      	adds	r5, r6, #1
    57fc:	056d      	lsls	r5, r5, #21
    57fe:	0d6d      	lsrs	r5, r5, #21
    5800:	2d01      	cmp	r5, #1
    5802:	dc00      	bgt.n	5806 <__aeabi_dsub+0x26a>
    5804:	e0f2      	b.n	59ec <__aeabi_dsub+0x450>
    5806:	4650      	mov	r0, sl
    5808:	1a80      	subs	r0, r0, r2
    580a:	4582      	cmp	sl, r0
    580c:	41bf      	sbcs	r7, r7
    580e:	1a65      	subs	r5, r4, r1
    5810:	427f      	negs	r7, r7
    5812:	1bed      	subs	r5, r5, r7
    5814:	4684      	mov	ip, r0
    5816:	0228      	lsls	r0, r5, #8
    5818:	d400      	bmi.n	581c <__aeabi_dsub+0x280>
    581a:	e08c      	b.n	5936 <__aeabi_dsub+0x39a>
    581c:	4650      	mov	r0, sl
    581e:	1a17      	subs	r7, r2, r0
    5820:	42ba      	cmp	r2, r7
    5822:	4192      	sbcs	r2, r2
    5824:	1b0c      	subs	r4, r1, r4
    5826:	4255      	negs	r5, r2
    5828:	1b65      	subs	r5, r4, r5
    582a:	4698      	mov	r8, r3
    582c:	e714      	b.n	5658 <__aeabi_dsub+0xbc>
    582e:	2501      	movs	r5, #1
    5830:	4643      	mov	r3, r8
    5832:	2400      	movs	r4, #0
    5834:	401d      	ands	r5, r3
    5836:	2700      	movs	r7, #0
    5838:	e755      	b.n	56e6 <__aeabi_dsub+0x14a>
    583a:	4c2a      	ldr	r4, [pc, #168]	; (58e4 <__aeabi_dsub+0x348>)
    583c:	1af6      	subs	r6, r6, r3
    583e:	402c      	ands	r4, r5
    5840:	e732      	b.n	56a8 <__aeabi_dsub+0x10c>
    5842:	003d      	movs	r5, r7
    5844:	3828      	subs	r0, #40	; 0x28
    5846:	4085      	lsls	r5, r0
    5848:	2700      	movs	r7, #0
    584a:	e717      	b.n	567c <__aeabi_dsub+0xe0>
    584c:	0038      	movs	r0, r7
    584e:	f000 fa27 	bl	5ca0 <__clzsi2>
    5852:	3020      	adds	r0, #32
    5854:	e706      	b.n	5664 <__aeabi_dsub+0xc8>
    5856:	430a      	orrs	r2, r1
    5858:	0017      	movs	r7, r2
    585a:	2100      	movs	r1, #0
    585c:	1e7a      	subs	r2, r7, #1
    585e:	4197      	sbcs	r7, r2
    5860:	e6ee      	b.n	5640 <__aeabi_dsub+0xa4>
    5862:	2b00      	cmp	r3, #0
    5864:	d000      	beq.n	5868 <__aeabi_dsub+0x2cc>
    5866:	e0e5      	b.n	5a34 <__aeabi_dsub+0x498>
    5868:	1c73      	adds	r3, r6, #1
    586a:	469c      	mov	ip, r3
    586c:	055b      	lsls	r3, r3, #21
    586e:	0d5b      	lsrs	r3, r3, #21
    5870:	2b01      	cmp	r3, #1
    5872:	dc00      	bgt.n	5876 <__aeabi_dsub+0x2da>
    5874:	e09f      	b.n	59b6 <__aeabi_dsub+0x41a>
    5876:	4b1a      	ldr	r3, [pc, #104]	; (58e0 <__aeabi_dsub+0x344>)
    5878:	459c      	cmp	ip, r3
    587a:	d100      	bne.n	587e <__aeabi_dsub+0x2e2>
    587c:	e0c5      	b.n	5a0a <__aeabi_dsub+0x46e>
    587e:	4452      	add	r2, sl
    5880:	4552      	cmp	r2, sl
    5882:	4180      	sbcs	r0, r0
    5884:	1864      	adds	r4, r4, r1
    5886:	4240      	negs	r0, r0
    5888:	1824      	adds	r4, r4, r0
    588a:	07e7      	lsls	r7, r4, #31
    588c:	0852      	lsrs	r2, r2, #1
    588e:	4317      	orrs	r7, r2
    5890:	0864      	lsrs	r4, r4, #1
    5892:	4666      	mov	r6, ip
    5894:	e708      	b.n	56a8 <__aeabi_dsub+0x10c>
    5896:	4812      	ldr	r0, [pc, #72]	; (58e0 <__aeabi_dsub+0x344>)
    5898:	4285      	cmp	r5, r0
    589a:	d100      	bne.n	589e <__aeabi_dsub+0x302>
    589c:	e085      	b.n	59aa <__aeabi_dsub+0x40e>
    589e:	001d      	movs	r5, r3
    58a0:	e6bc      	b.n	561c <__aeabi_dsub+0x80>
    58a2:	0029      	movs	r1, r5
    58a4:	3e1f      	subs	r6, #31
    58a6:	40f1      	lsrs	r1, r6
    58a8:	2b20      	cmp	r3, #32
    58aa:	d100      	bne.n	58ae <__aeabi_dsub+0x312>
    58ac:	e07f      	b.n	59ae <__aeabi_dsub+0x412>
    58ae:	2240      	movs	r2, #64	; 0x40
    58b0:	1ad3      	subs	r3, r2, r3
    58b2:	409d      	lsls	r5, r3
    58b4:	432f      	orrs	r7, r5
    58b6:	1e7d      	subs	r5, r7, #1
    58b8:	41af      	sbcs	r7, r5
    58ba:	2400      	movs	r4, #0
    58bc:	430f      	orrs	r7, r1
    58be:	2600      	movs	r6, #0
    58c0:	e78e      	b.n	57e0 <__aeabi_dsub+0x244>
    58c2:	002b      	movs	r3, r5
    58c4:	000f      	movs	r7, r1
    58c6:	3b20      	subs	r3, #32
    58c8:	40df      	lsrs	r7, r3
    58ca:	2d20      	cmp	r5, #32
    58cc:	d071      	beq.n	59b2 <__aeabi_dsub+0x416>
    58ce:	2340      	movs	r3, #64	; 0x40
    58d0:	1b5d      	subs	r5, r3, r5
    58d2:	40a9      	lsls	r1, r5
    58d4:	430a      	orrs	r2, r1
    58d6:	1e51      	subs	r1, r2, #1
    58d8:	418a      	sbcs	r2, r1
    58da:	2100      	movs	r1, #0
    58dc:	4317      	orrs	r7, r2
    58de:	e6af      	b.n	5640 <__aeabi_dsub+0xa4>
    58e0:	000007ff 	.word	0x000007ff
    58e4:	ff7fffff 	.word	0xff7fffff
    58e8:	800fffff 	.word	0x800fffff
    58ec:	2e00      	cmp	r6, #0
    58ee:	d03e      	beq.n	596e <__aeabi_dsub+0x3d2>
    58f0:	4eb3      	ldr	r6, [pc, #716]	; (5bc0 <__aeabi_dsub+0x624>)
    58f2:	45b4      	cmp	ip, r6
    58f4:	d045      	beq.n	5982 <__aeabi_dsub+0x3e6>
    58f6:	2680      	movs	r6, #128	; 0x80
    58f8:	0436      	lsls	r6, r6, #16
    58fa:	426d      	negs	r5, r5
    58fc:	4334      	orrs	r4, r6
    58fe:	2d38      	cmp	r5, #56	; 0x38
    5900:	dd00      	ble.n	5904 <__aeabi_dsub+0x368>
    5902:	e0a8      	b.n	5a56 <__aeabi_dsub+0x4ba>
    5904:	2d1f      	cmp	r5, #31
    5906:	dd00      	ble.n	590a <__aeabi_dsub+0x36e>
    5908:	e11f      	b.n	5b4a <__aeabi_dsub+0x5ae>
    590a:	2620      	movs	r6, #32
    590c:	0027      	movs	r7, r4
    590e:	4650      	mov	r0, sl
    5910:	1b76      	subs	r6, r6, r5
    5912:	40b7      	lsls	r7, r6
    5914:	40e8      	lsrs	r0, r5
    5916:	4307      	orrs	r7, r0
    5918:	4650      	mov	r0, sl
    591a:	40b0      	lsls	r0, r6
    591c:	1e46      	subs	r6, r0, #1
    591e:	41b0      	sbcs	r0, r6
    5920:	40ec      	lsrs	r4, r5
    5922:	4338      	orrs	r0, r7
    5924:	1a17      	subs	r7, r2, r0
    5926:	42ba      	cmp	r2, r7
    5928:	4192      	sbcs	r2, r2
    592a:	1b0c      	subs	r4, r1, r4
    592c:	4252      	negs	r2, r2
    592e:	1aa4      	subs	r4, r4, r2
    5930:	4666      	mov	r6, ip
    5932:	4698      	mov	r8, r3
    5934:	e68b      	b.n	564e <__aeabi_dsub+0xb2>
    5936:	4664      	mov	r4, ip
    5938:	4667      	mov	r7, ip
    593a:	432c      	orrs	r4, r5
    593c:	d000      	beq.n	5940 <__aeabi_dsub+0x3a4>
    593e:	e68b      	b.n	5658 <__aeabi_dsub+0xbc>
    5940:	2500      	movs	r5, #0
    5942:	2600      	movs	r6, #0
    5944:	2700      	movs	r7, #0
    5946:	e6ea      	b.n	571e <__aeabi_dsub+0x182>
    5948:	001e      	movs	r6, r3
    594a:	e6ad      	b.n	56a8 <__aeabi_dsub+0x10c>
    594c:	2b1f      	cmp	r3, #31
    594e:	dc60      	bgt.n	5a12 <__aeabi_dsub+0x476>
    5950:	2720      	movs	r7, #32
    5952:	1af8      	subs	r0, r7, r3
    5954:	000f      	movs	r7, r1
    5956:	4684      	mov	ip, r0
    5958:	4087      	lsls	r7, r0
    595a:	0010      	movs	r0, r2
    595c:	40d8      	lsrs	r0, r3
    595e:	4307      	orrs	r7, r0
    5960:	4660      	mov	r0, ip
    5962:	4082      	lsls	r2, r0
    5964:	1e50      	subs	r0, r2, #1
    5966:	4182      	sbcs	r2, r0
    5968:	40d9      	lsrs	r1, r3
    596a:	4317      	orrs	r7, r2
    596c:	e6f5      	b.n	575a <__aeabi_dsub+0x1be>
    596e:	0026      	movs	r6, r4
    5970:	4650      	mov	r0, sl
    5972:	4306      	orrs	r6, r0
    5974:	d005      	beq.n	5982 <__aeabi_dsub+0x3e6>
    5976:	43ed      	mvns	r5, r5
    5978:	2d00      	cmp	r5, #0
    597a:	d0d3      	beq.n	5924 <__aeabi_dsub+0x388>
    597c:	4e90      	ldr	r6, [pc, #576]	; (5bc0 <__aeabi_dsub+0x624>)
    597e:	45b4      	cmp	ip, r6
    5980:	d1bd      	bne.n	58fe <__aeabi_dsub+0x362>
    5982:	000c      	movs	r4, r1
    5984:	0017      	movs	r7, r2
    5986:	4666      	mov	r6, ip
    5988:	4698      	mov	r8, r3
    598a:	e68d      	b.n	56a8 <__aeabi_dsub+0x10c>
    598c:	488c      	ldr	r0, [pc, #560]	; (5bc0 <__aeabi_dsub+0x624>)
    598e:	4283      	cmp	r3, r0
    5990:	d00b      	beq.n	59aa <__aeabi_dsub+0x40e>
    5992:	4663      	mov	r3, ip
    5994:	e6d9      	b.n	574a <__aeabi_dsub+0x1ae>
    5996:	2d00      	cmp	r5, #0
    5998:	d000      	beq.n	599c <__aeabi_dsub+0x400>
    599a:	e096      	b.n	5aca <__aeabi_dsub+0x52e>
    599c:	0008      	movs	r0, r1
    599e:	4310      	orrs	r0, r2
    59a0:	d100      	bne.n	59a4 <__aeabi_dsub+0x408>
    59a2:	e0e2      	b.n	5b6a <__aeabi_dsub+0x5ce>
    59a4:	000c      	movs	r4, r1
    59a6:	0017      	movs	r7, r2
    59a8:	4698      	mov	r8, r3
    59aa:	4e85      	ldr	r6, [pc, #532]	; (5bc0 <__aeabi_dsub+0x624>)
    59ac:	e67c      	b.n	56a8 <__aeabi_dsub+0x10c>
    59ae:	2500      	movs	r5, #0
    59b0:	e780      	b.n	58b4 <__aeabi_dsub+0x318>
    59b2:	2100      	movs	r1, #0
    59b4:	e78e      	b.n	58d4 <__aeabi_dsub+0x338>
    59b6:	0023      	movs	r3, r4
    59b8:	4650      	mov	r0, sl
    59ba:	4303      	orrs	r3, r0
    59bc:	2e00      	cmp	r6, #0
    59be:	d000      	beq.n	59c2 <__aeabi_dsub+0x426>
    59c0:	e0a8      	b.n	5b14 <__aeabi_dsub+0x578>
    59c2:	2b00      	cmp	r3, #0
    59c4:	d100      	bne.n	59c8 <__aeabi_dsub+0x42c>
    59c6:	e0de      	b.n	5b86 <__aeabi_dsub+0x5ea>
    59c8:	000b      	movs	r3, r1
    59ca:	4313      	orrs	r3, r2
    59cc:	d100      	bne.n	59d0 <__aeabi_dsub+0x434>
    59ce:	e66b      	b.n	56a8 <__aeabi_dsub+0x10c>
    59d0:	4452      	add	r2, sl
    59d2:	4552      	cmp	r2, sl
    59d4:	4180      	sbcs	r0, r0
    59d6:	1864      	adds	r4, r4, r1
    59d8:	4240      	negs	r0, r0
    59da:	1824      	adds	r4, r4, r0
    59dc:	0017      	movs	r7, r2
    59de:	0223      	lsls	r3, r4, #8
    59e0:	d400      	bmi.n	59e4 <__aeabi_dsub+0x448>
    59e2:	e6fd      	b.n	57e0 <__aeabi_dsub+0x244>
    59e4:	4b77      	ldr	r3, [pc, #476]	; (5bc4 <__aeabi_dsub+0x628>)
    59e6:	4666      	mov	r6, ip
    59e8:	401c      	ands	r4, r3
    59ea:	e65d      	b.n	56a8 <__aeabi_dsub+0x10c>
    59ec:	0025      	movs	r5, r4
    59ee:	4650      	mov	r0, sl
    59f0:	4305      	orrs	r5, r0
    59f2:	2e00      	cmp	r6, #0
    59f4:	d1cf      	bne.n	5996 <__aeabi_dsub+0x3fa>
    59f6:	2d00      	cmp	r5, #0
    59f8:	d14f      	bne.n	5a9a <__aeabi_dsub+0x4fe>
    59fa:	000c      	movs	r4, r1
    59fc:	4314      	orrs	r4, r2
    59fe:	d100      	bne.n	5a02 <__aeabi_dsub+0x466>
    5a00:	e0a0      	b.n	5b44 <__aeabi_dsub+0x5a8>
    5a02:	000c      	movs	r4, r1
    5a04:	0017      	movs	r7, r2
    5a06:	4698      	mov	r8, r3
    5a08:	e64e      	b.n	56a8 <__aeabi_dsub+0x10c>
    5a0a:	4666      	mov	r6, ip
    5a0c:	2400      	movs	r4, #0
    5a0e:	2700      	movs	r7, #0
    5a10:	e685      	b.n	571e <__aeabi_dsub+0x182>
    5a12:	001f      	movs	r7, r3
    5a14:	0008      	movs	r0, r1
    5a16:	3f20      	subs	r7, #32
    5a18:	40f8      	lsrs	r0, r7
    5a1a:	0007      	movs	r7, r0
    5a1c:	2b20      	cmp	r3, #32
    5a1e:	d100      	bne.n	5a22 <__aeabi_dsub+0x486>
    5a20:	e08e      	b.n	5b40 <__aeabi_dsub+0x5a4>
    5a22:	2040      	movs	r0, #64	; 0x40
    5a24:	1ac3      	subs	r3, r0, r3
    5a26:	4099      	lsls	r1, r3
    5a28:	430a      	orrs	r2, r1
    5a2a:	1e51      	subs	r1, r2, #1
    5a2c:	418a      	sbcs	r2, r1
    5a2e:	2100      	movs	r1, #0
    5a30:	4317      	orrs	r7, r2
    5a32:	e692      	b.n	575a <__aeabi_dsub+0x1be>
    5a34:	2e00      	cmp	r6, #0
    5a36:	d114      	bne.n	5a62 <__aeabi_dsub+0x4c6>
    5a38:	0026      	movs	r6, r4
    5a3a:	4650      	mov	r0, sl
    5a3c:	4306      	orrs	r6, r0
    5a3e:	d062      	beq.n	5b06 <__aeabi_dsub+0x56a>
    5a40:	43db      	mvns	r3, r3
    5a42:	2b00      	cmp	r3, #0
    5a44:	d15c      	bne.n	5b00 <__aeabi_dsub+0x564>
    5a46:	1887      	adds	r7, r0, r2
    5a48:	4297      	cmp	r7, r2
    5a4a:	4192      	sbcs	r2, r2
    5a4c:	1864      	adds	r4, r4, r1
    5a4e:	4252      	negs	r2, r2
    5a50:	18a4      	adds	r4, r4, r2
    5a52:	4666      	mov	r6, ip
    5a54:	e687      	b.n	5766 <__aeabi_dsub+0x1ca>
    5a56:	4650      	mov	r0, sl
    5a58:	4320      	orrs	r0, r4
    5a5a:	1e44      	subs	r4, r0, #1
    5a5c:	41a0      	sbcs	r0, r4
    5a5e:	2400      	movs	r4, #0
    5a60:	e760      	b.n	5924 <__aeabi_dsub+0x388>
    5a62:	4e57      	ldr	r6, [pc, #348]	; (5bc0 <__aeabi_dsub+0x624>)
    5a64:	45b4      	cmp	ip, r6
    5a66:	d04e      	beq.n	5b06 <__aeabi_dsub+0x56a>
    5a68:	2680      	movs	r6, #128	; 0x80
    5a6a:	0436      	lsls	r6, r6, #16
    5a6c:	425b      	negs	r3, r3
    5a6e:	4334      	orrs	r4, r6
    5a70:	2b38      	cmp	r3, #56	; 0x38
    5a72:	dd00      	ble.n	5a76 <__aeabi_dsub+0x4da>
    5a74:	e07f      	b.n	5b76 <__aeabi_dsub+0x5da>
    5a76:	2b1f      	cmp	r3, #31
    5a78:	dd00      	ble.n	5a7c <__aeabi_dsub+0x4e0>
    5a7a:	e08b      	b.n	5b94 <__aeabi_dsub+0x5f8>
    5a7c:	2620      	movs	r6, #32
    5a7e:	0027      	movs	r7, r4
    5a80:	4650      	mov	r0, sl
    5a82:	1af6      	subs	r6, r6, r3
    5a84:	40b7      	lsls	r7, r6
    5a86:	40d8      	lsrs	r0, r3
    5a88:	4307      	orrs	r7, r0
    5a8a:	4650      	mov	r0, sl
    5a8c:	40b0      	lsls	r0, r6
    5a8e:	1e46      	subs	r6, r0, #1
    5a90:	41b0      	sbcs	r0, r6
    5a92:	4307      	orrs	r7, r0
    5a94:	40dc      	lsrs	r4, r3
    5a96:	18bf      	adds	r7, r7, r2
    5a98:	e7d6      	b.n	5a48 <__aeabi_dsub+0x4ac>
    5a9a:	000d      	movs	r5, r1
    5a9c:	4315      	orrs	r5, r2
    5a9e:	d100      	bne.n	5aa2 <__aeabi_dsub+0x506>
    5aa0:	e602      	b.n	56a8 <__aeabi_dsub+0x10c>
    5aa2:	4650      	mov	r0, sl
    5aa4:	1a80      	subs	r0, r0, r2
    5aa6:	4582      	cmp	sl, r0
    5aa8:	41bf      	sbcs	r7, r7
    5aaa:	1a65      	subs	r5, r4, r1
    5aac:	427f      	negs	r7, r7
    5aae:	1bed      	subs	r5, r5, r7
    5ab0:	4684      	mov	ip, r0
    5ab2:	0228      	lsls	r0, r5, #8
    5ab4:	d400      	bmi.n	5ab8 <__aeabi_dsub+0x51c>
    5ab6:	e68d      	b.n	57d4 <__aeabi_dsub+0x238>
    5ab8:	4650      	mov	r0, sl
    5aba:	1a17      	subs	r7, r2, r0
    5abc:	42ba      	cmp	r2, r7
    5abe:	4192      	sbcs	r2, r2
    5ac0:	1b0c      	subs	r4, r1, r4
    5ac2:	4252      	negs	r2, r2
    5ac4:	1aa4      	subs	r4, r4, r2
    5ac6:	4698      	mov	r8, r3
    5ac8:	e5ee      	b.n	56a8 <__aeabi_dsub+0x10c>
    5aca:	000d      	movs	r5, r1
    5acc:	4315      	orrs	r5, r2
    5ace:	d100      	bne.n	5ad2 <__aeabi_dsub+0x536>
    5ad0:	e76b      	b.n	59aa <__aeabi_dsub+0x40e>
    5ad2:	4650      	mov	r0, sl
    5ad4:	0767      	lsls	r7, r4, #29
    5ad6:	08c0      	lsrs	r0, r0, #3
    5ad8:	4307      	orrs	r7, r0
    5ada:	2080      	movs	r0, #128	; 0x80
    5adc:	08e4      	lsrs	r4, r4, #3
    5ade:	0300      	lsls	r0, r0, #12
    5ae0:	4204      	tst	r4, r0
    5ae2:	d007      	beq.n	5af4 <__aeabi_dsub+0x558>
    5ae4:	08cd      	lsrs	r5, r1, #3
    5ae6:	4205      	tst	r5, r0
    5ae8:	d104      	bne.n	5af4 <__aeabi_dsub+0x558>
    5aea:	002c      	movs	r4, r5
    5aec:	4698      	mov	r8, r3
    5aee:	08d7      	lsrs	r7, r2, #3
    5af0:	0749      	lsls	r1, r1, #29
    5af2:	430f      	orrs	r7, r1
    5af4:	0f7b      	lsrs	r3, r7, #29
    5af6:	00e4      	lsls	r4, r4, #3
    5af8:	431c      	orrs	r4, r3
    5afa:	00ff      	lsls	r7, r7, #3
    5afc:	4e30      	ldr	r6, [pc, #192]	; (5bc0 <__aeabi_dsub+0x624>)
    5afe:	e5d3      	b.n	56a8 <__aeabi_dsub+0x10c>
    5b00:	4e2f      	ldr	r6, [pc, #188]	; (5bc0 <__aeabi_dsub+0x624>)
    5b02:	45b4      	cmp	ip, r6
    5b04:	d1b4      	bne.n	5a70 <__aeabi_dsub+0x4d4>
    5b06:	000c      	movs	r4, r1
    5b08:	0017      	movs	r7, r2
    5b0a:	4666      	mov	r6, ip
    5b0c:	e5cc      	b.n	56a8 <__aeabi_dsub+0x10c>
    5b0e:	2700      	movs	r7, #0
    5b10:	2400      	movs	r4, #0
    5b12:	e5e8      	b.n	56e6 <__aeabi_dsub+0x14a>
    5b14:	2b00      	cmp	r3, #0
    5b16:	d039      	beq.n	5b8c <__aeabi_dsub+0x5f0>
    5b18:	000b      	movs	r3, r1
    5b1a:	4313      	orrs	r3, r2
    5b1c:	d100      	bne.n	5b20 <__aeabi_dsub+0x584>
    5b1e:	e744      	b.n	59aa <__aeabi_dsub+0x40e>
    5b20:	08c0      	lsrs	r0, r0, #3
    5b22:	0767      	lsls	r7, r4, #29
    5b24:	4307      	orrs	r7, r0
    5b26:	2080      	movs	r0, #128	; 0x80
    5b28:	08e4      	lsrs	r4, r4, #3
    5b2a:	0300      	lsls	r0, r0, #12
    5b2c:	4204      	tst	r4, r0
    5b2e:	d0e1      	beq.n	5af4 <__aeabi_dsub+0x558>
    5b30:	08cb      	lsrs	r3, r1, #3
    5b32:	4203      	tst	r3, r0
    5b34:	d1de      	bne.n	5af4 <__aeabi_dsub+0x558>
    5b36:	08d7      	lsrs	r7, r2, #3
    5b38:	0749      	lsls	r1, r1, #29
    5b3a:	430f      	orrs	r7, r1
    5b3c:	001c      	movs	r4, r3
    5b3e:	e7d9      	b.n	5af4 <__aeabi_dsub+0x558>
    5b40:	2100      	movs	r1, #0
    5b42:	e771      	b.n	5a28 <__aeabi_dsub+0x48c>
    5b44:	2500      	movs	r5, #0
    5b46:	2700      	movs	r7, #0
    5b48:	e5e9      	b.n	571e <__aeabi_dsub+0x182>
    5b4a:	002e      	movs	r6, r5
    5b4c:	0027      	movs	r7, r4
    5b4e:	3e20      	subs	r6, #32
    5b50:	40f7      	lsrs	r7, r6
    5b52:	2d20      	cmp	r5, #32
    5b54:	d02f      	beq.n	5bb6 <__aeabi_dsub+0x61a>
    5b56:	2640      	movs	r6, #64	; 0x40
    5b58:	1b75      	subs	r5, r6, r5
    5b5a:	40ac      	lsls	r4, r5
    5b5c:	4650      	mov	r0, sl
    5b5e:	4320      	orrs	r0, r4
    5b60:	1e44      	subs	r4, r0, #1
    5b62:	41a0      	sbcs	r0, r4
    5b64:	2400      	movs	r4, #0
    5b66:	4338      	orrs	r0, r7
    5b68:	e6dc      	b.n	5924 <__aeabi_dsub+0x388>
    5b6a:	2480      	movs	r4, #128	; 0x80
    5b6c:	2500      	movs	r5, #0
    5b6e:	0324      	lsls	r4, r4, #12
    5b70:	4e13      	ldr	r6, [pc, #76]	; (5bc0 <__aeabi_dsub+0x624>)
    5b72:	2700      	movs	r7, #0
    5b74:	e5d3      	b.n	571e <__aeabi_dsub+0x182>
    5b76:	4650      	mov	r0, sl
    5b78:	4320      	orrs	r0, r4
    5b7a:	0007      	movs	r7, r0
    5b7c:	1e78      	subs	r0, r7, #1
    5b7e:	4187      	sbcs	r7, r0
    5b80:	2400      	movs	r4, #0
    5b82:	18bf      	adds	r7, r7, r2
    5b84:	e760      	b.n	5a48 <__aeabi_dsub+0x4ac>
    5b86:	000c      	movs	r4, r1
    5b88:	0017      	movs	r7, r2
    5b8a:	e58d      	b.n	56a8 <__aeabi_dsub+0x10c>
    5b8c:	000c      	movs	r4, r1
    5b8e:	0017      	movs	r7, r2
    5b90:	4e0b      	ldr	r6, [pc, #44]	; (5bc0 <__aeabi_dsub+0x624>)
    5b92:	e589      	b.n	56a8 <__aeabi_dsub+0x10c>
    5b94:	001e      	movs	r6, r3
    5b96:	0027      	movs	r7, r4
    5b98:	3e20      	subs	r6, #32
    5b9a:	40f7      	lsrs	r7, r6
    5b9c:	2b20      	cmp	r3, #32
    5b9e:	d00c      	beq.n	5bba <__aeabi_dsub+0x61e>
    5ba0:	2640      	movs	r6, #64	; 0x40
    5ba2:	1af3      	subs	r3, r6, r3
    5ba4:	409c      	lsls	r4, r3
    5ba6:	4650      	mov	r0, sl
    5ba8:	4320      	orrs	r0, r4
    5baa:	1e44      	subs	r4, r0, #1
    5bac:	41a0      	sbcs	r0, r4
    5bae:	4307      	orrs	r7, r0
    5bb0:	2400      	movs	r4, #0
    5bb2:	18bf      	adds	r7, r7, r2
    5bb4:	e748      	b.n	5a48 <__aeabi_dsub+0x4ac>
    5bb6:	2400      	movs	r4, #0
    5bb8:	e7d0      	b.n	5b5c <__aeabi_dsub+0x5c0>
    5bba:	2400      	movs	r4, #0
    5bbc:	e7f3      	b.n	5ba6 <__aeabi_dsub+0x60a>
    5bbe:	46c0      	nop			; (mov r8, r8)
    5bc0:	000007ff 	.word	0x000007ff
    5bc4:	ff7fffff 	.word	0xff7fffff

00005bc8 <__aeabi_d2iz>:
    5bc8:	b530      	push	{r4, r5, lr}
    5bca:	4d13      	ldr	r5, [pc, #76]	; (5c18 <__aeabi_d2iz+0x50>)
    5bcc:	030a      	lsls	r2, r1, #12
    5bce:	004b      	lsls	r3, r1, #1
    5bd0:	0b12      	lsrs	r2, r2, #12
    5bd2:	0d5b      	lsrs	r3, r3, #21
    5bd4:	0fc9      	lsrs	r1, r1, #31
    5bd6:	2400      	movs	r4, #0
    5bd8:	42ab      	cmp	r3, r5
    5bda:	dd10      	ble.n	5bfe <__aeabi_d2iz+0x36>
    5bdc:	4c0f      	ldr	r4, [pc, #60]	; (5c1c <__aeabi_d2iz+0x54>)
    5bde:	42a3      	cmp	r3, r4
    5be0:	dc0f      	bgt.n	5c02 <__aeabi_d2iz+0x3a>
    5be2:	2480      	movs	r4, #128	; 0x80
    5be4:	4d0e      	ldr	r5, [pc, #56]	; (5c20 <__aeabi_d2iz+0x58>)
    5be6:	0364      	lsls	r4, r4, #13
    5be8:	4322      	orrs	r2, r4
    5bea:	1aed      	subs	r5, r5, r3
    5bec:	2d1f      	cmp	r5, #31
    5bee:	dd0b      	ble.n	5c08 <__aeabi_d2iz+0x40>
    5bf0:	480c      	ldr	r0, [pc, #48]	; (5c24 <__aeabi_d2iz+0x5c>)
    5bf2:	1ac3      	subs	r3, r0, r3
    5bf4:	40da      	lsrs	r2, r3
    5bf6:	4254      	negs	r4, r2
    5bf8:	2900      	cmp	r1, #0
    5bfa:	d100      	bne.n	5bfe <__aeabi_d2iz+0x36>
    5bfc:	0014      	movs	r4, r2
    5bfe:	0020      	movs	r0, r4
    5c00:	bd30      	pop	{r4, r5, pc}
    5c02:	4b09      	ldr	r3, [pc, #36]	; (5c28 <__aeabi_d2iz+0x60>)
    5c04:	18cc      	adds	r4, r1, r3
    5c06:	e7fa      	b.n	5bfe <__aeabi_d2iz+0x36>
    5c08:	4c08      	ldr	r4, [pc, #32]	; (5c2c <__aeabi_d2iz+0x64>)
    5c0a:	40e8      	lsrs	r0, r5
    5c0c:	46a4      	mov	ip, r4
    5c0e:	4463      	add	r3, ip
    5c10:	409a      	lsls	r2, r3
    5c12:	4302      	orrs	r2, r0
    5c14:	e7ef      	b.n	5bf6 <__aeabi_d2iz+0x2e>
    5c16:	46c0      	nop			; (mov r8, r8)
    5c18:	000003fe 	.word	0x000003fe
    5c1c:	0000041d 	.word	0x0000041d
    5c20:	00000433 	.word	0x00000433
    5c24:	00000413 	.word	0x00000413
    5c28:	7fffffff 	.word	0x7fffffff
    5c2c:	fffffbed 	.word	0xfffffbed

00005c30 <__aeabi_ui2d>:
    5c30:	b510      	push	{r4, lr}
    5c32:	1e04      	subs	r4, r0, #0
    5c34:	d028      	beq.n	5c88 <__aeabi_ui2d+0x58>
    5c36:	f000 f833 	bl	5ca0 <__clzsi2>
    5c3a:	4b15      	ldr	r3, [pc, #84]	; (5c90 <__aeabi_ui2d+0x60>)
    5c3c:	4a15      	ldr	r2, [pc, #84]	; (5c94 <__aeabi_ui2d+0x64>)
    5c3e:	1a1b      	subs	r3, r3, r0
    5c40:	1ad2      	subs	r2, r2, r3
    5c42:	2a1f      	cmp	r2, #31
    5c44:	dd15      	ble.n	5c72 <__aeabi_ui2d+0x42>
    5c46:	4a14      	ldr	r2, [pc, #80]	; (5c98 <__aeabi_ui2d+0x68>)
    5c48:	1ad2      	subs	r2, r2, r3
    5c4a:	4094      	lsls	r4, r2
    5c4c:	2200      	movs	r2, #0
    5c4e:	0324      	lsls	r4, r4, #12
    5c50:	055b      	lsls	r3, r3, #21
    5c52:	0b24      	lsrs	r4, r4, #12
    5c54:	0d5b      	lsrs	r3, r3, #21
    5c56:	2100      	movs	r1, #0
    5c58:	0010      	movs	r0, r2
    5c5a:	0324      	lsls	r4, r4, #12
    5c5c:	0d0a      	lsrs	r2, r1, #20
    5c5e:	0b24      	lsrs	r4, r4, #12
    5c60:	0512      	lsls	r2, r2, #20
    5c62:	4322      	orrs	r2, r4
    5c64:	4c0d      	ldr	r4, [pc, #52]	; (5c9c <__aeabi_ui2d+0x6c>)
    5c66:	051b      	lsls	r3, r3, #20
    5c68:	4022      	ands	r2, r4
    5c6a:	4313      	orrs	r3, r2
    5c6c:	005b      	lsls	r3, r3, #1
    5c6e:	0859      	lsrs	r1, r3, #1
    5c70:	bd10      	pop	{r4, pc}
    5c72:	0021      	movs	r1, r4
    5c74:	4091      	lsls	r1, r2
    5c76:	000a      	movs	r2, r1
    5c78:	210b      	movs	r1, #11
    5c7a:	1a08      	subs	r0, r1, r0
    5c7c:	40c4      	lsrs	r4, r0
    5c7e:	055b      	lsls	r3, r3, #21
    5c80:	0324      	lsls	r4, r4, #12
    5c82:	0b24      	lsrs	r4, r4, #12
    5c84:	0d5b      	lsrs	r3, r3, #21
    5c86:	e7e6      	b.n	5c56 <__aeabi_ui2d+0x26>
    5c88:	2300      	movs	r3, #0
    5c8a:	2400      	movs	r4, #0
    5c8c:	2200      	movs	r2, #0
    5c8e:	e7e2      	b.n	5c56 <__aeabi_ui2d+0x26>
    5c90:	0000041e 	.word	0x0000041e
    5c94:	00000433 	.word	0x00000433
    5c98:	00000413 	.word	0x00000413
    5c9c:	800fffff 	.word	0x800fffff

00005ca0 <__clzsi2>:
    5ca0:	211c      	movs	r1, #28
    5ca2:	2301      	movs	r3, #1
    5ca4:	041b      	lsls	r3, r3, #16
    5ca6:	4298      	cmp	r0, r3
    5ca8:	d301      	bcc.n	5cae <__clzsi2+0xe>
    5caa:	0c00      	lsrs	r0, r0, #16
    5cac:	3910      	subs	r1, #16
    5cae:	0a1b      	lsrs	r3, r3, #8
    5cb0:	4298      	cmp	r0, r3
    5cb2:	d301      	bcc.n	5cb8 <__clzsi2+0x18>
    5cb4:	0a00      	lsrs	r0, r0, #8
    5cb6:	3908      	subs	r1, #8
    5cb8:	091b      	lsrs	r3, r3, #4
    5cba:	4298      	cmp	r0, r3
    5cbc:	d301      	bcc.n	5cc2 <__clzsi2+0x22>
    5cbe:	0900      	lsrs	r0, r0, #4
    5cc0:	3904      	subs	r1, #4
    5cc2:	a202      	add	r2, pc, #8	; (adr r2, 5ccc <__clzsi2+0x2c>)
    5cc4:	5c10      	ldrb	r0, [r2, r0]
    5cc6:	1840      	adds	r0, r0, r1
    5cc8:	4770      	bx	lr
    5cca:	46c0      	nop			; (mov r8, r8)
    5ccc:	02020304 	.word	0x02020304
    5cd0:	01010101 	.word	0x01010101
	...

00005cdc <__clzdi2>:
    5cdc:	b510      	push	{r4, lr}
    5cde:	2900      	cmp	r1, #0
    5ce0:	d103      	bne.n	5cea <__clzdi2+0xe>
    5ce2:	f7ff ffdd 	bl	5ca0 <__clzsi2>
    5ce6:	3020      	adds	r0, #32
    5ce8:	e002      	b.n	5cf0 <__clzdi2+0x14>
    5cea:	1c08      	adds	r0, r1, #0
    5cec:	f7ff ffd8 	bl	5ca0 <__clzsi2>
    5cf0:	bd10      	pop	{r4, pc}
    5cf2:	46c0      	nop			; (mov r8, r8)

00005cf4 <__libc_init_array>:
    5cf4:	b570      	push	{r4, r5, r6, lr}
    5cf6:	4e0d      	ldr	r6, [pc, #52]	; (5d2c <__libc_init_array+0x38>)
    5cf8:	4d0d      	ldr	r5, [pc, #52]	; (5d30 <__libc_init_array+0x3c>)
    5cfa:	2400      	movs	r4, #0
    5cfc:	1bad      	subs	r5, r5, r6
    5cfe:	10ad      	asrs	r5, r5, #2
    5d00:	d005      	beq.n	5d0e <__libc_init_array+0x1a>
    5d02:	00a3      	lsls	r3, r4, #2
    5d04:	58f3      	ldr	r3, [r6, r3]
    5d06:	3401      	adds	r4, #1
    5d08:	4798      	blx	r3
    5d0a:	42a5      	cmp	r5, r4
    5d0c:	d1f9      	bne.n	5d02 <__libc_init_array+0xe>
    5d0e:	f000 fa4b 	bl	61a8 <_init>
    5d12:	4e08      	ldr	r6, [pc, #32]	; (5d34 <__libc_init_array+0x40>)
    5d14:	4d08      	ldr	r5, [pc, #32]	; (5d38 <__libc_init_array+0x44>)
    5d16:	2400      	movs	r4, #0
    5d18:	1bad      	subs	r5, r5, r6
    5d1a:	10ad      	asrs	r5, r5, #2
    5d1c:	d005      	beq.n	5d2a <__libc_init_array+0x36>
    5d1e:	00a3      	lsls	r3, r4, #2
    5d20:	58f3      	ldr	r3, [r6, r3]
    5d22:	3401      	adds	r4, #1
    5d24:	4798      	blx	r3
    5d26:	42a5      	cmp	r5, r4
    5d28:	d1f9      	bne.n	5d1e <__libc_init_array+0x2a>
    5d2a:	bd70      	pop	{r4, r5, r6, pc}
    5d2c:	000061b4 	.word	0x000061b4
    5d30:	000061b4 	.word	0x000061b4
    5d34:	000061b4 	.word	0x000061b4
    5d38:	000061bc 	.word	0x000061bc

00005d3c <register_fini>:
    5d3c:	4b03      	ldr	r3, [pc, #12]	; (5d4c <register_fini+0x10>)
    5d3e:	b510      	push	{r4, lr}
    5d40:	2b00      	cmp	r3, #0
    5d42:	d002      	beq.n	5d4a <register_fini+0xe>
    5d44:	4802      	ldr	r0, [pc, #8]	; (5d50 <register_fini+0x14>)
    5d46:	f000 f805 	bl	5d54 <atexit>
    5d4a:	bd10      	pop	{r4, pc}
    5d4c:	00000000 	.word	0x00000000
    5d50:	00005d65 	.word	0x00005d65

00005d54 <atexit>:
    5d54:	b510      	push	{r4, lr}
    5d56:	0001      	movs	r1, r0
    5d58:	2300      	movs	r3, #0
    5d5a:	2200      	movs	r2, #0
    5d5c:	2000      	movs	r0, #0
    5d5e:	f000 f81b 	bl	5d98 <__register_exitproc>
    5d62:	bd10      	pop	{r4, pc}

00005d64 <__libc_fini_array>:
    5d64:	b570      	push	{r4, r5, r6, lr}
    5d66:	4b09      	ldr	r3, [pc, #36]	; (5d8c <__libc_fini_array+0x28>)
    5d68:	4c09      	ldr	r4, [pc, #36]	; (5d90 <__libc_fini_array+0x2c>)
    5d6a:	1ae4      	subs	r4, r4, r3
    5d6c:	10a4      	asrs	r4, r4, #2
    5d6e:	d009      	beq.n	5d84 <__libc_fini_array+0x20>
    5d70:	4a08      	ldr	r2, [pc, #32]	; (5d94 <__libc_fini_array+0x30>)
    5d72:	18a5      	adds	r5, r4, r2
    5d74:	00ad      	lsls	r5, r5, #2
    5d76:	18ed      	adds	r5, r5, r3
    5d78:	682b      	ldr	r3, [r5, #0]
    5d7a:	3c01      	subs	r4, #1
    5d7c:	4798      	blx	r3
    5d7e:	3d04      	subs	r5, #4
    5d80:	2c00      	cmp	r4, #0
    5d82:	d1f9      	bne.n	5d78 <__libc_fini_array+0x14>
    5d84:	f000 fa1a 	bl	61bc <_fini>
    5d88:	bd70      	pop	{r4, r5, r6, pc}
    5d8a:	46c0      	nop			; (mov r8, r8)
    5d8c:	000061c8 	.word	0x000061c8
    5d90:	000061cc 	.word	0x000061cc
    5d94:	3fffffff 	.word	0x3fffffff

00005d98 <__register_exitproc>:
    5d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d9a:	46de      	mov	lr, fp
    5d9c:	469b      	mov	fp, r3
    5d9e:	4b31      	ldr	r3, [pc, #196]	; (5e64 <__register_exitproc+0xcc>)
    5da0:	4645      	mov	r5, r8
    5da2:	681c      	ldr	r4, [r3, #0]
    5da4:	23a4      	movs	r3, #164	; 0xa4
    5da6:	464e      	mov	r6, r9
    5da8:	4657      	mov	r7, sl
    5daa:	005b      	lsls	r3, r3, #1
    5dac:	b5e0      	push	{r5, r6, r7, lr}
    5dae:	0005      	movs	r5, r0
    5db0:	58e0      	ldr	r0, [r4, r3]
    5db2:	000e      	movs	r6, r1
    5db4:	4690      	mov	r8, r2
    5db6:	2800      	cmp	r0, #0
    5db8:	d04b      	beq.n	5e52 <__register_exitproc+0xba>
    5dba:	6843      	ldr	r3, [r0, #4]
    5dbc:	2b1f      	cmp	r3, #31
    5dbe:	dc0d      	bgt.n	5ddc <__register_exitproc+0x44>
    5dc0:	1c5c      	adds	r4, r3, #1
    5dc2:	2d00      	cmp	r5, #0
    5dc4:	d121      	bne.n	5e0a <__register_exitproc+0x72>
    5dc6:	3302      	adds	r3, #2
    5dc8:	009b      	lsls	r3, r3, #2
    5dca:	6044      	str	r4, [r0, #4]
    5dcc:	501e      	str	r6, [r3, r0]
    5dce:	2000      	movs	r0, #0
    5dd0:	bc3c      	pop	{r2, r3, r4, r5}
    5dd2:	4690      	mov	r8, r2
    5dd4:	4699      	mov	r9, r3
    5dd6:	46a2      	mov	sl, r4
    5dd8:	46ab      	mov	fp, r5
    5dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ddc:	4b22      	ldr	r3, [pc, #136]	; (5e68 <__register_exitproc+0xd0>)
    5dde:	2b00      	cmp	r3, #0
    5de0:	d03c      	beq.n	5e5c <__register_exitproc+0xc4>
    5de2:	20c8      	movs	r0, #200	; 0xc8
    5de4:	0040      	lsls	r0, r0, #1
    5de6:	e000      	b.n	5dea <__register_exitproc+0x52>
    5de8:	bf00      	nop
    5dea:	2800      	cmp	r0, #0
    5dec:	d036      	beq.n	5e5c <__register_exitproc+0xc4>
    5dee:	22a4      	movs	r2, #164	; 0xa4
    5df0:	2300      	movs	r3, #0
    5df2:	0052      	lsls	r2, r2, #1
    5df4:	58a1      	ldr	r1, [r4, r2]
    5df6:	6043      	str	r3, [r0, #4]
    5df8:	6001      	str	r1, [r0, #0]
    5dfa:	50a0      	str	r0, [r4, r2]
    5dfc:	3240      	adds	r2, #64	; 0x40
    5dfe:	5083      	str	r3, [r0, r2]
    5e00:	3204      	adds	r2, #4
    5e02:	5083      	str	r3, [r0, r2]
    5e04:	2401      	movs	r4, #1
    5e06:	2d00      	cmp	r5, #0
    5e08:	d0dd      	beq.n	5dc6 <__register_exitproc+0x2e>
    5e0a:	009a      	lsls	r2, r3, #2
    5e0c:	4691      	mov	r9, r2
    5e0e:	4481      	add	r9, r0
    5e10:	4642      	mov	r2, r8
    5e12:	2188      	movs	r1, #136	; 0x88
    5e14:	464f      	mov	r7, r9
    5e16:	507a      	str	r2, [r7, r1]
    5e18:	22c4      	movs	r2, #196	; 0xc4
    5e1a:	0052      	lsls	r2, r2, #1
    5e1c:	4690      	mov	r8, r2
    5e1e:	4480      	add	r8, r0
    5e20:	4642      	mov	r2, r8
    5e22:	3987      	subs	r1, #135	; 0x87
    5e24:	4099      	lsls	r1, r3
    5e26:	6812      	ldr	r2, [r2, #0]
    5e28:	468a      	mov	sl, r1
    5e2a:	430a      	orrs	r2, r1
    5e2c:	4694      	mov	ip, r2
    5e2e:	4642      	mov	r2, r8
    5e30:	4661      	mov	r1, ip
    5e32:	6011      	str	r1, [r2, #0]
    5e34:	2284      	movs	r2, #132	; 0x84
    5e36:	4649      	mov	r1, r9
    5e38:	465f      	mov	r7, fp
    5e3a:	0052      	lsls	r2, r2, #1
    5e3c:	508f      	str	r7, [r1, r2]
    5e3e:	2d02      	cmp	r5, #2
    5e40:	d1c1      	bne.n	5dc6 <__register_exitproc+0x2e>
    5e42:	0002      	movs	r2, r0
    5e44:	4655      	mov	r5, sl
    5e46:	328d      	adds	r2, #141	; 0x8d
    5e48:	32ff      	adds	r2, #255	; 0xff
    5e4a:	6811      	ldr	r1, [r2, #0]
    5e4c:	430d      	orrs	r5, r1
    5e4e:	6015      	str	r5, [r2, #0]
    5e50:	e7b9      	b.n	5dc6 <__register_exitproc+0x2e>
    5e52:	0020      	movs	r0, r4
    5e54:	304d      	adds	r0, #77	; 0x4d
    5e56:	30ff      	adds	r0, #255	; 0xff
    5e58:	50e0      	str	r0, [r4, r3]
    5e5a:	e7ae      	b.n	5dba <__register_exitproc+0x22>
    5e5c:	2001      	movs	r0, #1
    5e5e:	4240      	negs	r0, r0
    5e60:	e7b6      	b.n	5dd0 <__register_exitproc+0x38>
    5e62:	46c0      	nop			; (mov r8, r8)
    5e64:	000061a4 	.word	0x000061a4
    5e68:	00000000 	.word	0x00000000
    5e6c:	0000002d 	.word	0x0000002d
    5e70:	0000002e 	.word	0x0000002e
    5e74:	00000030 	.word	0x00000030
    5e78:	0d0a0d20 	.word	0x0d0a0d20
    5e7c:	0d0a0d0a 	.word	0x0d0a0d0a
    5e80:	0000000a 	.word	0x0000000a
    5e84:	2a2a2a2a 	.word	0x2a2a2a2a
    5e88:	62654420 	.word	0x62654420
    5e8c:	65676775 	.word	0x65676775
    5e90:	754f2072 	.word	0x754f2072
    5e94:	74757074 	.word	0x74757074
    5e98:	20736920 	.word	0x20736920
    5e9c:	74696e49 	.word	0x74696e49
    5ea0:	696c6169 	.word	0x696c6169
    5ea4:	676e697a 	.word	0x676e697a
    5ea8:	2a2a2a20 	.word	0x2a2a2a20
    5eac:	000a0d20 	.word	0x000a0d20
    5eb0:	2a2a2a2a 	.word	0x2a2a2a2a
    5eb4:	62654420 	.word	0x62654420
    5eb8:	65676775 	.word	0x65676775
    5ebc:	754f2072 	.word	0x754f2072
    5ec0:	74757074 	.word	0x74757074
    5ec4:	73614820 	.word	0x73614820
    5ec8:	65654220 	.word	0x65654220
    5ecc:	6e49206e 	.word	0x6e49206e
    5ed0:	61697469 	.word	0x61697469
    5ed4:	657a696c 	.word	0x657a696c
    5ed8:	2a2a2064 	.word	0x2a2a2064
    5edc:	0a0d202a 	.word	0x0a0d202a
    5ee0:	00000000 	.word	0x00000000
    5ee4:	0000005b 	.word	0x0000005b
    5ee8:	0020205d 	.word	0x0020205d
    5eec:	00000a0d 	.word	0x00000a0d
    5ef0:	74696e49 	.word	0x74696e49
    5ef4:	696c6169 	.word	0x696c6169
    5ef8:	676e697a 	.word	0x676e697a
    5efc:	45464120 	.word	0x45464120
    5f00:	62694c20 	.word	0x62694c20
    5f04:	79726172 	.word	0x79726172
    5f08:	0000002e 	.word	0x0000002e
    5f0c:	412d2d2d 	.word	0x412d2d2d
    5f10:	56204546 	.word	0x56204546
    5f14:	65756c61 	.word	0x65756c61
    5f18:	2d2d2d73 	.word	0x2d2d2d73
    5f1c:	00000000 	.word	0x00000000
    5f20:	666e6f43 	.word	0x666e6f43
    5f24:	3a306769 	.word	0x3a306769
    5f28:	00000020 	.word	0x00000020
    5f2c:	666e6f43 	.word	0x666e6f43
    5f30:	3a316769 	.word	0x3a316769
    5f34:	00000020 	.word	0x00000020
    5f38:	666e6f43 	.word	0x666e6f43
    5f3c:	3a326769 	.word	0x3a326769
    5f40:	00000020 	.word	0x00000020
    5f44:	666e6f43 	.word	0x666e6f43
    5f48:	3a336769 	.word	0x3a336769
    5f4c:	00000020 	.word	0x00000020
    5f50:	666e6f43 	.word	0x666e6f43
    5f54:	3a346769 	.word	0x3a346769
    5f58:	00000020 	.word	0x00000020
    5f5c:	31464f54 	.word	0x31464f54
    5f60:	0000203a 	.word	0x0000203a
    5f64:	30464f54 	.word	0x30464f54
    5f68:	0000203a 	.word	0x0000203a
    5f6c:	6f727245 	.word	0x6f727245
    5f70:	6c462072 	.word	0x6c462072
    5f74:	3a736761 	.word	0x3a736761
    5f78:	00000020 	.word	0x00000020
    5f7c:	656d6954 	.word	0x656d6954
    5f80:	7374756f 	.word	0x7374756f
    5f84:	0000203a 	.word	0x0000203a
    5f88:	636f6c43 	.word	0x636f6c43
    5f8c:	6152206b 	.word	0x6152206b
    5f90:	203a6567 	.word	0x203a6567
    5f94:	00000000 	.word	0x00000000
    5f98:	0a0d0a0d 	.word	0x0a0d0a0d
    5f9c:	00000000 	.word	0x00000000
    5fa0:	4f525245 	.word	0x4f525245
    5fa4:	69572052 	.word	0x69572052
    5fa8:	52206874 	.word	0x52206874
    5fac:	69646165 	.word	0x69646165
    5fb0:	0021676e 	.word	0x0021676e
    5fb4:	00007375 	.word	0x00007375
    5fb8:	74696e49 	.word	0x74696e49
    5fbc:	696c6169 	.word	0x696c6169
    5fc0:	676e697a 	.word	0x676e697a
    5fc4:	43445420 	.word	0x43445420
    5fc8:	62694c20 	.word	0x62694c20
    5fcc:	79726172 	.word	0x79726172
    5fd0:	0000002e 	.word	0x0000002e
    5fd4:	542d2d2d 	.word	0x542d2d2d
    5fd8:	56204344 	.word	0x56204344
    5fdc:	65756c61 	.word	0x65756c61
    5fe0:	2d2d2d73 	.word	0x2d2d2d73
    5fe4:	00000000 	.word	0x00000000
    5fe8:	666e6f43 	.word	0x666e6f43
    5fec:	3a316769 	.word	0x3a316769
    5ff0:	00000020 	.word	0x00000020
    5ff4:	666e6f43 	.word	0x666e6f43
    5ff8:	3a326769 	.word	0x3a326769
    5ffc:	00000020 	.word	0x00000020
    6000:	53746e49 	.word	0x53746e49
    6004:	75746174 	.word	0x75746174
    6008:	00203a73 	.word	0x00203a73
    600c:	4d746e49 	.word	0x4d746e49
    6010:	3a6b7361 	.word	0x3a6b7361
    6014:	00000020 	.word	0x00000020
    6018:	72756f43 	.word	0x72756f43
    601c:	6f436573 	.word	0x6f436573
    6020:	65746e75 	.word	0x65746e75
    6024:	203a4872 	.word	0x203a4872
    6028:	00000000 	.word	0x00000000
    602c:	72756f43 	.word	0x72756f43
    6030:	6f436573 	.word	0x6f436573
    6034:	65746e75 	.word	0x65746e75
    6038:	203a4c72 	.word	0x203a4c72
    603c:	00000000 	.word	0x00000000
    6040:	636f6c43 	.word	0x636f6c43
    6044:	756f436b 	.word	0x756f436b
    6048:	7265746e 	.word	0x7265746e
    604c:	00203a4c 	.word	0x00203a4c
    6050:	636f6c43 	.word	0x636f6c43
    6054:	756f436b 	.word	0x756f436b
    6058:	7265746e 	.word	0x7265746e
    605c:	00203a48 	.word	0x00203a48
    6060:	636f6c43 	.word	0x636f6c43
    6064:	756f436b 	.word	0x756f436b
    6068:	7265746e 	.word	0x7265746e
    606c:	6b73614d 	.word	0x6b73614d
    6070:	00203a48 	.word	0x00203a48
    6074:	636f6c43 	.word	0x636f6c43
    6078:	756f436b 	.word	0x756f436b
    607c:	7265746e 	.word	0x7265746e
    6080:	6b73614d 	.word	0x6b73614d
    6084:	00203a4c 	.word	0x00203a4c
    6088:	656d6954 	.word	0x656d6954
    608c:	203a3172 	.word	0x203a3172
    6090:	00000000 	.word	0x00000000
    6094:	636f6c43 	.word	0x636f6c43
    6098:	203a316b 	.word	0x203a316b
    609c:	00000000 	.word	0x00000000
    60a0:	656d6954 	.word	0x656d6954
    60a4:	203a3272 	.word	0x203a3272
    60a8:	00000000 	.word	0x00000000
    60ac:	636f6c43 	.word	0x636f6c43
    60b0:	203a326b 	.word	0x203a326b
    60b4:	00000000 	.word	0x00000000
    60b8:	656d6954 	.word	0x656d6954
    60bc:	203a3372 	.word	0x203a3372
    60c0:	00000000 	.word	0x00000000
    60c4:	636f6c43 	.word	0x636f6c43
    60c8:	203a336b 	.word	0x203a336b
    60cc:	00000000 	.word	0x00000000
    60d0:	656d6954 	.word	0x656d6954
    60d4:	203a3472 	.word	0x203a3472
    60d8:	00000000 	.word	0x00000000
    60dc:	636f6c43 	.word	0x636f6c43
    60e0:	203a346b 	.word	0x203a346b
    60e4:	00000000 	.word	0x00000000
    60e8:	656d6954 	.word	0x656d6954
    60ec:	203a3572 	.word	0x203a3572
    60f0:	00000000 	.word	0x00000000
    60f4:	636f6c43 	.word	0x636f6c43
    60f8:	203a356b 	.word	0x203a356b
    60fc:	00000000 	.word	0x00000000
    6100:	656d6954 	.word	0x656d6954
    6104:	203a3672 	.word	0x203a3672
    6108:	00000000 	.word	0x00000000
    610c:	626c6143 	.word	0x626c6143
    6110:	00203a31 	.word	0x00203a31
    6114:	626c6143 	.word	0x626c6143
    6118:	00203a32 	.word	0x00203a32
    611c:	0a0d0a0d 	.word	0x0a0d0a0d
    6120:	00000000 	.word	0x00000000
    6124:	00004a2c 	.word	0x00004a2c
    6128:	00004a0e 	.word	0x00004a0e
    612c:	000049c8 	.word	0x000049c8
    6130:	000048e6 	.word	0x000048e6
    6134:	000049c8 	.word	0x000049c8
    6138:	00004a00 	.word	0x00004a00
    613c:	000049c8 	.word	0x000049c8
    6140:	000048e6 	.word	0x000048e6
    6144:	00004a0e 	.word	0x00004a0e
    6148:	00004a0e 	.word	0x00004a0e
    614c:	00004a00 	.word	0x00004a00
    6150:	000048e6 	.word	0x000048e6
    6154:	000048de 	.word	0x000048de
    6158:	000048de 	.word	0x000048de
    615c:	000048de 	.word	0x000048de
    6160:	00004c44 	.word	0x00004c44
    6164:	0000528c 	.word	0x0000528c
    6168:	0000514c 	.word	0x0000514c
    616c:	0000514c 	.word	0x0000514c
    6170:	00005148 	.word	0x00005148
    6174:	00005264 	.word	0x00005264
    6178:	00005264 	.word	0x00005264
    617c:	00005256 	.word	0x00005256
    6180:	00005148 	.word	0x00005148
    6184:	00005264 	.word	0x00005264
    6188:	00005256 	.word	0x00005256
    618c:	00005264 	.word	0x00005264
    6190:	00005148 	.word	0x00005148
    6194:	0000526c 	.word	0x0000526c
    6198:	0000526c 	.word	0x0000526c
    619c:	0000526c 	.word	0x0000526c
    61a0:	00005470 	.word	0x00005470

000061a4 <_global_impure_ptr>:
    61a4:	20000278                                x.. 

000061a8 <_init>:
    61a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    61ae:	bc08      	pop	{r3}
    61b0:	469e      	mov	lr, r3
    61b2:	4770      	bx	lr

000061b4 <__init_array_start>:
    61b4:	00005d3d 	.word	0x00005d3d

000061b8 <__frame_dummy_init_array_entry>:
    61b8:	000000d1                                ....

000061bc <_fini>:
    61bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    61c2:	bc08      	pop	{r3}
    61c4:	469e      	mov	lr, r3
    61c6:	4770      	bx	lr

000061c8 <__fini_array_start>:
    61c8:	000000a9 	.word	0x000000a9
